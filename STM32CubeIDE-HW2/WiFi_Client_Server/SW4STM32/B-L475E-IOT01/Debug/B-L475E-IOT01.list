
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f8  080065f8  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006600  08006600  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08006610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a88  200000f0  08006700  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00017000  20000b78  08006700  00020b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4ec  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037de  00000000  00000000  0003e60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001369d  00000000  00000000  00041dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00055488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  00056510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a5f  00000000  00000000  00057ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cdd8  00000000  00000000  0008053f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f27e3  00000000  00000000  0009d317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018fafa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000401c  00000000  00000000  0018fb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005be8 	.word	0x08005be8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	08005be8 	.word	0x08005be8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000588:	b0a0      	sub	sp, #128	; 0x80
  uint8_t  MAC_Addr[6] = {0};
 800058a:	2400      	movs	r4, #0
 800058c:	9406      	str	r4, [sp, #24]
 800058e:	f8ad 401c 	strh.w	r4, [sp, #28]
  uint8_t  IP_Addr[4] = {0};
 8000592:	9405      	str	r4, [sp, #20]
  uint8_t TxData[] = "STM32 : Hello!\n";
  int32_t Socket = -1;
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;
  int16_t pDataXYZ[3] = {0};
 8000594:	9408      	str	r4, [sp, #32]
 8000596:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 faa7 	bl	8001aec <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800059e:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a0:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005a2:	e9cd 4216 	strd	r4, r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005aa:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ac:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b2:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005b4:	2328      	movs	r3, #40	; 0x28
 80005b6:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2404      	movs	r4, #4
 80005ba:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	a80f      	add	r0, sp, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005be:	e9cd 341d 	strd	r3, r4, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c2:	921f      	str	r2, [sp, #124]	; 0x7c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f002 f852 	bl	800266c <HAL_RCC_OscConfig>
 80005c8:	b100      	cbz	r0, 80005cc <main+0x48>
  {
    /* Initialization Error */
    while(1);
 80005ca:	e7fe      	b.n	80005ca <main+0x46>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	210f      	movs	r1, #15
 80005ce:	2303      	movs	r3, #3
 80005d0:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	900e      	str	r0, [sp, #56]	; 0x38
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005da:	4621      	mov	r1, r4
 80005dc:	a80a      	add	r0, sp, #40	; 0x28
 80005de:	f002 fac5 	bl	8002b6c <HAL_RCC_ClockConfig>
 80005e2:	4604      	mov	r4, r0
 80005e4:	b100      	cbz	r0, 80005e8 <main+0x64>
  {
    /* Initialization Error */
    while(1);
 80005e6:	e7fe      	b.n	80005e6 <main+0x62>
  BSP_LED_Init(LED2);
 80005e8:	f001 f84a 	bl	8001680 <BSP_LED_Init>
  hDiscoUart.Instance = DISCOVERY_COM1;
 80005ec:	4971      	ldr	r1, [pc, #452]	; (80007b4 <main+0x230>)
  hDiscoUart.Init.BaudRate = 115200;
 80005ee:	4a72      	ldr	r2, [pc, #456]	; (80007b8 <main+0x234>)
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80005f0:	610c      	str	r4, [r1, #16]
  hDiscoUart.Init.BaudRate = 115200;
 80005f2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005f6:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 80005fa:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80005fc:	230c      	movs	r3, #12
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80005fe:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060a:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 800060c:	f001 f864 	bl	80016d8 <BSP_COM_Init>
  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 8000610:	486a      	ldr	r0, [pc, #424]	; (80007bc <main+0x238>)
 8000612:	f004 f92b 	bl	800486c <puts>
  TERMOUT("TCP Client Instructions :\n");
 8000616:	486a      	ldr	r0, [pc, #424]	; (80007c0 <main+0x23c>)
 8000618:	f004 f928 	bl	800486c <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 800061c:	4869      	ldr	r0, [pc, #420]	; (80007c4 <main+0x240>)
 800061e:	f004 f925 	bl	800486c <puts>
  TERMOUT("   you configured using the Configuration Access Point.\n");
 8000622:	4869      	ldr	r0, [pc, #420]	; (80007c8 <main+0x244>)
 8000624:	f004 f922 	bl	800486c <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\n");
 8000628:	4868      	ldr	r0, [pc, #416]	; (80007cc <main+0x248>)
 800062a:	f004 f91f 	bl	800486c <puts>
  TERMOUT("   with port(8002).\n");
 800062e:	4868      	ldr	r0, [pc, #416]	; (80007d0 <main+0x24c>)
 8000630:	f004 f91c 	bl	800486c <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8000634:	4867      	ldr	r0, [pc, #412]	; (80007d4 <main+0x250>)
 8000636:	f004 f919 	bl	800486c <puts>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800063a:	f000 ff2b 	bl	8001494 <WIFI_Init>
 800063e:	4605      	mov	r5, r0
 8000640:	2800      	cmp	r0, #0
 8000642:	f040 80b2 	bne.w	80007aa <main+0x226>
    TERMOUT("> WIFI Module Initialized.\n");
 8000646:	4864      	ldr	r0, [pc, #400]	; (80007d8 <main+0x254>)
 8000648:	f004 f910 	bl	800486c <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 800064c:	2106      	movs	r1, #6
 800064e:	a806      	add	r0, sp, #24
 8000650:	f000 ff58 	bl	8001504 <WIFI_GetMAC_Address>
 8000654:	2800      	cmp	r0, #0
 8000656:	d14b      	bne.n	80006f0 <main+0x16c>
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8000658:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800066e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000672:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8000676:	4859      	ldr	r0, [pc, #356]	; (80007dc <main+0x258>)
 8000678:	f004 f85c 	bl	8004734 <iprintf>
    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 800067c:	4958      	ldr	r1, [pc, #352]	; (80007e0 <main+0x25c>)
 800067e:	4859      	ldr	r0, [pc, #356]	; (80007e4 <main+0x260>)
 8000680:	2203      	movs	r2, #3
 8000682:	f000 ff2b 	bl	80014dc <WIFI_Connect>
 8000686:	4604      	mov	r4, r0
 8000688:	2800      	cmp	r0, #0
 800068a:	f040 808c 	bne.w	80007a6 <main+0x222>
      TERMOUT("> es-wifi module connected \n");
 800068e:	4856      	ldr	r0, [pc, #344]	; (80007e8 <main+0x264>)
 8000690:	f004 f8ec 	bl	800486c <puts>
      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8000694:	2104      	movs	r1, #4
 8000696:	a805      	add	r0, sp, #20
 8000698:	f000 ff44 	bl	8001524 <WIFI_GetIP_Address>
 800069c:	4607      	mov	r7, r0
 800069e:	2800      	cmp	r0, #0
 80006a0:	d17c      	bne.n	800079c <main+0x218>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 80006a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80006a6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80006aa:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	484e      	ldr	r0, [pc, #312]	; (80007ec <main+0x268>)
 80006b2:	f89d 3016 	ldrb.w	r3, [sp, #22]
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80006b6:	4e4e      	ldr	r6, [pc, #312]	; (80007f0 <main+0x26c>)
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80006b8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8000818 <main+0x294>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 80006bc:	f004 f83a 	bl	8004734 <iprintf>
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80006c0:	f641 7342 	movw	r3, #8002	; 0x1f42
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	78f3      	ldrb	r3, [r6, #3]
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	78b3      	ldrb	r3, [r6, #2]
 80006cc:	7872      	ldrb	r2, [r6, #1]
 80006ce:	7831      	ldrb	r1, [r6, #0]
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <main+0x270>)
 80006d2:	f004 f82f 	bl	8004734 <iprintf>
        while (Trials--)
 80006d6:	250b      	movs	r5, #11
 80006d8:	3d01      	subs	r5, #1
 80006da:	b2ad      	uxth	r5, r5
 80006dc:	b97d      	cbnz	r5, 80006fe <main+0x17a>
          TERMOUT("> ERROR : Cannot open Connection\n");
 80006de:	4846      	ldr	r0, [pc, #280]	; (80007f8 <main+0x274>)
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 80006e0:	f004 f8c4 	bl	800486c <puts>
      BSP_LED_On(LED2);
 80006e4:	2000      	movs	r0, #0
    BSP_LED_On(LED2);
 80006e6:	f000 ffed 	bl	80016c4 <BSP_LED_On>
  int32_t Socket = -1;
 80006ea:	f04f 34ff 	mov.w	r4, #4294967295
 80006ee:	e016      	b.n	800071e <main+0x19a>
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 80006f0:	4842      	ldr	r0, [pc, #264]	; (80007fc <main+0x278>)
 80006f2:	f004 f8bb 	bl	800486c <puts>
      BSP_LED_On(LED2);
 80006f6:	4628      	mov	r0, r5
 80006f8:	f000 ffe4 	bl	80016c4 <BSP_LED_On>
 80006fc:	e7be      	b.n	800067c <main+0xf8>
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80006fe:	f641 7342 	movw	r3, #8002	; 0x1f42
 8000702:	2100      	movs	r1, #0
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	9701      	str	r7, [sp, #4]
 8000708:	4633      	mov	r3, r6
 800070a:	4642      	mov	r2, r8
 800070c:	4608      	mov	r0, r1
 800070e:	f000 ff1d 	bl	800154c <WIFI_OpenClientConnection>
 8000712:	4604      	mov	r4, r0
 8000714:	2800      	cmp	r0, #0
 8000716:	d1df      	bne.n	80006d8 <main+0x154>
            TERMOUT("> TCP Connection opened successfully.\n");
 8000718:	4839      	ldr	r0, [pc, #228]	; (8000800 <main+0x27c>)
 800071a:	f004 f8a7 	bl	800486c <puts>
  char* acc_json = (char*)malloc(100);
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f003 ff0a 	bl	8004538 <malloc>
 8000724:	4605      	mov	r5, r0
  BSP_ACCELERO_Init();
 8000726:	f001 f86f 	bl	8001808 <BSP_ACCELERO_Init>
    		int len = sprintf(acc_json,"{\"x\":%d,\"y\":%d,\"z\":%d,\"s\":%d}", x, y, z, sample_num/600);
 800072a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 800081c <main+0x298>
  int sample_num = 0;
 800072e:	2600      	movs	r6, #0
    	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8000730:	f44f 7916 	mov.w	r9, #600	; 0x258
    if(Socket != -1)
 8000734:	2c00      	cmp	r4, #0
 8000736:	d13a      	bne.n	80007ae <main+0x22a>
    	++sample_num;
 8000738:	3601      	adds	r6, #1
    	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800073a:	a808      	add	r0, sp, #32
 800073c:	f001 f878 	bl	8001830 <BSP_ACCELERO_AccGetXYZ>
 8000740:	fb96 f7f9 	sdiv	r7, r6, r9
 8000744:	fb09 6717 	mls	r7, r9, r7, r6
    	if(sample_num % 600 == 0){
 8000748:	2f00      	cmp	r7, #0
 800074a:	d1f3      	bne.n	8000734 <main+0x1b0>
    		int len = sprintf(acc_json,"{\"x\":%d,\"y\":%d,\"z\":%d,\"s\":%d}", x, y, z, sample_num/600);
 800074c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000750:	9301      	str	r3, [sp, #4]
    	int x = pDataXYZ[0], y = pDataXYZ[1], z = pDataXYZ[2];
 8000752:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
    		int len = sprintf(acc_json,"{\"x\":%d,\"y\":%d,\"z\":%d,\"s\":%d}", x, y, z, sample_num/600);
 8000756:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
    	int x = pDataXYZ[0], y = pDataXYZ[1], z = pDataXYZ[2];
 800075a:	9300      	str	r3, [sp, #0]
    		int len = sprintf(acc_json,"{\"x\":%d,\"y\":%d,\"z\":%d,\"s\":%d}", x, y, z, sample_num/600);
 800075c:	4651      	mov	r1, sl
 800075e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8000762:	4628      	mov	r0, r5
 8000764:	f004 f89a 	bl	800489c <siprintf>
 8000768:	4680      	mov	r8, r0
			TERMOUT(acc_json);
 800076a:	4628      	mov	r0, r5
 800076c:	f003 ffe2 	bl	8004734 <iprintf>
			TERMOUT("\n");
 8000770:	200a      	movs	r0, #10
 8000772:	f003 fff7 	bl	8004764 <putchar>
			ret = WIFI_SendData(Socket, acc_json, len, &Datalen, WIFI_WRITE_TIMEOUT);
 8000776:	f242 7310 	movw	r3, #10000	; 0x2710
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	fa1f f288 	uxth.w	r2, r8
 8000780:	ab0f      	add	r3, sp, #60	; 0x3c
 8000782:	4629      	mov	r1, r5
 8000784:	4638      	mov	r0, r7
 8000786:	f000 ff09 	bl	800159c <WIFI_SendData>
			if (ret != WIFI_STATUS_OK)
 800078a:	2800      	cmp	r0, #0
 800078c:	d0d2      	beq.n	8000734 <main+0x1b0>
				TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 800078e:	481d      	ldr	r0, [pc, #116]	; (8000804 <main+0x280>)
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 8000790:	f004 f86c 	bl	800486c <puts>
}
 8000794:	2000      	movs	r0, #0
 8000796:	b020      	add	sp, #128	; 0x80
 8000798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <main+0x284>)
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 800079e:	f004 f865 	bl	800486c <puts>
    BSP_LED_On(LED2);
 80007a2:	4620      	mov	r0, r4
 80007a4:	e79f      	b.n	80006e6 <main+0x162>
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 80007a6:	4819      	ldr	r0, [pc, #100]	; (800080c <main+0x288>)
 80007a8:	e79a      	b.n	80006e0 <main+0x15c>
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 80007aa:	4819      	ldr	r0, [pc, #100]	; (8000810 <main+0x28c>)
 80007ac:	e7f7      	b.n	800079e <main+0x21a>
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 80007ae:	4819      	ldr	r0, [pc, #100]	; (8000814 <main+0x290>)
 80007b0:	e7ee      	b.n	8000790 <main+0x20c>
 80007b2:	bf00      	nop
 80007b4:	20000ad4 	.word	0x20000ad4
 80007b8:	40013800 	.word	0x40013800
 80007bc:	08005cc0 	.word	0x08005cc0
 80007c0:	08005cfd 	.word	0x08005cfd
 80007c4:	08005d17 	.word	0x08005d17
 80007c8:	08005d55 	.word	0x08005d55
 80007cc:	08005d8d 	.word	0x08005d8d
 80007d0:	08005dcc 	.word	0x08005dcc
 80007d4:	08005de0 	.word	0x08005de0
 80007d8:	08005e28 	.word	0x08005e28
 80007dc:	08005e43 	.word	0x08005e43
 80007e0:	08005e96 	.word	0x08005e96
 80007e4:	08005ea0 	.word	0x08005ea0
 80007e8:	08005ea8 	.word	0x08005ea8
 80007ec:	08005ec4 	.word	0x08005ec4
 80007f0:	20000000 	.word	0x20000000
 80007f4:	08005ef3 	.word	0x08005ef3
 80007f8:	08005f57 	.word	0x08005f57
 80007fc:	08005e75 	.word	0x08005e75
 8000800:	08005f31 	.word	0x08005f31
 8000804:	08006019 	.word	0x08006019
 8000808:	08005f78 	.word	0x08005f78
 800080c:	08005fa7 	.word	0x08005fa7
 8000810:	08005fce 	.word	0x08005fce
 8000814:	0800604a 	.word	0x0800604a
 8000818:	08005f26 	.word	0x08005f26
 800081c:	08005ffb 	.word	0x08005ffb

08000820 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000820:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8000826:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000828:	2201      	movs	r2, #1
 800082a:	a901      	add	r1, sp, #4
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <__io_putchar+0x1c>)
 800082e:	f003 fd29 	bl	8004284 <HAL_UART_Transmit>

  return ch;
}
 8000832:	9801      	ldr	r0, [sp, #4]
 8000834:	b003      	add	sp, #12
 8000836:	f85d fb04 	ldr.w	pc, [sp], #4
 800083a:	bf00      	nop
 800083c:	20000ad4 	.word	0x20000ad4

08000840 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8000840:	2802      	cmp	r0, #2
 8000842:	d101      	bne.n	8000848 <HAL_GPIO_EXTI_Callback+0x8>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8000844:	f000 be1c 	b.w	8001480 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 8000848:	4770      	bx	lr
	...

0800084c <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 800084c:	4801      	ldr	r0, [pc, #4]	; (8000854 <SPI3_IRQHandler+0x8>)
 800084e:	f003 ba91 	b.w	8003d74 <HAL_SPI_IRQHandler>
 8000852:	bf00      	nop
 8000854:	20000114 	.word	0x20000114

08000858 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000858:	4770      	bx	lr

0800085a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler>

0800085c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler>

0800085e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler>

08000860 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler>

08000862 <SVC_Handler>:
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000868:	f001 b950 	b.w	8001b0c <HAL_IncTick>

0800086c <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800086c:	2002      	movs	r0, #2
 800086e:	f001 bae9 	b.w	8001e44 <HAL_GPIO_EXTI_IRQHandler>

08000872 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8000872:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0;
    uint8_t done_count = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                      /* Check for minus character */
 8000874:	7803      	ldrb	r3, [r0, #0]
 8000876:	2b2d      	cmp	r3, #45	; 0x2d
 8000878:	d115      	bne.n	80008a6 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 800087a:	3001      	adds	r0, #1
        minus = 1;
 800087c:	2501      	movs	r5, #1
 800087e:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0;
 8000880:	462a      	mov	r2, r5
 8000882:	2000      	movs	r0, #0
        done_count++;
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000884:	270a      	movs	r7, #10
 8000886:	e003      	b.n	8000890 <ParseNumber+0x1e>
        ptr++;
        done_count++;
 8000888:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 800088a:	fb07 4000 	mla	r0, r7, r0, r4
        done_count++;
 800088e:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000890:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8000894:	3c30      	subs	r4, #48	; 0x30
 8000896:	b2e6      	uxtb	r6, r4
 8000898:	2e09      	cmp	r6, #9
 800089a:	d9f5      	bls.n	8000888 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 800089c:	b101      	cbz	r1, 80008a0 <ParseNumber+0x2e>
        *cnt = done_count;
 800089e:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                            /* Minus detected */
 80008a0:	b105      	cbz	r5, 80008a4 <ParseNumber+0x32>
        return 0 - sum;
 80008a2:	4240      	negs	r0, r0
    }
    return sum;                                             /* Return number */
}
 80008a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0;
 80008a6:	2500      	movs	r5, #0
 80008a8:	e7e9      	b.n	800087e <ParseNumber+0xc>
	...

080008ac <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	4605      	mov	r5, r0
  uint16_t cmd_len = 0;
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80008b2:	4608      	mov	r0, r1
{
 80008b4:	4689      	mov	r9, r1
 80008b6:	4692      	mov	sl, r2
 80008b8:	4698      	mov	r8, r3
  cmd_len = strlen((char*)cmd);
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80008be:	f010 0401 	ands.w	r4, r0, #1
{
 80008c2:	9f08      	ldr	r7, [sp, #32]
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80008c4:	d12f      	bne.n	8000926 <AT_RequestSendData+0x7a>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80008c6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80008ca:	b913      	cbnz	r3, 80008d2 <AT_RequestSendData+0x26>
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 80008cc:	2004      	movs	r0, #4
}
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80008d2:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d0f8      	beq.n	80008cc <AT_RequestSendData+0x20>
  cmd_len = strlen((char*)cmd);
 80008da:	b286      	uxth	r6, r0
  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80008dc:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 80008e0:	4631      	mov	r1, r6
 80008e2:	4648      	mov	r0, r9
 80008e4:	4798      	blx	r3
  if (n == cmd_len)
 80008e6:	b280      	uxth	r0, r0
 80008e8:	4286      	cmp	r6, r0
 80008ea:	d1ef      	bne.n	80008cc <AT_RequestSendData+0x20>
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80008ec:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80008f0:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 80008f4:	4641      	mov	r1, r8
 80008f6:	4650      	mov	r0, sl
 80008f8:	4798      	blx	r3
    if (send_len == len)
 80008fa:	4540      	cmp	r0, r8
 80008fc:	d113      	bne.n	8000926 <AT_RequestSendData+0x7a>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80008fe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8000902:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000906:	4621      	mov	r1, r4
 8000908:	4638      	mov	r0, r7
 800090a:	4798      	blx	r3
      if (recv_len > 0)
 800090c:	2800      	cmp	r0, #0
 800090e:	dd0c      	ble.n	800092a <AT_RequestSendData+0x7e>
        *(pdata + recv_len) = 0;
 8000910:	543c      	strb	r4, [r7, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000912:	490a      	ldr	r1, [pc, #40]	; (800093c <AT_RequestSendData+0x90>)
 8000914:	4638      	mov	r0, r7
 8000916:	f003 fffc 	bl	8004912 <strstr>
 800091a:	b950      	cbnz	r0, 8000932 <AT_RequestSendData+0x86>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800091c:	4908      	ldr	r1, [pc, #32]	; (8000940 <AT_RequestSendData+0x94>)
 800091e:	4638      	mov	r0, r7
 8000920:	f003 fff7 	bl	8004912 <strstr>
 8000924:	b938      	cbnz	r0, 8000936 <AT_RequestSendData+0x8a>
          return ES_WIFI_STATUS_ERROR;
 8000926:	2002      	movs	r0, #2
 8000928:	e7d1      	b.n	80008ce <AT_RequestSendData+0x22>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800092a:	3004      	adds	r0, #4
 800092c:	d1fb      	bne.n	8000926 <AT_RequestSendData+0x7a>
        return ES_WIFI_STATUS_MODULE_CRASH;
 800092e:	2006      	movs	r0, #6
 8000930:	e7cd      	b.n	80008ce <AT_RequestSendData+0x22>
          return ES_WIFI_STATUS_OK;
 8000932:	4620      	mov	r0, r4
 8000934:	e7cb      	b.n	80008ce <AT_RequestSendData+0x22>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000936:	2005      	movs	r0, #5
 8000938:	e7c9      	b.n	80008ce <AT_RequestSendData+0x22>
 800093a:	bf00      	nop
 800093c:	0800607e 	.word	0x0800607e
 8000940:	08006087 	.word	0x08006087

08000944 <ParseIP>:
{
 8000944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000946:	460e      	mov	r6, r1
  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8000948:	4604      	mov	r4, r0
 800094a:	b110      	cbz	r0, 8000952 <ParseIP+0xe>
 800094c:	b109      	cbz	r1, 8000952 <ParseIP+0xe>
 800094e:	2a03      	cmp	r2, #3
 8000950:	d816      	bhi.n	8000980 <ParseIP+0x3c>
}
 8000952:	b003      	add	sp, #12
 8000954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (*ptr != '.')
 8000956:	2b2e      	cmp	r3, #46	; 0x2e
    uint8_t done_count = 1;
 8000958:	f88d 7007 	strb.w	r7, [sp, #7]
    if (*ptr != '.')
 800095c:	d007      	beq.n	800096e <ParseIP+0x2a>
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 800095e:	f10d 0107 	add.w	r1, sp, #7
 8000962:	4620      	mov	r0, r4
 8000964:	f7ff ff85 	bl	8000872 <ParseNumber>
 8000968:	1c6b      	adds	r3, r5, #1
 800096a:	5570      	strb	r0, [r6, r5]
 800096c:	b2dd      	uxtb	r5, r3
    ptr = ptr + done_count;
 800096e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000972:	2d04      	cmp	r5, #4
    ptr = ptr + done_count;
 8000974:	441c      	add	r4, r3
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000976:	d0ec      	beq.n	8000952 <ParseIP+0xe>
 8000978:	7823      	ldrb	r3, [r4, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1eb      	bne.n	8000956 <ParseIP+0x12>
 800097e:	e7e8      	b.n	8000952 <ParseIP+0xe>
  uint8_t hex_8bits_count = 0;
 8000980:	2500      	movs	r5, #0
    uint8_t done_count = 1;
 8000982:	2701      	movs	r7, #1
 8000984:	e7f8      	b.n	8000978 <ParseIP+0x34>
	...

08000988 <AT_ExecuteCommand>:
{
 8000988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 800098a:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
{
 800098e:	4604      	mov	r4, r0
 8000990:	460e      	mov	r6, r1
 8000992:	4615      	mov	r5, r2
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000994:	b38f      	cbz	r7, 80009fa <AT_ExecuteCommand+0x72>
 8000996:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 800099a:	b373      	cbz	r3, 80009fa <AT_ExecuteCommand+0x72>
  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 800099c:	4608      	mov	r0, r1
 800099e:	f7ff fc17 	bl	80001d0 <strlen>
 80009a2:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 80009a6:	b281      	uxth	r1, r0
 80009a8:	4630      	mov	r0, r6
 80009aa:	47b8      	blx	r7
  if( ret > 0)
 80009ac:	2800      	cmp	r0, #0
 80009ae:	dd24      	ble.n	80009fa <AT_ExecuteCommand+0x72>
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80009b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80009b4:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 80009b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80009bc:	4628      	mov	r0, r5
 80009be:	4798      	blx	r3
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 80009c0:	1e43      	subs	r3, r0, #1
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80009c8:	d211      	bcs.n	80009ee <AT_ExecuteCommand+0x66>
      if (recv_len == ES_WIFI_DATA_SIZE)
 80009ca:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
        recv_len--;
 80009ce:	bf08      	it	eq
 80009d0:	b218      	sxtheq	r0, r3
      *(pdata + recv_len) = 0;
 80009d2:	2400      	movs	r4, #0
 80009d4:	542c      	strb	r4, [r5, r0]
      if (strstr((char *)pdata, AT_OK_STRING))
 80009d6:	490a      	ldr	r1, [pc, #40]	; (8000a00 <AT_ExecuteCommand+0x78>)
 80009d8:	4628      	mov	r0, r5
 80009da:	f003 ff9a 	bl	8004912 <strstr>
 80009de:	b950      	cbnz	r0, 80009f6 <AT_ExecuteCommand+0x6e>
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 80009e0:	4908      	ldr	r1, [pc, #32]	; (8000a04 <AT_ExecuteCommand+0x7c>)
 80009e2:	4628      	mov	r0, r5
 80009e4:	f003 ff95 	bl	8004912 <strstr>
 80009e8:	b138      	cbz	r0, 80009fa <AT_ExecuteCommand+0x72>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80009ea:	2005      	movs	r0, #5
 80009ec:	e002      	b.n	80009f4 <AT_ExecuteCommand+0x6c>
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80009ee:	3004      	adds	r0, #4
 80009f0:	d103      	bne.n	80009fa <AT_ExecuteCommand+0x72>
      return ES_WIFI_STATUS_MODULE_CRASH;
 80009f2:	2006      	movs	r0, #6
}
 80009f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ES_WIFI_STATUS_OK;
 80009f6:	4620      	mov	r0, r4
 80009f8:	e7fc      	b.n	80009f4 <AT_ExecuteCommand+0x6c>
  return ES_WIFI_STATUS_IO_ERROR;
 80009fa:	2004      	movs	r0, #4
 80009fc:	e7fa      	b.n	80009f4 <AT_ExecuteCommand+0x6c>
 80009fe:	bf00      	nop
 8000a00:	0800607e 	.word	0x0800607e
 8000a04:	08006087 	.word	0x08006087

08000a08 <ParseMAC>:
{
 8000a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((ptr != NULL) && (Mac != NULL))
 8000a0c:	b108      	cbz	r0, 8000a12 <ParseMAC+0xa>
 8000a0e:	2900      	cmp	r1, #0
 8000a10:	d140      	bne.n	8000a94 <ParseMAC+0x8c>
}
 8000a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*ptr != ':')
 8000a16:	2b3a      	cmp	r3, #58	; 0x3a
 8000a18:	d039      	beq.n	8000a8e <ParseMAC+0x86>
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8000a1a:	3501      	adds	r5, #1
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	b2ed      	uxtb	r5, r5
    uint8_t sum = 0;
 8000a20:	4634      	mov	r4, r6
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8000a22:	f810 c006 	ldrb.w	ip, [r0, r6]
 8000a26:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b09      	cmp	r3, #9
 8000a2e:	fa5f fe86 	uxtb.w	lr, r6
 8000a32:	d906      	bls.n	8000a42 <ParseMAC+0x3a>
 8000a34:	f02c 0820 	bic.w	r8, ip, #32
 8000a38:	f1a8 0841 	sub.w	r8, r8, #65	; 0x41
 8000a3c:	f1b8 0f05 	cmp.w	r8, #5
 8000a40:	d802      	bhi.n	8000a48 <ParseMAC+0x40>
 8000a42:	2e02      	cmp	r6, #2
 8000a44:	d10b      	bne.n	8000a5e <ParseMAC+0x56>
 8000a46:	46b6      	mov	lr, r6
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8000a48:	55cc      	strb	r4, [r1, r7]
    ptr = ptr + done_count;
 8000a4a:	4470      	add	r0, lr
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8000a4c:	42aa      	cmp	r2, r5
 8000a4e:	462f      	mov	r7, r5
 8000a50:	d9df      	bls.n	8000a12 <ParseMAC+0xa>
 8000a52:	2d05      	cmp	r5, #5
 8000a54:	d8dd      	bhi.n	8000a12 <ParseMAC+0xa>
 8000a56:	7803      	ldrb	r3, [r0, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1dc      	bne.n	8000a16 <ParseMAC+0xe>
 8000a5c:	e7d9      	b.n	8000a12 <ParseMAC+0xa>
        sum <<= 4;
 8000a5e:	0124      	lsls	r4, r4, #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000a60:	2b09      	cmp	r3, #9
        sum <<= 4;
 8000a62:	b2e4      	uxtb	r4, r4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000a64:	d906      	bls.n	8000a74 <ParseMAC+0x6c>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000a66:	f1ac 0361 	sub.w	r3, ip, #97	; 0x61
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	d806      	bhi.n	8000a7c <ParseMAC+0x74>
        return (a - 'a') + 10;
 8000a6e:	f1ac 0357 	sub.w	r3, ip, #87	; 0x57
        return (a - 'A') + 10;
 8000a72:	b2db      	uxtb	r3, r3
        sum += Hex2Num(*ptr);
 8000a74:	441c      	add	r4, r3
 8000a76:	b2e4      	uxtb	r4, r4
        done_count++;
 8000a78:	3601      	adds	r6, #1
 8000a7a:	e7d2      	b.n	8000a22 <ParseMAC+0x1a>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000a7c:	f1ac 0341 	sub.w	r3, ip, #65	; 0x41
 8000a80:	2b05      	cmp	r3, #5
 8000a82:	d802      	bhi.n	8000a8a <ParseMAC+0x82>
        return (a - 'A') + 10;
 8000a84:	f1ac 0337 	sub.w	r3, ip, #55	; 0x37
 8000a88:	e7f3      	b.n	8000a72 <ParseMAC+0x6a>
    return 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e7f2      	b.n	8000a74 <ParseMAC+0x6c>
    uint8_t done_count = 1;
 8000a8e:	f04f 0e01 	mov.w	lr, #1
 8000a92:	e7da      	b.n	8000a4a <ParseMAC+0x42>
  uint8_t hex_8bits_count = 0;
 8000a94:	2500      	movs	r5, #0
 8000a96:	e7d9      	b.n	8000a4c <ParseMAC+0x44>

08000a98 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000a9c:	f247 5330 	movw	r3, #30000	; 0x7530
 8000aa0:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8000aa4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
{
 8000aa8:	4604      	mov	r4, r0
  if (Obj->fops.IO_Init != NULL) {
 8000aaa:	b91b      	cbnz	r3, 8000ab4 <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000aac:	2502      	movs	r5, #2
   }
  }

  UNLOCK_WIFI();
  return ret;
}
 8000aae:	4628      	mov	r0, r5
 8000ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	4798      	blx	r3
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d1f7      	bne.n	8000aac <ES_WIFI_Init+0x14>
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8000abc:	4932      	ldr	r1, [pc, #200]	; (8000b88 <ES_WIFI_Init+0xf0>)
 8000abe:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f7ff ff60 	bl	8000988 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8000ac8:	4605      	mov	r5, r0
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d1ef      	bne.n	8000aae <ES_WIFI_Init+0x16>
  ptr = strtok((char *)pdata + 2, ",");
 8000ace:	492f      	ldr	r1, [pc, #188]	; (8000b8c <ES_WIFI_Init+0xf4>)
      ptr = strtok(ptr, "\r");
 8000ad0:	4f2f      	ldr	r7, [pc, #188]	; (8000b90 <ES_WIFI_Init+0xf8>)
    ptr = strtok(NULL, ",");
 8000ad2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8000b8c <ES_WIFI_Init+0xf4>
  ptr = strtok((char *)pdata + 2, ",");
 8000ad6:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000ada:	f003 ff31 	bl	8004940 <strtok>
  while (ptr != NULL){
 8000ade:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000ae0:	f104 0868 	add.w	r8, r4, #104	; 0x68
 8000ae4:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d0e1      	beq.n	8000aae <ES_WIFI_Init+0x16>
    switch (num++) {
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d80c      	bhi.n	8000b08 <ES_WIFI_Init+0x70>
 8000aee:	e8df f003 	tbb	[pc, r3]
 8000af2:	1104      	.short	0x1104
 8000af4:	392f251b 	.word	0x392f251b
 8000af8:	3f          	.byte	0x3f
 8000af9:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8000afa:	4601      	mov	r1, r0
 8000afc:	221f      	movs	r2, #31
 8000afe:	4620      	mov	r0, r4
 8000b00:	f003 fef4 	bl	80048ec <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8000b04:	2300      	movs	r3, #0
 8000b06:	77e3      	strb	r3, [r4, #31]
    ptr = strtok(NULL, ",");
 8000b08:	4649      	mov	r1, r9
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f003 ff18 	bl	8004940 <strtok>
 8000b10:	3601      	adds	r6, #1
 8000b12:	e7e7      	b.n	8000ae4 <ES_WIFI_Init+0x4c>
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8000b14:	4601      	mov	r1, r0
 8000b16:	2217      	movs	r2, #23
 8000b18:	f104 0020 	add.w	r0, r4, #32
 8000b1c:	f003 fee6 	bl	80048ec <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8000b20:	2300      	movs	r3, #0
 8000b22:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
      break;
 8000b26:	e7ef      	b.n	8000b08 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8000b28:	4601      	mov	r1, r0
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8000b30:	f003 fedc 	bl	80048ec <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8000b34:	2300      	movs	r3, #0
 8000b36:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
      break;
 8000b3a:	e7e5      	b.n	8000b08 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	220f      	movs	r2, #15
 8000b40:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8000b44:	f003 fed2 	bl	80048ec <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
      break;
 8000b4e:	e7db      	b.n	8000b08 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8000b50:	4601      	mov	r1, r0
 8000b52:	220f      	movs	r2, #15
 8000b54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b58:	f003 fec8 	bl	80048ec <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      break;
 8000b62:	e7d1      	b.n	8000b08 <ES_WIFI_Init+0x70>
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8000b64:	2100      	movs	r1, #0
 8000b66:	f7ff fe84 	bl	8000872 <ParseNumber>
 8000b6a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
      break;
 8000b6e:	e7cb      	b.n	8000b08 <ES_WIFI_Init+0x70>
      ptr = strtok(ptr, "\r");
 8000b70:	4639      	mov	r1, r7
 8000b72:	f003 fee5 	bl	8004940 <strtok>
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000b76:	221f      	movs	r2, #31
      ptr = strtok(ptr, "\r");
 8000b78:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000b7a:	4640      	mov	r0, r8
 8000b7c:	f003 feb6 	bl	80048ec <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8000b80:	2300      	movs	r3, #0
 8000b82:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
      break;
 8000b86:	e7bf      	b.n	8000b08 <ES_WIFI_Init+0x70>
 8000b88:	080060af 	.word	0x080060af
 8000b8c:	0800627b 	.word	0x0800627b
 8000b90:	0800617e 	.word	0x0800617e

08000b94 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8000b94:	b530      	push	{r4, r5, lr}
 8000b96:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000b9a:	b158      	cbz	r0, 8000bb4 <ES_WIFI_RegisterBusIO+0x20>
 8000b9c:	b151      	cbz	r1, 8000bb4 <ES_WIFI_RegisterBusIO+0x20>
 8000b9e:	b14a      	cbz	r2, 8000bb4 <ES_WIFI_RegisterBusIO+0x20>
 8000ba0:	b145      	cbz	r5, 8000bb4 <ES_WIFI_RegisterBusIO+0x20>
 8000ba2:	b13c      	cbz	r4, 8000bb4 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 8000ba4:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 8000ba8:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8000bac:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8000bb0:	2000      	movs	r0, #0
}
 8000bb2:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	e7fc      	b.n	8000bb2 <ES_WIFI_RegisterBusIO+0x1e>

08000bb8 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8000bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8000bba:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 8000bbe:	4605      	mov	r5, r0
 8000bc0:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	4918      	ldr	r1, [pc, #96]	; (8000c28 <ES_WIFI_Connect+0x70>)
{
 8000bc8:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8000bca:	f003 fe67 	bl	800489c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000bce:	4622      	mov	r2, r4
 8000bd0:	4621      	mov	r1, r4
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	f7ff fed8 	bl	8000988 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000bd8:	bb20      	cbnz	r0, 8000c24 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8000bda:	4914      	ldr	r1, [pc, #80]	; (8000c2c <ES_WIFI_Connect+0x74>)
 8000bdc:	463a      	mov	r2, r7
 8000bde:	4620      	mov	r0, r4
 8000be0:	f003 fe5c 	bl	800489c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000be4:	4622      	mov	r2, r4
 8000be6:	4621      	mov	r1, r4
 8000be8:	4628      	mov	r0, r5
 8000bea:	f7ff fecd 	bl	8000988 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8000bee:	b9c8      	cbnz	r0, 8000c24 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8000bf0:	490f      	ldr	r1, [pc, #60]	; (8000c30 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8000bf2:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8000bf6:	4632      	mov	r2, r6
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f003 fe4f 	bl	800489c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000bfe:	4622      	mov	r2, r4
 8000c00:	4621      	mov	r1, r4
 8000c02:	4628      	mov	r0, r5
 8000c04:	f7ff fec0 	bl	8000988 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 8000c08:	b960      	cbnz	r0, 8000c24 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8000c0a:	490a      	ldr	r1, [pc, #40]	; (8000c34 <ES_WIFI_Connect+0x7c>)
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f003 fe65 	bl	80048dc <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c12:	4622      	mov	r2, r4
 8000c14:	4621      	mov	r1, r4
 8000c16:	4628      	mov	r0, r5
 8000c18:	f7ff feb6 	bl	8000988 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8000c1c:	b910      	cbnz	r0, 8000c24 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8000c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c26:	bf00      	nop
 8000c28:	080060c5 	.word	0x080060c5
 8000c2c:	080060cc 	.word	0x080060cc
 8000c30:	080060d3 	.word	0x080060d3
 8000c34:	080060da 	.word	0x080060da

08000c38 <ES_WIFI_IsConnected>:
{
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8000c38:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000c3c:	b510      	push	{r4, lr}
  sprintf((char *)Obj->CmdData, "CS\r");
 8000c3e:	490b      	ldr	r1, [pc, #44]	; (8000c6c <ES_WIFI_IsConnected+0x34>)
{
 8000c40:	4604      	mov	r4, r0
  sprintf((char *)Obj->CmdData, "CS\r");
 8000c42:	4610      	mov	r0, r2
 8000c44:	f003 fe4a 	bl	80048dc <strcpy>
 8000c48:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f7ff fe9b 	bl	8000988 <AT_ExecuteCommand>
  if (ret == ES_WIFI_STATUS_OK)
 8000c52:	b938      	cbnz	r0, 8000c64 <ES_WIFI_IsConnected+0x2c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8000c54:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8000c58:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000c5c:	4253      	negs	r3, r2
 8000c5e:	4153      	adcs	r3, r2
 8000c60:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
}
 8000c64:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8000c68:	bd10      	pop	{r4, pc}
 8000c6a:	bf00      	nop
 8000c6c:	080060de 	.word	0x080060de

08000c70 <ES_WIFI_GetNetworkSettings>:
{
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8000c70:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char *)Obj->CmdData, "C?\r");
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <ES_WIFI_GetNetworkSettings+0xf8>)
{
 8000c7a:	4604      	mov	r4, r0
  sprintf((char *)Obj->CmdData, "C?\r");
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	f003 fe2d 	bl	80048dc <strcpy>
 8000c82:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c84:	4601      	mov	r1, r0
 8000c86:	4620      	mov	r0, r4
 8000c88:	f7ff fe7e 	bl	8000988 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	b960      	cbnz	r0, 8000caa <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8000c90:	4936      	ldr	r1, [pc, #216]	; (8000d6c <ES_WIFI_GetNetworkSettings+0xfc>)
    ptr = strtok(NULL, ",");
 8000c92:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8000d6c <ES_WIFI_GetNetworkSettings+0xfc>
  ptr = strtok(pdata + 2, ",");
 8000c96:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000c9a:	f003 fe51 	bl	8004940 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8000c9e:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 8000ca2:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8000ca4:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 8000ca8:	b910      	cbnz	r0, 8000cb0 <ES_WIFI_GetNetworkSettings+0x40>
  }

  UNLOCK_WIFI();

  return ret;
}
 8000caa:	4630      	mov	r0, r6
 8000cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8000cb0:	2d0b      	cmp	r5, #11
 8000cb2:	d80e      	bhi.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x62>
 8000cb4:	e8df f005 	tbb	[pc, r5]
 8000cb8:	2a241b06 	.word	0x2a241b06
 8000cbc:	403c3630 	.word	0x403c3630
 8000cc0:	514b4844 	.word	0x514b4844
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	4638      	mov	r0, r7
 8000cca:	f003 fe0f 	bl	80048ec <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8000cce:	f884 60ad 	strb.w	r6, [r4, #173]	; 0xad
    ptr = strtok(NULL, ",");
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f003 fe33 	bl	8004940 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d0e5      	beq.n	8000caa <ES_WIFI_GetNetworkSettings+0x3a>
 8000cde:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8000ce2:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8000ce4:	bf14      	ite	ne
 8000ce6:	3501      	addne	r5, #1
      num++;
 8000ce8:	3502      	addeq	r5, #2
 8000cea:	b2ed      	uxtb	r5, r5
 8000cec:	e7dc      	b.n	8000ca8 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8000cee:	4601      	mov	r1, r0
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 8000cf6:	f003 fdf9 	bl	80048ec <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8000cfa:	f884 60ce 	strb.w	r6, [r4, #206]	; 0xce
      break;
 8000cfe:	e7e8      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000d00:	2100      	movs	r1, #0
 8000d02:	f7ff fdb6 	bl	8000872 <ParseNumber>
 8000d06:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 8000d0a:	e7e2      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f7ff fdb0 	bl	8000872 <ParseNumber>
 8000d12:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 8000d16:	e7dc      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f7ff fdaa 	bl	8000872 <ParseNumber>
 8000d1e:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 8000d22:	e7d6      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x62>
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8000d24:	2204      	movs	r2, #4
 8000d26:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8000d2a:	f7ff fe0b 	bl	8000944 <ParseIP>
      break;
 8000d2e:	e7d0      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x62>
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8000d30:	2204      	movs	r2, #4
 8000d32:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8000d36:	e7f8      	b.n	8000d2a <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8000d38:	2204      	movs	r2, #4
 8000d3a:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 8000d3e:	e7f4      	b.n	8000d2a <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8000d40:	2204      	movs	r2, #4
 8000d42:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 8000d46:	e7f0      	b.n	8000d2a <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8000d48:	2204      	movs	r2, #4
 8000d4a:	4641      	mov	r1, r8
 8000d4c:	e7ed      	b.n	8000d2a <ES_WIFI_GetNetworkSettings+0xba>
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f7ff fd8f 	bl	8000872 <ParseNumber>
 8000d54:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 8000d58:	e7bb      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f7ff fd89 	bl	8000872 <ParseNumber>
 8000d60:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 8000d64:	e7b5      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x62>
 8000d66:	bf00      	nop
 8000d68:	080060e6 	.word	0x080060e6
 8000d6c:	0800627b 	.word	0x0800627b

08000d70 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8000d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d72:	4617      	mov	r7, r2
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8000d74:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000d78:	4604      	mov	r4, r0
 8000d7a:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData, "Z5\r");
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	490a      	ldr	r1, [pc, #40]	; (8000da8 <ES_WIFI_GetMACAddress+0x38>)
 8000d80:	f003 fdac 	bl	80048dc <strcpy>
 8000d84:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000d86:	4601      	mov	r1, r0
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f7ff fdfd 	bl	8000988 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000d8e:	4605      	mov	r5, r0
 8000d90:	b940      	cbnz	r0, 8000da4 <ES_WIFI_GetMACAddress+0x34>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8000d92:	4906      	ldr	r1, [pc, #24]	; (8000dac <ES_WIFI_GetMACAddress+0x3c>)
 8000d94:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000d98:	f003 fdd2 	bl	8004940 <strtok>
    ParseMAC(ptr, mac, MacLength);
 8000d9c:	463a      	mov	r2, r7
 8000d9e:	4631      	mov	r1, r6
 8000da0:	f7ff fe32 	bl	8000a08 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
}
 8000da4:	4628      	mov	r0, r5
 8000da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da8:	08006128 	.word	0x08006128
 8000dac:	0800633a 	.word	0x0800633a

08000db0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8000db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8000db2:	780b      	ldrb	r3, [r1, #0]
{
 8000db4:	4605      	mov	r5, r0
 8000db6:	460e      	mov	r6, r1
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8000db8:	b10b      	cbz	r3, 8000dbe <ES_WIFI_StartClientConnection+0xe>
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d102      	bne.n	8000dc4 <ES_WIFI_StartClientConnection+0x14>
 8000dbe:	8873      	ldrh	r3, [r6, #2]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d064      	beq.n	8000e8e <ES_WIFI_StartClientConnection+0xde>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000dc4:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8000dc8:	7872      	ldrb	r2, [r6, #1]
 8000dca:	4932      	ldr	r1, [pc, #200]	; (8000e94 <ES_WIFI_StartClientConnection+0xe4>)
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f003 fd65 	bl	800489c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000dd2:	4622      	mov	r2, r4
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f7ff fdd6 	bl	8000988 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d146      	bne.n	8000e6e <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8000de0:	7832      	ldrb	r2, [r6, #0]
 8000de2:	492d      	ldr	r1, [pc, #180]	; (8000e98 <ES_WIFI_StartClientConnection+0xe8>)
 8000de4:	4620      	mov	r0, r4
 8000de6:	f003 fd59 	bl	800489c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000dea:	4622      	mov	r2, r4
 8000dec:	4621      	mov	r1, r4
 8000dee:	4628      	mov	r0, r5
 8000df0:	f7ff fdca 	bl	8000988 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d13a      	bne.n	8000e6e <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8000df8:	88b2      	ldrh	r2, [r6, #4]
 8000dfa:	4928      	ldr	r1, [pc, #160]	; (8000e9c <ES_WIFI_StartClientConnection+0xec>)
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f003 fd4d 	bl	800489c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e02:	4622      	mov	r2, r4
 8000e04:	4621      	mov	r1, r4
 8000e06:	4628      	mov	r0, r5
 8000e08:	f7ff fdbe 	bl	8000988 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000e0c:	bb78      	cbnz	r0, 8000e6e <ES_WIFI_StartClientConnection+0xbe>
 8000e0e:	7833      	ldrb	r3, [r6, #0]
 8000e10:	b30b      	cbz	r3, 8000e56 <ES_WIFI_StartClientConnection+0xa6>
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d01f      	beq.n	8000e56 <ES_WIFI_StartClientConnection+0xa6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000e16:	7833      	ldrb	r3, [r6, #0]
 8000e18:	bb5b      	cbnz	r3, 8000e72 <ES_WIFI_StartClientConnection+0xc2>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8000e1a:	7a73      	ldrb	r3, [r6, #9]
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	7a33      	ldrb	r3, [r6, #8]
 8000e20:	79b2      	ldrb	r2, [r6, #6]
 8000e22:	491f      	ldr	r1, [pc, #124]	; (8000ea0 <ES_WIFI_StartClientConnection+0xf0>)
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	4620      	mov	r0, r4
 8000e28:	79f3      	ldrb	r3, [r6, #7]
 8000e2a:	f003 fd37 	bl	800489c <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e2e:	4622      	mov	r2, r4
 8000e30:	4621      	mov	r1, r4
 8000e32:	4628      	mov	r0, r5
 8000e34:	f7ff fda8 	bl	8000988 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8000e38:	b9c8      	cbnz	r0, 8000e6e <ES_WIFI_StartClientConnection+0xbe>
 8000e3a:	7833      	ldrb	r3, [r6, #0]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d11a      	bne.n	8000e76 <ES_WIFI_StartClientConnection+0xc6>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8000e40:	4918      	ldr	r1, [pc, #96]	; (8000ea4 <ES_WIFI_StartClientConnection+0xf4>)
 8000e42:	4620      	mov	r0, r4
 8000e44:	f003 fd4a 	bl	80048dc <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e48:	4622      	mov	r2, r4
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	f7ff fd9b 	bl	8000988 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8000e52:	b180      	cbz	r0, 8000e76 <ES_WIFI_StartClientConnection+0xc6>
 8000e54:	e00b      	b.n	8000e6e <ES_WIFI_StartClientConnection+0xbe>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8000e56:	8872      	ldrh	r2, [r6, #2]
 8000e58:	4913      	ldr	r1, [pc, #76]	; (8000ea8 <ES_WIFI_StartClientConnection+0xf8>)
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f003 fd1e 	bl	800489c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e60:	4622      	mov	r2, r4
 8000e62:	4621      	mov	r1, r4
 8000e64:	4628      	mov	r0, r5
 8000e66:	f7ff fd8f 	bl	8000988 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d0d3      	beq.n	8000e16 <ES_WIFI_StartClientConnection+0x66>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd70      	pop	{r4, r5, r6, pc}
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d0d1      	beq.n	8000e1a <ES_WIFI_StartClientConnection+0x6a>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8000e76:	490d      	ldr	r1, [pc, #52]	; (8000eac <ES_WIFI_StartClientConnection+0xfc>)
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f003 fd2f 	bl	80048dc <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e7e:	4622      	mov	r2, r4
 8000e80:	4621      	mov	r1, r4
 8000e82:	4628      	mov	r0, r5
}
 8000e84:	b002      	add	sp, #8
 8000e86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e8a:	f7ff bd7d 	b.w	8000988 <AT_ExecuteCommand>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8000e8e:	2002      	movs	r0, #2
 8000e90:	e7ed      	b.n	8000e6e <ES_WIFI_StartClientConnection+0xbe>
 8000e92:	bf00      	nop
 8000e94:	08006187 	.word	0x08006187
 8000e98:	0800618e 	.word	0x0800618e
 8000e9c:	08006195 	.word	0x08006195
 8000ea0:	080061a9 	.word	0x080061a9
 8000ea4:	080061b9 	.word	0x080061b9
 8000ea8:	0800619c 	.word	0x0800619c
 8000eac:	080061a3 	.word	0x080061a3

08000eb0 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8000eb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8000eb4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8000eb8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8000ebc:	bf28      	it	cs
 8000ebe:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
  }

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8000ec2:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8000ec6:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 8000ec8:	f8a8 3000 	strh.w	r3, [r8]
{
 8000ecc:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8000ece:	4628      	mov	r0, r5
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	492e      	ldr	r1, [pc, #184]	; (8000f8c <ES_WIFI_SendData+0xdc>)
 8000ed4:	461f      	mov	r7, r3
 8000ed6:	f003 fce1 	bl	800489c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000eda:	462a      	mov	r2, r5
 8000edc:	4629      	mov	r1, r5
 8000ede:	4630      	mov	r0, r6
 8000ee0:	f7ff fd52 	bl	8000988 <AT_ExecuteCommand>
  if (ret == ES_WIFI_STATUS_OK)
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	d147      	bne.n	8000f7a <ES_WIFI_SendData+0xca>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8000eea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000eec:	4928      	ldr	r1, [pc, #160]	; (8000f90 <ES_WIFI_SendData+0xe0>)
 8000eee:	2a01      	cmp	r2, #1
 8000ef0:	bf38      	it	cc
 8000ef2:	2201      	movcc	r2, #1
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	f003 fcd1 	bl	800489c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000efa:	462a      	mov	r2, r5
 8000efc:	4629      	mov	r1, r5
 8000efe:	4630      	mov	r0, r6
 8000f00:	f7ff fd42 	bl	8000988 <AT_ExecuteCommand>

    if (ret == ES_WIFI_STATUS_OK)
 8000f04:	4604      	mov	r4, r0
 8000f06:	bb80      	cbnz	r0, 8000f6a <ES_WIFI_SendData+0xba>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8000f08:	4922      	ldr	r1, [pc, #136]	; (8000f94 <ES_WIFI_SendData+0xe4>)
 8000f0a:	463a      	mov	r2, r7
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	f003 fcc5 	bl	800489c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8000f12:	9500      	str	r5, [sp, #0]
 8000f14:	463b      	mov	r3, r7
 8000f16:	464a      	mov	r2, r9
 8000f18:	4629      	mov	r1, r5
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	f7ff fcc6 	bl	80008ac <AT_RequestSendData>

      if (ret == ES_WIFI_STATUS_OK)
 8000f20:	4604      	mov	r4, r0
 8000f22:	b998      	cbnz	r0, 8000f4c <ES_WIFI_SendData+0x9c>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8000f24:	491c      	ldr	r1, [pc, #112]	; (8000f98 <ES_WIFI_SendData+0xe8>)
 8000f26:	4628      	mov	r0, r5
 8000f28:	f003 fcf3 	bl	8004912 <strstr>
 8000f2c:	b1c8      	cbz	r0, 8000f62 <ES_WIFI_SendData+0xb2>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8000f2e:	491b      	ldr	r1, [pc, #108]	; (8000f9c <ES_WIFI_SendData+0xec>)
 8000f30:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <ES_WIFI_SendData+0xf0>)
 8000f32:	f640 1201 	movw	r2, #2305	; 0x901
 8000f36:	f003 fbfd 	bl	8004734 <iprintf>
 8000f3a:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <ES_WIFI_SendData+0xf4>)
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	f003 fbf9 	bl	8004734 <iprintf>
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8a8 3000 	strh.w	r3, [r8]
 8000f48:	2402      	movs	r4, #2
 8000f4a:	e00a      	b.n	8000f62 <ES_WIFI_SendData+0xb2>
        DEBUG("Send Data command failed\n");
 8000f4c:	4913      	ldr	r1, [pc, #76]	; (8000f9c <ES_WIFI_SendData+0xec>)
 8000f4e:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <ES_WIFI_SendData+0xf0>)
 8000f50:	f640 1207 	movw	r2, #2311	; 0x907
 8000f54:	f003 fbee 	bl	8004734 <iprintf>
 8000f58:	4813      	ldr	r0, [pc, #76]	; (8000fa8 <ES_WIFI_SendData+0xf8>)
   DEBUG("P0 command failed\n");
 8000f5a:	f003 fc87 	bl	800486c <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 8000f5e:	2c02      	cmp	r4, #2
 8000f60:	d0ef      	beq.n	8000f42 <ES_WIFI_SendData+0x92>
  }

  UNLOCK_WIFI();

  return ret;
}
 8000f62:	4620      	mov	r0, r4
 8000f64:	b003      	add	sp, #12
 8000f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n");
 8000f6a:	490c      	ldr	r1, [pc, #48]	; (8000f9c <ES_WIFI_SendData+0xec>)
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <ES_WIFI_SendData+0xf0>)
 8000f6e:	f640 120c 	movw	r2, #2316	; 0x90c
 8000f72:	f003 fbdf 	bl	8004734 <iprintf>
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <ES_WIFI_SendData+0xfc>)
 8000f78:	e7ef      	b.n	8000f5a <ES_WIFI_SendData+0xaa>
   DEBUG("P0 command failed\n");
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <ES_WIFI_SendData+0xec>)
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <ES_WIFI_SendData+0xf0>)
 8000f7e:	f640 1211 	movw	r2, #2321	; 0x911
 8000f82:	f003 fbd7 	bl	8004734 <iprintf>
 8000f86:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <ES_WIFI_SendData+0x100>)
 8000f88:	e7e7      	b.n	8000f5a <ES_WIFI_SendData+0xaa>
 8000f8a:	bf00      	nop
 8000f8c:	08006187 	.word	0x08006187
 8000f90:	08006327 	.word	0x08006327
 8000f94:	0800632f 	.word	0x0800632f
 8000f98:	08006338 	.word	0x08006338
 8000f9c:	080061fb 	.word	0x080061fb
 8000fa0:	08006238 	.word	0x08006238
 8000fa4:	0800633d 	.word	0x0800633d
 8000fa8:	08006358 	.word	0x08006358
 8000fac:	08006371 	.word	0x08006371
 8000fb0:	08006383 	.word	0x08006383

08000fb4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8000fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t        loop_per_us = 0;
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8000fb6:	4c16      	ldr	r4, [pc, #88]	; (8001010 <SPI_WIFI_DelayUs+0x5c>)
 8000fb8:	4f16      	ldr	r7, [pc, #88]	; (8001014 <SPI_WIFI_DelayUs+0x60>)
  volatile        uint32_t ct = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9301      	str	r3, [sp, #4]
  if (cycle_per_loop == 0)
 8000fbe:	6823      	ldr	r3, [r4, #0]
{
 8000fc0:	4606      	mov	r6, r0
  if (cycle_per_loop == 0)
 8000fc2:	b98b      	cbnz	r3, 8000fe8 <SPI_WIFI_DelayUs+0x34>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fca:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t t = 0;
     ct = cycle_per_ms;
 8000fce:	9301      	str	r3, [sp, #4]
     t = HAL_GetTick();
 8000fd0:	f000 fda8 	bl	8001b24 <HAL_GetTick>
 8000fd4:	4605      	mov	r5, r0
     while(ct) ct--;
 8000fd6:	9b01      	ldr	r3, [sp, #4]
 8000fd8:	b99b      	cbnz	r3, 8001002 <SPI_WIFI_DelayUs+0x4e>
     cycle_per_loop = HAL_GetTick() - t;
 8000fda:	f000 fda3 	bl	8001b24 <HAL_GetTick>
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8000fde:	1b40      	subs	r0, r0, r5
 8000fe0:	bf0a      	itet	eq
 8000fe2:	2301      	moveq	r3, #1
     cycle_per_loop = HAL_GetTick() - t;
 8000fe4:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8000fe6:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <SPI_WIFI_DelayUs+0x64>)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ff0:	6820      	ldr	r0, [r4, #0]
 8000ff2:	fbb3 f3f0 	udiv	r3, r3, r0
  ct = n * loop_per_us;
 8000ff6:	4373      	muls	r3, r6
  while(ct) ct--;
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	9b01      	ldr	r3, [sp, #4]
 8000ffc:	b92b      	cbnz	r3, 800100a <SPI_WIFI_DelayUs+0x56>
  return;
}
 8000ffe:	b003      	add	sp, #12
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 8001002:	9b01      	ldr	r3, [sp, #4]
 8001004:	3b01      	subs	r3, #1
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	e7e5      	b.n	8000fd6 <SPI_WIFI_DelayUs+0x22>
  while(ct) ct--;
 800100a:	9b01      	ldr	r3, [sp, #4]
 800100c:	3b01      	subs	r3, #1
 800100e:	e7f3      	b.n	8000ff8 <SPI_WIFI_DelayUs+0x44>
 8001010:	2000010c 	.word	0x2000010c
 8001014:	20000080 	.word	0x20000080
 8001018:	000f4240 	.word	0x000f4240

0800101c <wait_spi_tx_event.isra.0>:
static int wait_spi_tx_event(int timeout)
 800101c:	b570      	push	{r4, r5, r6, lr}
 800101e:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 8001020:	f000 fd80 	bl	8001b24 <HAL_GetTick>
  while (spi_tx_event == 1)
 8001024:	4e05      	ldr	r6, [pc, #20]	; (800103c <wait_spi_tx_event.isra.0+0x20>)
  int tickstart = HAL_GetTick();
 8001026:	4604      	mov	r4, r0
  while (spi_tx_event == 1)
 8001028:	6873      	ldr	r3, [r6, #4]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d104      	bne.n	8001038 <wait_spi_tx_event.isra.0+0x1c>
    if((HAL_GetTick() - tickstart ) > timeout)
 800102e:	f000 fd79 	bl	8001b24 <HAL_GetTick>
 8001032:	1b00      	subs	r0, r0, r4
 8001034:	42a8      	cmp	r0, r5
 8001036:	d9f7      	bls.n	8001028 <wait_spi_tx_event.isra.0+0xc>
}
 8001038:	bd70      	pop	{r4, r5, r6, pc}
 800103a:	bf00      	nop
 800103c:	2000010c 	.word	0x2000010c

08001040 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001040:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001042:	4840      	ldr	r0, [pc, #256]	; (8001144 <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001044:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001046:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800104c:	659a      	str	r2, [r3, #88]	; 0x58
 800104e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001050:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001052:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001056:	9201      	str	r2, [sp, #4]
 8001058:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800105c:	f042 0202 	orr.w	r2, r2, #2
 8001060:	64da      	str	r2, [r3, #76]	; 0x4c
 8001062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001064:	f002 0202 	and.w	r2, r2, #2
 8001068:	9202      	str	r2, [sp, #8]
 800106a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800106e:	f042 0204 	orr.w	r2, r2, #4
 8001072:	64da      	str	r2, [r3, #76]	; 0x4c
 8001074:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001076:	f002 0204 	and.w	r2, r2, #4
 800107a:	9203      	str	r2, [sp, #12]
 800107c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800107e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001080:	f042 0210 	orr.w	r2, r2, #16
 8001084:	64da      	str	r2, [r3, #76]	; 0x4c
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800108c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001094:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001096:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001098:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800109a:	f000 fecd 	bl	8001e38 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800109e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80010a2:	a905      	add	r1, sp, #20
 80010a4:	4827      	ldr	r0, [pc, #156]	; (8001144 <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80010a6:	2602      	movs	r6, #2
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010a8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80010ac:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80010b0:	f000 fdde 	bl	8001c70 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80010b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80010b8:	a905      	add	r1, sp, #20
 80010ba:	4823      	ldr	r0, [pc, #140]	; (8001148 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80010bc:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80010c0:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80010c4:	f000 fdd4 	bl	8001c70 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 80010c8:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80010cc:	a905      	add	r1, sp, #20
 80010ce:	481e      	ldr	r0, [pc, #120]	; (8001148 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Alternate = 0;
 80010d0:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010d2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80010d6:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80010da:	f000 fdc9 	bl	8001c70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80010de:	4622      	mov	r2, r4
 80010e0:	4621      	mov	r1, r4
 80010e2:	4819      	ldr	r0, [pc, #100]	; (8001148 <SPI_WIFI_MspInit+0x108>)
 80010e4:	f000 fea8 	bl	8001e38 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80010e8:	a905      	add	r1, sp, #20
 80010ea:	4817      	ldr	r0, [pc, #92]	; (8001148 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80010ec:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010ee:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80010f2:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80010f6:	f000 fdbb 	bl	8001c70 <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80010fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80010fe:	a905      	add	r1, sp, #20
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001102:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001104:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001108:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800110c:	f000 fdb0 	bl	8001c70 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001114:	a905      	add	r1, sp, #20
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001118:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800111a:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800111e:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001122:	f000 fda5 	bl	8001c70 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001126:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800112c:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800112e:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001130:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001134:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001138:	f000 fd9a 	bl	8001c70 <HAL_GPIO_Init>
}
 800113c:	b00b      	add	sp, #44	; 0x2c
 800113e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001140:	40021000 	.word	0x40021000
 8001144:	48000400 	.word	0x48000400
 8001148:	48001000 	.word	0x48001000
 800114c:	48000800 	.word	0x48000800

08001150 <SPI_WIFI_ResetModule>:
{
 8001150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8001152:	f000 fce7 	bl	8001b24 <HAL_GetTick>
  WIFI_RESET_MODULE();
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 800115c:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 800115e:	482e      	ldr	r0, [pc, #184]	; (8001218 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001160:	4f2e      	ldr	r7, [pc, #184]	; (800121c <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 8001162:	f000 fe69 	bl	8001e38 <HAL_GPIO_WritePin>
 8001166:	200a      	movs	r0, #10
 8001168:	f000 fce2 	bl	8001b30 <HAL_Delay>
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4829      	ldr	r0, [pc, #164]	; (8001218 <SPI_WIFI_ResetModule+0xc8>)
 8001174:	f000 fe60 	bl	8001e38 <HAL_GPIO_WritePin>
 8001178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800117c:	f000 fcd8 	bl	8001b30 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001180:	4825      	ldr	r0, [pc, #148]	; (8001218 <SPI_WIFI_ResetModule+0xc8>)
 8001182:	2200      	movs	r2, #0
 8001184:	2101      	movs	r1, #1
 8001186:	f000 fe57 	bl	8001e38 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800118a:	200f      	movs	r0, #15
 800118c:	f7ff ff12 	bl	8000fb4 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 8001190:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 8001192:	4821      	ldr	r0, [pc, #132]	; (8001218 <SPI_WIFI_ResetModule+0xc8>)
 8001194:	2102      	movs	r1, #2
 8001196:	f000 fe49 	bl	8001e2c <HAL_GPIO_ReadPin>
 800119a:	2801      	cmp	r0, #1
 800119c:	4602      	mov	r2, r0
 800119e:	d020      	beq.n	80011e2 <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS();
 80011a0:	2201      	movs	r2, #1
 80011a2:	481d      	ldr	r0, [pc, #116]	; (8001218 <SPI_WIFI_ResetModule+0xc8>)
 80011a4:	4611      	mov	r1, r2
 80011a6:	f000 fe47 	bl	8001e38 <HAL_GPIO_WritePin>
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80011aa:	f89d 3000 	ldrb.w	r3, [sp]
 80011ae:	2b15      	cmp	r3, #21
 80011b0:	d12e      	bne.n	8001210 <SPI_WIFI_ResetModule+0xc0>
 80011b2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80011b6:	2b15      	cmp	r3, #21
 80011b8:	d12a      	bne.n	8001210 <SPI_WIFI_ResetModule+0xc0>
 80011ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80011be:	2b0d      	cmp	r3, #13
 80011c0:	d126      	bne.n	8001210 <SPI_WIFI_ResetModule+0xc0>
 80011c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d122      	bne.n	8001210 <SPI_WIFI_ResetModule+0xc0>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80011ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011ce:	2b3e      	cmp	r3, #62	; 0x3e
 80011d0:	d11e      	bne.n	8001210 <SPI_WIFI_ResetModule+0xc0>
 80011d2:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80011d6:	3820      	subs	r0, #32
 80011d8:	bf18      	it	ne
 80011da:	f04f 30ff 	movne.w	r0, #4294967295
}
 80011de:	b003      	add	sp, #12
 80011e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80011e2:	eb0d 0104 	add.w	r1, sp, r4
 80011e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ea:	4638      	mov	r0, r7
 80011ec:	f002 f91a 	bl	8003424 <HAL_SPI_Receive>
 80011f0:	4606      	mov	r6, r0
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80011f2:	f000 fc97 	bl	8001b24 <HAL_GetTick>
 80011f6:	1b40      	subs	r0, r0, r5
    count += 2;
 80011f8:	3402      	adds	r4, #2
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80011fa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 80011fe:	b2e4      	uxtb	r4, r4
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001200:	d201      	bcs.n	8001206 <SPI_WIFI_ResetModule+0xb6>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d0c5      	beq.n	8001192 <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS();
 8001206:	2201      	movs	r2, #1
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <SPI_WIFI_ResetModule+0xc8>)
 800120a:	4611      	mov	r1, r2
 800120c:	f000 fe14 	bl	8001e38 <HAL_GPIO_WritePin>
    return -1;
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	e7e3      	b.n	80011de <SPI_WIFI_ResetModule+0x8e>
 8001216:	bf00      	nop
 8001218:	48001000 	.word	0x48001000
 800121c:	20000114 	.word	0x20000114

08001220 <SPI_WIFI_Init>:
{
 8001220:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8001222:	4605      	mov	r5, r0
 8001224:	bb88      	cbnz	r0, 800128a <SPI_WIFI_Init+0x6a>
    hspi.Instance               = SPI3;
 8001226:	4c1d      	ldr	r4, [pc, #116]	; (800129c <SPI_WIFI_Init+0x7c>)
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <SPI_WIFI_Init+0x80>)
 800122a:	4620      	mov	r0, r4
 800122c:	f840 3f08 	str.w	r3, [r0, #8]!
    SPI_WIFI_MspInit(&hspi);
 8001230:	f7ff ff06 	bl	8001040 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001234:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001238:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800123c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001240:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001244:	e9c4 3505 	strd	r3, r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001248:	f104 0008 	add.w	r0, r4, #8
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800124c:	2310      	movs	r3, #16
 800124e:	e9c4 2308 	strd	r2, r3, [r4, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001252:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001256:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800125a:	61e5      	str	r5, [r4, #28]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800125c:	f001 fe81 	bl	8002f62 <HAL_SPI_Init>
 8001260:	4602      	mov	r2, r0
 8001262:	b9b8      	cbnz	r0, 8001294 <SPI_WIFI_Init+0x74>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001264:	4601      	mov	r1, r0
 8001266:	9001      	str	r0, [sp, #4]
 8001268:	2007      	movs	r0, #7
 800126a:	f000 fc87 	bl	8001b7c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800126e:	2007      	movs	r0, #7
 8001270:	f000 fcb6 	bl	8001be0 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001274:	9a01      	ldr	r2, [sp, #4]
 8001276:	2033      	movs	r0, #51	; 0x33
 8001278:	4611      	mov	r1, r2
 800127a:	f000 fc7f 	bl	8001b7c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800127e:	2033      	movs	r0, #51	; 0x33
 8001280:	f000 fcae 	bl	8001be0 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8001284:	200a      	movs	r0, #10
 8001286:	f7ff fe95 	bl	8000fb4 <SPI_WIFI_DelayUs>
}
 800128a:	b003      	add	sp, #12
 800128c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc = SPI_WIFI_ResetModule();
 8001290:	f7ff bf5e 	b.w	8001150 <SPI_WIFI_ResetModule>
}
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	b003      	add	sp, #12
 800129a:	bd30      	pop	{r4, r5, pc}
 800129c:	2000010c 	.word	0x2000010c
 80012a0:	40003c00 	.word	0x40003c00

080012a4 <SPI_WIFI_DeInit>:
{
 80012a4:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 80012a6:	4802      	ldr	r0, [pc, #8]	; (80012b0 <SPI_WIFI_DeInit+0xc>)
 80012a8:	f001 fee0 	bl	800306c <HAL_SPI_DeInit>
}
 80012ac:	2000      	movs	r0, #0
 80012ae:	bd08      	pop	{r3, pc}
 80012b0:	20000114 	.word	0x20000114

080012b4 <SPI_WIFI_ReceiveData>:
{
 80012b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b8:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS();
 80012ba:	2201      	movs	r2, #1
{
 80012bc:	4604      	mov	r4, r0
 80012be:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS();
 80012c0:	4836      	ldr	r0, [pc, #216]	; (800139c <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event == 1)
 80012c2:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80013a0 <SPI_WIFI_ReceiveData+0xec>
  WIFI_DISABLE_NSS();
 80012c6:	4611      	mov	r1, r2
 80012c8:	f000 fdb6 	bl	8001e38 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff fe71 	bl	8000fb4 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 80012d2:	f000 fc27 	bl	8001b24 <HAL_GetTick>
 80012d6:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event == 1)
 80012d8:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d01a      	beq.n	8001316 <SPI_WIFI_ReceiveData+0x62>
  WIFI_ENABLE_NSS();
 80012e0:	482e      	ldr	r0, [pc, #184]	; (800139c <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 80012e2:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800139c <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80012e6:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80013a4 <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS();
 80012ea:	2200      	movs	r2, #0
 80012ec:	2101      	movs	r1, #1
 80012ee:	f000 fda3 	bl	8001e38 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80012f2:	200f      	movs	r0, #15
 80012f4:	f7ff fe5e 	bl	8000fb4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80012f8:	3402      	adds	r4, #2
 80012fa:	2500      	movs	r5, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	4658      	mov	r0, fp
 8001300:	f000 fd94 	bl	8001e2c <HAL_GPIO_ReadPin>
 8001304:	2801      	cmp	r0, #1
 8001306:	b22e      	sxth	r6, r5
 8001308:	d00d      	beq.n	8001326 <SPI_WIFI_ReceiveData+0x72>
  WIFI_DISABLE_NSS();
 800130a:	2201      	movs	r2, #1
 800130c:	4823      	ldr	r0, [pc, #140]	; (800139c <SPI_WIFI_ReceiveData+0xe8>)
 800130e:	4611      	mov	r1, r2
 8001310:	f000 fd92 	bl	8001e38 <HAL_GPIO_WritePin>
  return length;
 8001314:	e01a      	b.n	800134c <SPI_WIFI_ReceiveData+0x98>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001316:	f000 fc05 	bl	8001b24 <HAL_GetTick>
 800131a:	1b40      	subs	r0, r0, r5
 800131c:	4580      	cmp	r8, r0
 800131e:	d2db      	bcs.n	80012d8 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001320:	f06f 0602 	mvn.w	r6, #2
 8001324:	e012      	b.n	800134c <SPI_WIFI_ReceiveData+0x98>
    if ((length < len) || (!len))
 8001326:	42af      	cmp	r7, r5
 8001328:	dc01      	bgt.n	800132e <SPI_WIFI_ReceiveData+0x7a>
 800132a:	2f00      	cmp	r7, #0
 800132c:	d1ed      	bne.n	800130a <SPI_WIFI_ReceiveData+0x56>
      spi_rx_event = 1;
 800132e:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001330:	a901      	add	r1, sp, #4
 8001332:	4650      	mov	r0, sl
      spi_rx_event = 1;
 8001334:	f8c9 2070 	str.w	r2, [r9, #112]	; 0x70
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001338:	f002 fa72 	bl	8003820 <HAL_SPI_Receive_IT>
 800133c:	2201      	movs	r2, #1
 800133e:	b148      	cbz	r0, 8001354 <SPI_WIFI_ReceiveData+0xa0>
        WIFI_DISABLE_NSS();
 8001340:	4816      	ldr	r0, [pc, #88]	; (800139c <SPI_WIFI_ReceiveData+0xe8>)
 8001342:	4611      	mov	r1, r2
 8001344:	f000 fd78 	bl	8001e38 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8001348:	f04f 36ff 	mov.w	r6, #4294967295
}
 800134c:	4630      	mov	r0, r6
 800134e:	b003      	add	sp, #12
 8001350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8001354:	f000 fbe6 	bl	8001b24 <HAL_GetTick>
 8001358:	4606      	mov	r6, r0
  while (spi_rx_event == 1)
 800135a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800135e:	2b01      	cmp	r3, #1
 8001360:	d104      	bne.n	800136c <SPI_WIFI_ReceiveData+0xb8>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001362:	f000 fbdf 	bl	8001b24 <HAL_GetTick>
 8001366:	1b80      	subs	r0, r0, r6
 8001368:	4580      	cmp	r8, r0
 800136a:	d2f6      	bcs.n	800135a <SPI_WIFI_ReceiveData+0xa6>
      pData[0] = tmp[0];
 800136c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001370:	f804 3c02 	strb.w	r3, [r4, #-2]
      if (length >= ES_WIFI_DATA_SIZE) {
 8001374:	3502      	adds	r5, #2
      pData[1] = tmp[1];
 8001376:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800137a:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 800137e:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8001382:	f104 0402 	add.w	r4, r4, #2
 8001386:	d1b9      	bne.n	80012fc <SPI_WIFI_ReceiveData+0x48>
        WIFI_DISABLE_NSS();
 8001388:	2201      	movs	r2, #1
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <SPI_WIFI_ReceiveData+0xe8>)
 800138c:	4611      	mov	r1, r2
 800138e:	f000 fd53 	bl	8001e38 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001392:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();
 8001396:	f7ff fedb 	bl	8001150 <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800139a:	e7d7      	b.n	800134c <SPI_WIFI_ReceiveData+0x98>
 800139c:	48001000 	.word	0x48001000
 80013a0:	2000010c 	.word	0x2000010c
 80013a4:	20000114 	.word	0x20000114

080013a8 <SPI_WIFI_SendData>:
{
 80013a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80013ac:	4605      	mov	r5, r0
 80013ae:	460c      	mov	r4, r1
 80013b0:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 80013b2:	f000 fbb7 	bl	8001b24 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY() == 0)
 80013b6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001450 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 80013ba:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY() == 0)
 80013bc:	2102      	movs	r1, #2
 80013be:	4648      	mov	r0, r9
 80013c0:	f000 fd34 	bl	8001e2c <HAL_GPIO_ReadPin>
 80013c4:	2801      	cmp	r0, #1
 80013c6:	4606      	mov	r6, r0
 80013c8:	d11c      	bne.n	8001404 <SPI_WIFI_SendData+0x5c>
  cmddata_rdy_rising_event = 1;
 80013ca:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001458 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 80013ce:	4601      	mov	r1, r0
  cmddata_rdy_rising_event = 1;
 80013d0:	f8c8 006c 	str.w	r0, [r8, #108]	; 0x6c
  WIFI_ENABLE_NSS();
 80013d4:	2200      	movs	r2, #0
 80013d6:	481e      	ldr	r0, [pc, #120]	; (8001450 <SPI_WIFI_SendData+0xa8>)
 80013d8:	f000 fd2e 	bl	8001e38 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80013dc:	200f      	movs	r0, #15
 80013de:	f7ff fde9 	bl	8000fb4 <SPI_WIFI_DelayUs>
  if (len > 1)
 80013e2:	2c01      	cmp	r4, #1
 80013e4:	d91a      	bls.n	800141c <SPI_WIFI_SendData+0x74>
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 80013e6:	0862      	lsrs	r2, r4, #1
 80013e8:	4629      	mov	r1, r5
 80013ea:	f108 0008 	add.w	r0, r8, #8
    spi_tx_event = 1;
 80013ee:	f8c8 6004 	str.w	r6, [r8, #4]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 80013f2:	f002 f93b 	bl	800366c <HAL_SPI_Transmit_IT>
 80013f6:	b170      	cbz	r0, 8001416 <SPI_WIFI_SendData+0x6e>
      WIFI_DISABLE_NSS();
 80013f8:	2201      	movs	r2, #1
 80013fa:	4815      	ldr	r0, [pc, #84]	; (8001450 <SPI_WIFI_SendData+0xa8>)
 80013fc:	4611      	mov	r1, r2
 80013fe:	f000 fd1b 	bl	8001e38 <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 8001402:	e005      	b.n	8001410 <SPI_WIFI_SendData+0x68>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001404:	f000 fb8e 	bl	8001b24 <HAL_GetTick>
 8001408:	eba0 0008 	sub.w	r0, r0, r8
 800140c:	4287      	cmp	r7, r0
 800140e:	d2d5      	bcs.n	80013bc <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	e019      	b.n	800144a <SPI_WIFI_SendData+0xa2>
    wait_spi_tx_event(timeout);
 8001416:	4638      	mov	r0, r7
 8001418:	f7ff fe00 	bl	800101c <wait_spi_tx_event.isra.0>
  if (len & 1)
 800141c:	07e3      	lsls	r3, r4, #31
 800141e:	d513      	bpl.n	8001448 <SPI_WIFI_SendData+0xa0>
    Padding[0] = pdata[len - 1];
 8001420:	4425      	add	r5, r4
    spi_tx_event=1;
 8001422:	2201      	movs	r2, #1
    Padding[0] = pdata[len - 1];
 8001424:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8001428:	f88d 3004 	strb.w	r3, [sp, #4]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 800142e:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8001432:	230a      	movs	r3, #10
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001434:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8001436:	f88d 3005 	strb.w	r3, [sp, #5]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800143a:	f002 f917 	bl	800366c <HAL_SPI_Transmit_IT>
 800143e:	2800      	cmp	r0, #0
 8001440:	d1da      	bne.n	80013f8 <SPI_WIFI_SendData+0x50>
    wait_spi_tx_event(timeout);
 8001442:	4638      	mov	r0, r7
 8001444:	f7ff fdea 	bl	800101c <wait_spi_tx_event.isra.0>
  return len;
 8001448:	b220      	sxth	r0, r4
}
 800144a:	b003      	add	sp, #12
 800144c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001450:	48001000 	.word	0x48001000
 8001454:	20000114 	.word	0x20000114
 8001458:	2000010c 	.word	0x2000010c

0800145c <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 800145c:	f000 bb68 	b.w	8001b30 <HAL_Delay>

08001460 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <HAL_SPI_RxCpltCallback+0xc>)
 8001462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001464:	b10a      	cbz	r2, 800146a <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001466:	2200      	movs	r2, #0
 8001468:	671a      	str	r2, [r3, #112]	; 0x70
  }
}
 800146a:	4770      	bx	lr
 800146c:	2000010c 	.word	0x2000010c

08001470 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_SPI_TxCpltCallback+0xc>)
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	b10a      	cbz	r2, 800147a <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
  }
}
 800147a:	4770      	bx	lr
 800147c:	2000010c 	.word	0x2000010c

08001480 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event == 1)
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <SPI_WIFI_ISR+0x10>)
 8001482:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001484:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001486:	bf04      	itt	eq
 8001488:	2200      	moveq	r2, #0
 800148a:	66da      	streq	r2, [r3, #108]	; 0x6c
   }
}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000010c 	.word	0x2000010c

08001494 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8001494:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <WIFI_Init+0x30>)
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <WIFI_Init+0x34>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <WIFI_Init+0x38>)
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <WIFI_Init+0x3c>)
 80014a2:	490c      	ldr	r1, [pc, #48]	; (80014d4 <WIFI_Init+0x40>)
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <WIFI_Init+0x44>)
 80014a6:	f7ff fb75 	bl	8000b94 <ES_WIFI_RegisterBusIO>
 80014aa:	b940      	cbnz	r0, 80014be <WIFI_Init+0x2a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80014ac:	480a      	ldr	r0, [pc, #40]	; (80014d8 <WIFI_Init+0x44>)
 80014ae:	f7ff faf3 	bl	8000a98 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80014b2:	3800      	subs	r0, #0
 80014b4:	bf18      	it	ne
 80014b6:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80014b8:	b003      	add	sp, #12
 80014ba:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80014be:	2001      	movs	r0, #1
 80014c0:	e7fa      	b.n	80014b8 <WIFI_Init+0x24>
 80014c2:	bf00      	nop
 80014c4:	080012b5 	.word	0x080012b5
 80014c8:	080013a9 	.word	0x080013a9
 80014cc:	080012a5 	.word	0x080012a5
 80014d0:	0800145d 	.word	0x0800145d
 80014d4:	08001221 	.word	0x08001221
 80014d8:	20000180 	.word	0x20000180

080014dc <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 80014dc:	b508      	push	{r3, lr}
 80014de:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80014e0:	460a      	mov	r2, r1
 80014e2:	4601      	mov	r1, r0
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <WIFI_Connect+0x24>)
 80014e6:	f7ff fb67 	bl	8000bb8 <ES_WIFI_Connect>
 80014ea:	b930      	cbnz	r0, 80014fa <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <WIFI_Connect+0x24>)
 80014ee:	f7ff fbbf 	bl	8000c70 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80014f2:	3800      	subs	r0, #0
 80014f4:	bf18      	it	ne
 80014f6:	2001      	movne	r0, #1
    {
       ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80014f8:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80014fa:	2001      	movs	r0, #1
 80014fc:	e7fc      	b.n	80014f8 <WIFI_Connect+0x1c>
 80014fe:	bf00      	nop
 8001500:	20000180 	.word	0x20000180

08001504 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8001504:	b508      	push	{r3, lr}
 8001506:	460a      	mov	r2, r1
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if ((mac != NULL) && (0 < MacLength))
 8001508:	b140      	cbz	r0, 800151c <WIFI_GetMAC_Address+0x18>
 800150a:	b139      	cbz	r1, 800151c <WIFI_GetMAC_Address+0x18>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 800150c:	4601      	mov	r1, r0
 800150e:	4804      	ldr	r0, [pc, #16]	; (8001520 <WIFI_GetMAC_Address+0x1c>)
 8001510:	f7ff fc2e 	bl	8000d70 <ES_WIFI_GetMACAddress>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001514:	3800      	subs	r0, #0
 8001516:	bf18      	it	ne
 8001518:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 800151a:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800151c:	2001      	movs	r0, #1
 800151e:	e7fc      	b.n	800151a <WIFI_GetMAC_Address+0x16>
 8001520:	20000180 	.word	0x20000180

08001524 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8001524:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8001526:	4604      	mov	r4, r0
 8001528:	b908      	cbnz	r0, 800152e <WIFI_GetIP_Address+0xa>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800152a:	2001      	movs	r0, #1
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 800152c:	bd38      	pop	{r3, r4, r5, pc}
  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 800152e:	2903      	cmp	r1, #3
 8001530:	d9fb      	bls.n	800152a <WIFI_GetIP_Address+0x6>
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8001532:	4d05      	ldr	r5, [pc, #20]	; (8001548 <WIFI_GetIP_Address+0x24>)
 8001534:	4628      	mov	r0, r5
 8001536:	f7ff fb7f 	bl	8000c38 <ES_WIFI_IsConnected>
 800153a:	2801      	cmp	r0, #1
 800153c:	d1f5      	bne.n	800152a <WIFI_GetIP_Address+0x6>
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800153e:	f8d5 30d5 	ldr.w	r3, [r5, #213]	; 0xd5
 8001542:	6023      	str	r3, [r4, #0]
      ret = WIFI_STATUS_OK;
 8001544:	2000      	movs	r0, #0
 8001546:	e7f1      	b.n	800152c <WIFI_GetIP_Address+0x8>
 8001548:	20000180 	.word	0x20000180

0800154c <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800154c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
  conn.RemotePort = port;
 800154e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8001552:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 8001556:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800155a:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800155e:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001566:	bf18      	it	ne
 8001568:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 800156a:	785a      	ldrb	r2, [r3, #1]
  conn.Number = (uint8_t)socket;
 800156c:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001570:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 8001574:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001578:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 800157a:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800157c:	4806      	ldr	r0, [pc, #24]	; (8001598 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 800157e:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8001580:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 8001584:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001588:	f7ff fc12 	bl	8000db0 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 800158c:	3800      	subs	r0, #0
 800158e:	bf18      	it	ne
 8001590:	2001      	movne	r0, #1
 8001592:	b007      	add	sp, #28
 8001594:	f85d fb04 	ldr.w	pc, [sp], #4
 8001598:	20000180 	.word	0x20000180

0800159c <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 800159c:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800159e:	9c04      	ldr	r4, [sp, #16]
 80015a0:	e9cd 3400 	strd	r3, r4, [sp]
 80015a4:	4613      	mov	r3, r2
 80015a6:	460a      	mov	r2, r1
 80015a8:	b2c1      	uxtb	r1, r0
 80015aa:	4804      	ldr	r0, [pc, #16]	; (80015bc <WIFI_SendData+0x20>)
 80015ac:	f7ff fc80 	bl	8000eb0 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 80015b0:	3800      	subs	r0, #0
 80015b2:	bf18      	it	ne
 80015b4:	2001      	movne	r0, #1
 80015b6:	b002      	add	sp, #8
 80015b8:	bd10      	pop	{r4, pc}
 80015ba:	bf00      	nop
 80015bc:	20000180 	.word	0x20000180

080015c0 <I2Cx_Init.constprop.0>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 80015c0:	b570      	push	{r4, r5, r6, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80015c2:	4a2a      	ldr	r2, [pc, #168]	; (800166c <I2Cx_Init.constprop.0+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80015c4:	4c2a      	ldr	r4, [pc, #168]	; (8001670 <I2Cx_Init.constprop.0+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80015c6:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <I2Cx_Init.constprop.0+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80015c8:	4d2b      	ldr	r5, [pc, #172]	; (8001678 <I2Cx_Init.constprop.0+0xb8>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80015ca:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80015cc:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80015d0:	2201      	movs	r2, #1
 80015d2:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 80015d6:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80015da:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80015de:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80015e6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 80015e8:	b088      	sub	sp, #32
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80015f2:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80015f4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80015f8:	2312      	movs	r3, #18
 80015fa:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80015fe:	2003      	movs	r0, #3
 8001600:	2304      	movs	r3, #4
 8001602:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001606:	a903      	add	r1, sp, #12
 8001608:	481c      	ldr	r0, [pc, #112]	; (800167c <I2Cx_Init.constprop.0+0xbc>)
 800160a:	f000 fb31 	bl	8001c70 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800160e:	a903      	add	r1, sp, #12
 8001610:	481a      	ldr	r0, [pc, #104]	; (800167c <I2Cx_Init.constprop.0+0xbc>)
 8001612:	f000 fb2d 	bl	8001c70 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001616:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800161c:	65ab      	str	r3, [r5, #88]	; 0x58
 800161e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8001628:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800162a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800162e:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001630:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001632:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001636:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001638:	4632      	mov	r2, r6
 800163a:	210f      	movs	r1, #15
 800163c:	2021      	movs	r0, #33	; 0x21
 800163e:	f000 fa9d 	bl	8001b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001642:	2021      	movs	r0, #33	; 0x21
 8001644:	f000 facc 	bl	8001be0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001648:	4632      	mov	r2, r6
 800164a:	210f      	movs	r1, #15
 800164c:	2022      	movs	r0, #34	; 0x22
 800164e:	f000 fa95 	bl	8001b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001652:	2022      	movs	r0, #34	; 0x22
 8001654:	f000 fac4 	bl	8001be0 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8001658:	4620      	mov	r0, r4
 800165a:	f000 fd25 	bl	80020a8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800165e:	4631      	mov	r1, r6
 8001660:	4620      	mov	r0, r4
}
 8001662:	b008      	add	sp, #32
 8001664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001668:	f000 bf42 	b.w	80024f0 <HAL_I2CEx_ConfigAnalogFilter>
 800166c:	40005800 	.word	0x40005800
 8001670:	20000a80 	.word	0x20000a80
 8001674:	00702681 	.word	0x00702681
 8001678:	40021000 	.word	0x40021000
 800167c:	48000400 	.word	0x48000400

08001680 <BSP_LED_Init>:
{
 8001680:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001682:	b948      	cbnz	r0, 8001698 <BSP_LED_Init+0x18>
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <BSP_LED_Init+0x3c>)
 8001686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001688:	f042 0202 	orr.w	r2, r2, #2
 800168c:	64da      	str	r2, [r3, #76]	; 0x4c
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001698:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800169c:	2301      	movs	r3, #1
 800169e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a2:	2100      	movs	r1, #0
 80016a4:	2302      	movs	r3, #2
 80016a6:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <BSP_LED_Init+0x40>)
 80016ac:	a901      	add	r1, sp, #4
 80016ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80016b2:	f000 fadd 	bl	8001c70 <HAL_GPIO_Init>
}
 80016b6:	b007      	add	sp, #28
 80016b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80016bc:	40021000 	.word	0x40021000
 80016c0:	20000004 	.word	0x20000004

080016c4 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <BSP_LED_On+0x10>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80016cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d0:	f000 bbb2 	b.w	8001e38 <HAL_GPIO_WritePin>
 80016d4:	20000004 	.word	0x20000004

080016d8 <BSP_COM_Init>:
{
 80016d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016da:	460d      	mov	r5, r1
 80016dc:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80016de:	b9d8      	cbnz	r0, 8001718 <BSP_COM_Init+0x40>
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <BSP_COM_Init+0x80>)
 80016e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e4:	f042 0202 	orr.w	r2, r2, #2
 80016e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80016ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ec:	f002 0202 	and.w	r2, r2, #2
 80016f0:	9200      	str	r2, [sp, #0]
 80016f2:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80016f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016f6:	f042 0202 	orr.w	r2, r2, #2
 80016fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80016fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016fe:	f002 0202 	and.w	r2, r2, #2
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8001706:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800170c:	661a      	str	r2, [r3, #96]	; 0x60
 800170e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001718:	4c10      	ldr	r4, [pc, #64]	; (800175c <BSP_COM_Init+0x84>)
 800171a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800171e:	2602      	movs	r6, #2
 8001720:	2340      	movs	r3, #64	; 0x40
 8001722:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001726:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800172c:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800172e:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001730:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001732:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001734:	f000 fa9c 	bl	8001c70 <HAL_GPIO_Init>
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001738:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800173a:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800173c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800173e:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001740:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001744:	f000 fa94 	bl	8001c70 <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 8001748:	6923      	ldr	r3, [r4, #16]
 800174a:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 800174c:	4628      	mov	r0, r5
 800174e:	f002 fe26 	bl	800439e <HAL_UART_Init>
}
 8001752:	b009      	add	sp, #36	; 0x24
 8001754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	20000004 	.word	0x20000004

08001760 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8001760:	f7ff bf2e 	b.w	80015c0 <I2Cx_Init.constprop.0>

08001764 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001764:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001766:	2301      	movs	r3, #1
{
 8001768:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800176c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001770:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001774:	f10d 0217 	add.w	r2, sp, #23
 8001778:	9200      	str	r2, [sp, #0]
 800177a:	460a      	mov	r2, r1
 800177c:	4601      	mov	r1, r0
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <SENSOR_IO_Write+0x34>)
 8001780:	f000 fcfe 	bl	8002180 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001784:	b120      	cbz	r0, 8001790 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <SENSOR_IO_Write+0x34>)
 8001788:	f000 fce0 	bl	800214c <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 800178c:	f7ff ff18 	bl	80015c0 <I2Cx_Init.constprop.0>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8001790:	b007      	add	sp, #28
 8001792:	f85d fb04 	ldr.w	pc, [sp], #4
 8001796:	bf00      	nop
 8001798:	20000a80 	.word	0x20000a80

0800179c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800179c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 800179e:	2300      	movs	r3, #0
{
 80017a0:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 80017a2:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80017a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017aa:	2301      	movs	r3, #1
 80017ac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80017b0:	f10d 0117 	add.w	r1, sp, #23
 80017b4:	9100      	str	r1, [sp, #0]
 80017b6:	4601      	mov	r1, r0
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <SENSOR_IO_Read+0x38>)
 80017ba:	f000 fdbb 	bl	8002334 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80017be:	b120      	cbz	r0, 80017ca <SENSOR_IO_Read+0x2e>
  HAL_I2C_DeInit(i2c_handler);
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <SENSOR_IO_Read+0x38>)
 80017c2:	f000 fcc3 	bl	800214c <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80017c6:	f7ff fefb 	bl	80015c0 <I2Cx_Init.constprop.0>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 80017ca:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80017ce:	b007      	add	sp, #28
 80017d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80017d4:	20000a80 	.word	0x20000a80

080017d8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80017d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80017da:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80017de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80017e2:	9200      	str	r2, [sp, #0]
 80017e4:	2301      	movs	r3, #1
 80017e6:	460a      	mov	r2, r1
 80017e8:	4601      	mov	r1, r0
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <SENSOR_IO_ReadMultiple+0x2c>)
 80017ec:	f000 fda2 	bl	8002334 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80017f0:	4604      	mov	r4, r0
 80017f2:	b120      	cbz	r0, 80017fe <SENSOR_IO_ReadMultiple+0x26>
  HAL_I2C_DeInit(i2c_handler);
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <SENSOR_IO_ReadMultiple+0x2c>)
 80017f6:	f000 fca9 	bl	800214c <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80017fa:	f7ff fee1 	bl	80015c0 <I2Cx_Init.constprop.0>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 80017fe:	b2a0      	uxth	r0, r4
 8001800:	b004      	add	sp, #16
 8001802:	bd10      	pop	{r4, pc}
 8001804:	20000a80 	.word	0x20000a80

08001808 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001808:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800180a:	4c07      	ldr	r4, [pc, #28]	; (8001828 <BSP_ACCELERO_Init+0x20>)
 800180c:	68a3      	ldr	r3, [r4, #8]
 800180e:	4798      	blx	r3
 8001810:	286a      	cmp	r0, #106	; 0x6a
 8001812:	d107      	bne.n	8001824 <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001816:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 800181a:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001820:	2000      	movs	r0, #0
  }  

  return ret;
}
 8001822:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 8001824:	2001      	movs	r0, #1
 8001826:	e7fc      	b.n	8001822 <BSP_ACCELERO_Init+0x1a>
 8001828:	2000004c 	.word	0x2000004c
 800182c:	20000b58 	.word	0x20000b58

08001830 <BSP_ACCELERO_AccGetXYZ>:
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv != NULL)
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <BSP_ACCELERO_AccGetXYZ+0x10>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b113      	cbz	r3, 800183c <BSP_ACCELERO_AccGetXYZ+0xc>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	b103      	cbz	r3, 800183c <BSP_ACCELERO_AccGetXYZ+0xc>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800183a:	4718      	bx	r3
    }
  }
}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000b58 	.word	0x20000b58

08001844 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001844:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001846:	2110      	movs	r1, #16
{  
 8001848:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800184a:	20d4      	movs	r0, #212	; 0xd4
 800184c:	f7ff ffa6 	bl	800179c <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8001850:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8001854:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	2110      	movs	r1, #16
 800185a:	20d4      	movs	r0, #212	; 0xd4
 800185c:	f7ff ff82 	bl	8001764 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001860:	2112      	movs	r1, #18
 8001862:	20d4      	movs	r0, #212	; 0xd4
 8001864:	f7ff ff9a 	bl	800179c <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8001868:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800186c:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 8001870:	2112      	movs	r1, #18
}
 8001872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001876:	20d4      	movs	r0, #212	; 0xd4
 8001878:	f7ff bf74 	b.w	8001764 <SENSOR_IO_Write>

0800187c <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800187c:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800187e:	2110      	movs	r1, #16
 8001880:	20d4      	movs	r0, #212	; 0xd4
 8001882:	f7ff ff8b 	bl	800179c <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
}
 8001886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800188a:	f000 020f 	and.w	r2, r0, #15
 800188e:	2110      	movs	r1, #16
 8001890:	20d4      	movs	r0, #212	; 0xd4
 8001892:	f7ff bf67 	b.w	8001764 <SENSOR_IO_Write>

08001896 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001896:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001898:	2115      	movs	r1, #21
{
 800189a:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800189c:	20d4      	movs	r0, #212	; 0xd4
 800189e:	f7ff ff7d 	bl	800179c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80018a2:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 80018a6:	b10c      	cbz	r4, 80018ac <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80018a8:	f042 0210 	orr.w	r2, r2, #16
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
}
 80018ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80018b0:	2115      	movs	r1, #21
 80018b2:	20d4      	movs	r0, #212	; 0xd4
 80018b4:	f7ff bf56 	b.w	8001764 <SENSOR_IO_Write>

080018b8 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80018b8:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80018ba:	2111      	movs	r1, #17
{  
 80018bc:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80018be:	20d4      	movs	r0, #212	; 0xd4
 80018c0:	f7ff ff6c 	bl	800179c <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 80018c4:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 80018c8:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	2111      	movs	r1, #17
 80018ce:	20d4      	movs	r0, #212	; 0xd4
 80018d0:	f7ff ff48 	bl	8001764 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80018d4:	2112      	movs	r1, #18
 80018d6:	20d4      	movs	r0, #212	; 0xd4
 80018d8:	f7ff ff60 	bl	800179c <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 80018dc:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80018e0:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 80018e4:	2112      	movs	r1, #18
}
 80018e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80018ea:	20d4      	movs	r0, #212	; 0xd4
 80018ec:	f7ff bf3a 	b.w	8001764 <SENSOR_IO_Write>

080018f0 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80018f0:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80018f2:	2111      	movs	r1, #17
 80018f4:	20d4      	movs	r0, #212	; 0xd4
 80018f6:	f7ff ff51 	bl	800179c <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
}
 80018fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80018fe:	f000 020f 	and.w	r2, r0, #15
 8001902:	2111      	movs	r1, #17
 8001904:	20d4      	movs	r0, #212	; 0xd4
 8001906:	f7ff bf2d 	b.w	8001764 <SENSOR_IO_Write>

0800190a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800190a:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800190c:	2116      	movs	r1, #22
{  
 800190e:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001910:	20d4      	movs	r0, #212	; 0xd4
 8001912:	f7ff ff43 	bl	800179c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001916:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 800191a:	b10c      	cbz	r4, 8001920 <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800191c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
}
 8001920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001924:	2116      	movs	r1, #22
 8001926:	20d4      	movs	r0, #212	; 0xd4
 8001928:	f7ff bf1c 	b.w	8001764 <SENSOR_IO_Write>

0800192c <LSM6DSL_AccReadID>:
{  
 800192c:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 800192e:	f7ff ff17 	bl	8001760 <SENSOR_IO_Init>
}
 8001932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001936:	210f      	movs	r1, #15
 8001938:	20d4      	movs	r0, #212	; 0xd4
 800193a:	f7ff bf2f 	b.w	800179c <SENSOR_IO_Read>

0800193e <LSM6DSL_GyroReadID>:
 800193e:	f7ff bff5 	b.w	800192c <LSM6DSL_AccReadID>
	...

08001944 <LSM6DSL_AccReadXYZ>:
{
 8001944:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001946:	2110      	movs	r1, #16
{
 8001948:	b085      	sub	sp, #20
 800194a:	4604      	mov	r4, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800194c:	20d4      	movs	r0, #212	; 0xd4
 800194e:	f7ff ff25 	bl	800179c <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001952:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001954:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001956:	aa02      	add	r2, sp, #8
 8001958:	2128      	movs	r1, #40	; 0x28
 800195a:	20d4      	movs	r0, #212	; 0xd4
 800195c:	f7ff ff3c 	bl	80017d8 <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001960:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001964:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001968:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800196c:	f8ad 3000 	strh.w	r3, [sp]
 8001970:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001974:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001978:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800197c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001980:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001984:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001988:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800198c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlx & 0x0C)
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <LSM6DSL_AccReadXYZ+0x84>)
 8001992:	f005 050c 	and.w	r5, r5, #12
 8001996:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800199a:	ed95 7a00 	vldr	s14, [r5]
  for(i=0; i<3; i++)
 800199e:	1ea3      	subs	r3, r4, #2
 80019a0:	466a      	mov	r2, sp
 80019a2:	3404      	adds	r4, #4
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80019a4:	f932 1b02 	ldrsh.w	r1, [r2], #2
 80019a8:	ee07 1a90 	vmov	s15, r1
 80019ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b8:	ee17 1a90 	vmov	r1, s15
 80019bc:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 80019c0:	42a3      	cmp	r3, r4
 80019c2:	d1ef      	bne.n	80019a4 <LSM6DSL_AccReadXYZ+0x60>
}
 80019c4:	b005      	add	sp, #20
 80019c6:	bd30      	pop	{r4, r5, pc}
 80019c8:	08005c00 	.word	0x08005c00

080019cc <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80019cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019ce:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80019d0:	2111      	movs	r1, #17
 80019d2:	20d4      	movs	r0, #212	; 0xd4
 80019d4:	f7ff fee2 	bl	800179c <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80019d8:	466a      	mov	r2, sp
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80019da:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80019dc:	2306      	movs	r3, #6
 80019de:	2122      	movs	r1, #34	; 0x22
 80019e0:	20d4      	movs	r0, #212	; 0xd4
 80019e2:	f7ff fef9 	bl	80017d8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80019e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80019ea:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80019ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80019f8:	ee07 3a10 	vmov	s14, r3
 80019fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	ee07 3a90 	vmov	s15, r3
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <LSM6DSL_GyroReadXYZAngRate+0x88>)
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001a0c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001a10:	f005 050c 	and.w	r5, r5, #12
 8001a14:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001a18:	f89d 3000 	ldrb.w	r3, [sp]
 8001a1c:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8001a20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	ee06 3a90 	vmov	s13, r3
 8001a2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a2e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001a3a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001a3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001a42:	edc4 6a00 	vstr	s13, [r4]
 8001a46:	ed84 7a01 	vstr	s14, [r4, #4]
 8001a4a:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 8001a4e:	b003      	add	sp, #12
 8001a50:	bd30      	pop	{r4, r5, pc}
 8001a52:	bf00      	nop
 8001a54:	08005c00 	.word	0x08005c00

08001a58 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a58:	490f      	ldr	r1, [pc, #60]	; (8001a98 <SystemInit+0x40>)
 8001a5a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <SystemInit+0x44>)
 8001a68:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a6a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001a72:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001a7a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a8c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a8e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a94:	608b      	str	r3, [r1, #8]
#endif
}
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001aa0:	4770      	bx	lr
	...

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aa6:	4e0f      	ldr	r6, [pc, #60]	; (8001ae4 <HAL_InitTick+0x40>)
{
 8001aa8:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001aaa:	7830      	ldrb	r0, [r6, #0]
 8001aac:	b908      	cbnz	r0, 8001ab2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aae:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001ab0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <HAL_InitTick+0x44>)
 8001ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001abc:	6810      	ldr	r0, [r2, #0]
 8001abe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ac2:	f000 f89b 	bl	8001bfc <HAL_SYSTICK_Config>
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d1f0      	bne.n	8001aae <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001acc:	2d0f      	cmp	r5, #15
 8001ace:	d8ee      	bhi.n	8001aae <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f000 f850 	bl	8001b7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001adc:	6075      	str	r5, [r6, #4]
 8001ade:	4620      	mov	r0, r4
 8001ae0:	e7e6      	b.n	8001ab0 <HAL_InitTick+0xc>
 8001ae2:	bf00      	nop
 8001ae4:	20000084 	.word	0x20000084
 8001ae8:	20000080 	.word	0x20000080

08001aec <HAL_Init>:
{
 8001aec:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aee:	2003      	movs	r0, #3
 8001af0:	f000 f832 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af4:	200f      	movs	r0, #15
 8001af6:	f7ff ffd5 	bl	8001aa4 <HAL_InitTick>
 8001afa:	4604      	mov	r4, r0
 8001afc:	b918      	cbnz	r0, 8001b06 <HAL_Init+0x1a>
    HAL_MspInit();
 8001afe:	f7ff ffcf 	bl	8001aa0 <HAL_MspInit>
}
 8001b02:	4620      	mov	r0, r4
 8001b04:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001b06:	2401      	movs	r4, #1
 8001b08:	e7fb      	b.n	8001b02 <HAL_Init+0x16>
	...

08001b0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001b0c:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <HAL_IncTick+0x10>)
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_IncTick+0x14>)
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	440b      	add	r3, r1
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000b5c 	.word	0x20000b5c
 8001b20:	20000084 	.word	0x20000084

08001b24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <HAL_GetTick+0x8>)
 8001b26:	6818      	ldr	r0, [r3, #0]
}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000b5c 	.word	0x20000b5c

08001b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff fff6 	bl	8001b24 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b38:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001b3a:	bf1c      	itt	ne
 8001b3c:	4b05      	ldrne	r3, [pc, #20]	; (8001b54 <HAL_Delay+0x24>)
 8001b3e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001b42:	bf18      	it	ne
 8001b44:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b46:	f7ff ffed 	bl	8001b24 <HAL_GetTick>
 8001b4a:	1b43      	subs	r3, r0, r5
 8001b4c:	42a3      	cmp	r3, r4
 8001b4e:	d3fa      	bcc.n	8001b46 <HAL_Delay+0x16>
  {
  }
}
 8001b50:	bd38      	pop	{r3, r4, r5, pc}
 8001b52:	bf00      	nop
 8001b54:	20000084 	.word	0x20000084

08001b58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b5a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b68:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001b74:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7e:	b530      	push	{r4, r5, lr}
 8001b80:	68dc      	ldr	r4, [r3, #12]
 8001b82:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b86:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	2d04      	cmp	r5, #4
 8001b8e:	bf28      	it	cs
 8001b90:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b98:	bf8c      	ite	hi
 8001b9a:	3c03      	subhi	r4, #3
 8001b9c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9e:	fa03 f505 	lsl.w	r5, r3, r5
 8001ba2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba6:	40a3      	lsls	r3, r4
 8001ba8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001bae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	bfac      	ite	ge
 8001bb6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	4a08      	ldrlt	r2, [pc, #32]	; (8001bdc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	bfb8      	it	lt
 8001bc2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	bfaa      	itet	ge
 8001bca:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001bd4:	bd30      	pop	{r4, r5, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00
 8001bdc:	e000ed14 	.word	0xe000ed14

08001be0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001be0:	2800      	cmp	r0, #0
 8001be2:	db08      	blt.n	8001bf6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be4:	2301      	movs	r3, #1
 8001be6:	0942      	lsrs	r2, r0, #5
 8001be8:	f000 001f 	and.w	r0, r0, #31
 8001bec:	fa03 f000 	lsl.w	r0, r3, r0
 8001bf0:	4b01      	ldr	r3, [pc, #4]	; (8001bf8 <HAL_NVIC_EnableIRQ+0x18>)
 8001bf2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	3801      	subs	r0, #1
 8001bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001c02:	d20b      	bcs.n	8001c1c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	21f0      	movs	r1, #240	; 0xf0
 8001c0e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c12:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c14:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c16:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c18:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c1c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c24:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c26:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001c2a:	2a02      	cmp	r2, #2
 8001c2c:	d003      	beq.n	8001c36 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c2e:	2204      	movs	r2, #4
 8001c30:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001c32:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001c34:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c36:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8001c38:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3a:	6811      	ldr	r1, [r2, #0]
 8001c3c:	f021 010e 	bic.w	r1, r1, #14
 8001c40:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c42:	6811      	ldr	r1, [r2, #0]
 8001c44:	f021 0101 	bic.w	r1, r1, #1
 8001c48:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c4a:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8001c4e:	2101      	movs	r1, #1
 8001c50:	f002 021c 	and.w	r2, r2, #28
 8001c54:	fa01 f202 	lsl.w	r2, r1, r2
 8001c58:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001c5a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001c5c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001c60:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001c64:	b113      	cbz	r3, 8001c6c <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8001c66:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	4620      	mov	r0, r4
 8001c6a:	e7e3      	b.n	8001c34 <HAL_DMA_Abort_IT+0x10>
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	e7e1      	b.n	8001c34 <HAL_DMA_Abort_IT+0x10>

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c74:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001e28 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c78:	4c69      	ldr	r4, [pc, #420]	; (8001e20 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7c:	680a      	ldr	r2, [r1, #0]
 8001c7e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001c82:	d102      	bne.n	8001c8a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001c84:	b003      	add	sp, #12
 8001c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c8a:	f04f 0e01 	mov.w	lr, #1
 8001c8e:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001c92:	ea1e 0202 	ands.w	r2, lr, r2
 8001c96:	f000 8090 	beq.w	8001dba <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c9a:	684d      	ldr	r5, [r1, #4]
 8001c9c:	f005 0603 	and.w	r6, r5, #3
 8001ca0:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ca4:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca8:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001caa:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cae:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cb0:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb4:	f200 8083 	bhi.w	8001dbe <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001cb8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cba:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cbe:	68cf      	ldr	r7, [r1, #12]
 8001cc0:	fa07 f708 	lsl.w	r7, r7, r8
 8001cc4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001cc8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001cca:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ccc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001cd4:	409f      	lsls	r7, r3
 8001cd6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001cda:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001cdc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cde:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce2:	688f      	ldr	r7, [r1, #8]
 8001ce4:	fa07 f708 	lsl.w	r7, r7, r8
 8001ce8:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cec:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8001cee:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf0:	d071      	beq.n	8001dd6 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8001cf2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf4:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cf8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cfc:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cfe:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001d02:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d04:	d059      	beq.n	8001dba <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001d0a:	f046 0601 	orr.w	r6, r6, #1
 8001d0e:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001d12:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001d16:	f023 0703 	bic.w	r7, r3, #3
 8001d1a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001d1e:	f006 0601 	and.w	r6, r6, #1
 8001d22:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001d26:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d28:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d2e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d30:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001d34:	f04f 0c0f 	mov.w	ip, #15
 8001d38:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d3c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d40:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d44:	d05f      	beq.n	8001e06 <HAL_GPIO_Init+0x196>
 8001d46:	4e37      	ldr	r6, [pc, #220]	; (8001e24 <HAL_GPIO_Init+0x1b4>)
 8001d48:	42b0      	cmp	r0, r6
 8001d4a:	d05e      	beq.n	8001e0a <HAL_GPIO_Init+0x19a>
 8001d4c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d50:	42b0      	cmp	r0, r6
 8001d52:	d05c      	beq.n	8001e0e <HAL_GPIO_Init+0x19e>
 8001d54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d58:	42b0      	cmp	r0, r6
 8001d5a:	d05a      	beq.n	8001e12 <HAL_GPIO_Init+0x1a2>
 8001d5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d60:	42b0      	cmp	r0, r6
 8001d62:	d058      	beq.n	8001e16 <HAL_GPIO_Init+0x1a6>
 8001d64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d68:	42b0      	cmp	r0, r6
 8001d6a:	d056      	beq.n	8001e1a <HAL_GPIO_Init+0x1aa>
 8001d6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d70:	42b0      	cmp	r0, r6
 8001d72:	bf0c      	ite	eq
 8001d74:	2606      	moveq	r6, #6
 8001d76:	2607      	movne	r6, #7
 8001d78:	fa06 f60e 	lsl.w	r6, r6, lr
 8001d7c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d80:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001d82:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001d84:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d86:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001d8a:	bf0c      	ite	eq
 8001d8c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001d8e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001d90:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001d92:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d94:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001d98:	bf0c      	ite	eq
 8001d9a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001d9c:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001d9e:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001da0:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da2:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001da6:	bf0c      	ite	eq
 8001da8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001daa:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001dac:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001dae:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001db0:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001db2:	bf54      	ite	pl
 8001db4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001db6:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001db8:	6026      	str	r6, [r4, #0]
    position++;
 8001dba:	3301      	adds	r3, #1
 8001dbc:	e75e      	b.n	8001c7c <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dbe:	2e03      	cmp	r6, #3
 8001dc0:	d18c      	bne.n	8001cdc <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001dc2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dc4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001dc8:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001dcc:	409f      	lsls	r7, r3
 8001dce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8001dd2:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd4:	e78d      	b.n	8001cf2 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001dd6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001dda:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dde:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001de2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001dea:	f04f 0e0f 	mov.w	lr, #15
 8001dee:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001df2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001df6:	690f      	ldr	r7, [r1, #16]
 8001df8:	fa07 f70b 	lsl.w	r7, r7, fp
 8001dfc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001e00:	f8ca 7020 	str.w	r7, [sl, #32]
 8001e04:	e775      	b.n	8001cf2 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e06:	2600      	movs	r6, #0
 8001e08:	e7b6      	b.n	8001d78 <HAL_GPIO_Init+0x108>
 8001e0a:	2601      	movs	r6, #1
 8001e0c:	e7b4      	b.n	8001d78 <HAL_GPIO_Init+0x108>
 8001e0e:	2602      	movs	r6, #2
 8001e10:	e7b2      	b.n	8001d78 <HAL_GPIO_Init+0x108>
 8001e12:	2603      	movs	r6, #3
 8001e14:	e7b0      	b.n	8001d78 <HAL_GPIO_Init+0x108>
 8001e16:	2604      	movs	r6, #4
 8001e18:	e7ae      	b.n	8001d78 <HAL_GPIO_Init+0x108>
 8001e1a:	2605      	movs	r6, #5
 8001e1c:	e7ac      	b.n	8001d78 <HAL_GPIO_Init+0x108>
 8001e1e:	bf00      	nop
 8001e20:	40010400 	.word	0x40010400
 8001e24:	48000400 	.word	0x48000400
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e2c:	6903      	ldr	r3, [r0, #16]
 8001e2e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001e30:	bf14      	ite	ne
 8001e32:	2001      	movne	r0, #1
 8001e34:	2000      	moveq	r0, #0
 8001e36:	4770      	bx	lr

08001e38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e38:	b10a      	cbz	r2, 8001e3e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e3a:	6181      	str	r1, [r0, #24]
 8001e3c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001e46:	6951      	ldr	r1, [r2, #20]
 8001e48:	4201      	tst	r1, r0
{
 8001e4a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e4c:	d002      	beq.n	8001e54 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e50:	f7fe fcf6 	bl	8000840 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e54:	bd08      	pop	{r3, pc}
 8001e56:	bf00      	nop
 8001e58:	40010400 	.word	0x40010400

08001e5c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e5c:	6803      	ldr	r3, [r0, #0]
 8001e5e:	699a      	ldr	r2, [r3, #24]
 8001e60:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e62:	bf44      	itt	mi
 8001e64:	2200      	movmi	r2, #0
 8001e66:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e6c:	bf5e      	ittt	pl
 8001e6e:	699a      	ldrpl	r2, [r3, #24]
 8001e70:	f042 0201 	orrpl.w	r2, r2, #1
 8001e74:	619a      	strpl	r2, [r3, #24]
  }
}
 8001e76:	4770      	bx	lr

08001e78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e78:	b530      	push	{r4, r5, lr}
 8001e7a:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e7c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e7e:	432b      	orrs	r3, r5
 8001e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <I2C_TransferConfig+0x28>)
 8001e86:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e88:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001e8c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e8e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e96:	ea20 0002 	bic.w	r0, r0, r2
 8001e9a:	4303      	orrs	r3, r0
 8001e9c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e9e:	bd30      	pop	{r4, r5, pc}
 8001ea0:	03ff63ff 	.word	0x03ff63ff

08001ea4 <I2C_IsErrorOccurred>:
{
 8001ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ea8:	6803      	ldr	r3, [r0, #0]
 8001eaa:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001eac:	f014 0410 	ands.w	r4, r4, #16
{
 8001eb0:	4605      	mov	r5, r0
 8001eb2:	4688      	mov	r8, r1
 8001eb4:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001eb6:	d079      	beq.n	8001fac <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb8:	2210      	movs	r2, #16
 8001eba:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001ebc:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ec2:	682b      	ldr	r3, [r5, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	0694      	lsls	r4, r2, #26
 8001ec8:	d436      	bmi.n	8001f38 <I2C_IsErrorOccurred+0x94>
 8001eca:	b10e      	cbz	r6, 8001ed0 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8001ecc:	2404      	movs	r4, #4
 8001ece:	e039      	b.n	8001f44 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8001ed0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001ed4:	d0f6      	beq.n	8001ec4 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ed6:	f7ff fe25 	bl	8001b24 <HAL_GetTick>
 8001eda:	1bc0      	subs	r0, r0, r7
 8001edc:	4540      	cmp	r0, r8
 8001ede:	d802      	bhi.n	8001ee6 <I2C_IsErrorOccurred+0x42>
 8001ee0:	f1b8 0f00 	cmp.w	r8, #0
 8001ee4:	d1ed      	bne.n	8001ec2 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ee6:	682b      	ldr	r3, [r5, #0]
 8001ee8:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8001eea:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001eee:	6998      	ldr	r0, [r3, #24]
 8001ef0:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 8001ef2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ef4:	d50a      	bpl.n	8001f0c <I2C_IsErrorOccurred+0x68>
 8001ef6:	0449      	lsls	r1, r1, #17
 8001ef8:	d408      	bmi.n	8001f0c <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8001efa:	2a20      	cmp	r2, #32
 8001efc:	d006      	beq.n	8001f0c <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f04:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001f06:	f7ff fe0d 	bl	8001b24 <HAL_GetTick>
 8001f0a:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f0c:	682b      	ldr	r3, [r5, #0]
 8001f0e:	699c      	ldr	r4, [r3, #24]
 8001f10:	f014 0420 	ands.w	r4, r4, #32
 8001f14:	d1d5      	bne.n	8001ec2 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f16:	f7ff fe05 	bl	8001b24 <HAL_GetTick>
 8001f1a:	1bc0      	subs	r0, r0, r7
 8001f1c:	2819      	cmp	r0, #25
 8001f1e:	d9f5      	bls.n	8001f0c <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f20:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 8001f22:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8001f2c:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8001f2e:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f32:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8001f36:	e7e9      	b.n	8001f0c <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8001f38:	2e00      	cmp	r6, #0
 8001f3a:	d1c7      	bne.n	8001ecc <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001f40:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8001f42:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f48:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f4a:	bf41      	itttt	mi
 8001f4c:	f44f 7180 	movmi.w	r1, #256	; 0x100
 8001f50:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001f52:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 8001f56:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f58:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f5a:	bf41      	itttt	mi
 8001f5c:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8001f60:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f64:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 8001f66:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f68:	0592      	lsls	r2, r2, #22
 8001f6a:	d521      	bpl.n	8001fb0 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f70:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f74:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001f76:	4628      	mov	r0, r5
 8001f78:	f7ff ff70 	bl	8001e5c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001f7c:	682a      	ldr	r2, [r5, #0]
 8001f7e:	6853      	ldr	r3, [r2, #4]
 8001f80:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001f84:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001f88:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001f92:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001f94:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8001f98:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001fa4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8001fa8:	2601      	movs	r6, #1
 8001faa:	e003      	b.n	8001fb4 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8001fac:	4626      	mov	r6, r4
 8001fae:	e7c9      	b.n	8001f44 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8001fb0:	2e00      	cmp	r6, #0
 8001fb2:	d1e0      	bne.n	8001f76 <I2C_IsErrorOccurred+0xd2>
}
 8001fb4:	4630      	mov	r0, r6
 8001fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001fba <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001fba:	b570      	push	{r4, r5, r6, lr}
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	460d      	mov	r5, r1
 8001fc0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	079b      	lsls	r3, r3, #30
 8001fc8:	d501      	bpl.n	8001fce <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001fca:	2000      	movs	r0, #0
}
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fce:	4632      	mov	r2, r6
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7ff ff66 	bl	8001ea4 <I2C_IsErrorOccurred>
 8001fd8:	b9a0      	cbnz	r0, 8002004 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	1c6a      	adds	r2, r5, #1
 8001fdc:	d0f1      	beq.n	8001fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fde:	f7ff fda1 	bl	8001b24 <HAL_GetTick>
 8001fe2:	1b80      	subs	r0, r0, r6
 8001fe4:	42a8      	cmp	r0, r5
 8001fe6:	d801      	bhi.n	8001fec <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001fe8:	2d00      	cmp	r5, #0
 8001fea:	d1ea      	bne.n	8001fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002000:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002004:	2001      	movs	r0, #1
 8002006:	e7e1      	b.n	8001fcc <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08002008 <I2C_WaitOnFlagUntilTimeout>:
{
 8002008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800200c:	9f06      	ldr	r7, [sp, #24]
 800200e:	4604      	mov	r4, r0
 8002010:	4688      	mov	r8, r1
 8002012:	4616      	mov	r6, r2
 8002014:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002016:	6822      	ldr	r2, [r4, #0]
 8002018:	6993      	ldr	r3, [r2, #24]
 800201a:	ea38 0303 	bics.w	r3, r8, r3
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	42b3      	cmp	r3, r6
 8002026:	d001      	beq.n	800202c <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8002028:	2000      	movs	r0, #0
 800202a:	e015      	b.n	8002058 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800202c:	1c6b      	adds	r3, r5, #1
 800202e:	d0f3      	beq.n	8002018 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002030:	f7ff fd78 	bl	8001b24 <HAL_GetTick>
 8002034:	1bc0      	subs	r0, r0, r7
 8002036:	42a8      	cmp	r0, r5
 8002038:	d801      	bhi.n	800203e <I2C_WaitOnFlagUntilTimeout+0x36>
 800203a:	2d00      	cmp	r5, #0
 800203c:	d1eb      	bne.n	8002016 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800203e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002046:	2320      	movs	r3, #32
 8002048:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	2300      	movs	r3, #0
 800204e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002052:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002056:	2001      	movs	r0, #1
}
 8002058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800205c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	4604      	mov	r4, r0
 8002060:	460d      	mov	r5, r1
 8002062:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	069b      	lsls	r3, r3, #26
 800206a:	d501      	bpl.n	8002070 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800206c:	2000      	movs	r0, #0
}
 800206e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002070:	4632      	mov	r2, r6
 8002072:	4629      	mov	r1, r5
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff15 	bl	8001ea4 <I2C_IsErrorOccurred>
 800207a:	b990      	cbnz	r0, 80020a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207c:	f7ff fd52 	bl	8001b24 <HAL_GetTick>
 8002080:	1b80      	subs	r0, r0, r6
 8002082:	42a8      	cmp	r0, r5
 8002084:	d801      	bhi.n	800208a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002086:	2d00      	cmp	r5, #0
 8002088:	d1ec      	bne.n	8002064 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800208c:	f043 0320 	orr.w	r3, r3, #32
 8002090:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002092:	2320      	movs	r3, #32
 8002094:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002098:	2300      	movs	r3, #0
 800209a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800209e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80020a2:	2001      	movs	r0, #1
 80020a4:	e7e3      	b.n	800206e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080020a6 <HAL_I2C_MspInit>:
}
 80020a6:	4770      	bx	lr

080020a8 <HAL_I2C_Init>:
{
 80020a8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80020aa:	4604      	mov	r4, r0
 80020ac:	2800      	cmp	r0, #0
 80020ae:	d04a      	beq.n	8002146 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80020b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020b8:	b91b      	cbnz	r3, 80020c2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80020ba:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80020be:	f7ff fff2 	bl	80020a6 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80020c2:	2324      	movs	r3, #36	; 0x24
 80020c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020d2:	6862      	ldr	r2, [r4, #4]
 80020d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020e0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020e2:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020e6:	2901      	cmp	r1, #1
 80020e8:	d124      	bne.n	8002134 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ee:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80020f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020fa:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002102:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002104:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8002108:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800210a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800210c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002110:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002112:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002122:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002124:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002126:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002128:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800212c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800212e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002132:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002134:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002138:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800213a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800213c:	bf04      	itt	eq
 800213e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002142:	605a      	streq	r2, [r3, #4]
 8002144:	e7d4      	b.n	80020f0 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002146:	2001      	movs	r0, #1
 8002148:	e7f3      	b.n	8002132 <HAL_I2C_Init+0x8a>

0800214a <HAL_I2C_MspDeInit>:
 800214a:	4770      	bx	lr

0800214c <HAL_I2C_DeInit>:
{
 800214c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800214e:	4604      	mov	r4, r0
 8002150:	b198      	cbz	r0, 800217a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8002152:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	2324      	movs	r3, #36	; 0x24
 8002156:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002162:	f7ff fff2 	bl	800214a <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002166:	2000      	movs	r0, #0
 8002168:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800216a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800216e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002178:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800217a:	2001      	movs	r0, #1
 800217c:	e7fc      	b.n	8002178 <HAL_I2C_DeInit+0x2c>
	...

08002180 <HAL_I2C_Mem_Write>:
{
 8002180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002184:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002186:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800218a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800218e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002192:	2b20      	cmp	r3, #32
{
 8002194:	4604      	mov	r4, r0
 8002196:	460f      	mov	r7, r1
 8002198:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800219a:	f040 80c6 	bne.w	800232a <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800219e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021a0:	b113      	cbz	r3, 80021a8 <HAL_I2C_Mem_Write+0x28>
 80021a2:	f1ba 0f00 	cmp.w	sl, #0
 80021a6:	d106      	bne.n	80021b6 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ac:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
}
 80021b0:	b003      	add	sp, #12
 80021b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80021b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f000 80b5 	beq.w	800232a <HAL_I2C_Mem_Write+0x1aa>
 80021c0:	f04f 0b01 	mov.w	fp, #1
 80021c4:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80021c8:	f7ff fcac 	bl	8001b24 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021cc:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80021ce:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021d0:	9000      	str	r0, [sp, #0]
 80021d2:	465a      	mov	r2, fp
 80021d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff ff15 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d1e5      	bne.n	80021ae <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021e2:	2321      	movs	r3, #33	; 0x21
 80021e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021e8:	2340      	movs	r3, #64	; 0x40
 80021ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80021ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021f0:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021f2:	4b4f      	ldr	r3, [pc, #316]	; (8002330 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 80021f6:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	fa5f f289 	uxtb.w	r2, r9
 80021fe:	4639      	mov	r1, r7
 8002200:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 8002202:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800220a:	f7ff fe35 	bl	8001e78 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800220e:	462a      	mov	r2, r5
 8002210:	4641      	mov	r1, r8
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff fed1 	bl	8001fba <I2C_WaitOnTXISFlagUntilTimeout>
 8002218:	bb18      	cbnz	r0, 8002262 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800221a:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800221e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002220:	d115      	bne.n	800224e <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002222:	b2f6      	uxtb	r6, r6
 8002224:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002226:	2200      	movs	r2, #0
 8002228:	9500      	str	r5, [sp, #0]
 800222a:	4643      	mov	r3, r8
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff feea 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8002234:	b9a8      	cbnz	r0, 8002262 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002236:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	2bff      	cmp	r3, #255	; 0xff
 800223c:	d815      	bhi.n	800226a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800223e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002240:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002242:	b292      	uxth	r2, r2
 8002244:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	e012      	b.n	8002274 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800224e:	0a32      	lsrs	r2, r6, #8
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002252:	4641      	mov	r1, r8
 8002254:	462a      	mov	r2, r5
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff feaf 	bl	8001fba <I2C_WaitOnTXISFlagUntilTimeout>
 800225c:	b908      	cbnz	r0, 8002262 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	e7df      	b.n	8002222 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8002262:	2300      	movs	r3, #0
 8002264:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002268:	e7a1      	b.n	80021ae <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800226e:	9000      	str	r0, [sp, #0]
 8002270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002274:	4639      	mov	r1, r7
 8002276:	4620      	mov	r0, r4
 8002278:	f7ff fdfe 	bl	8001e78 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227c:	462a      	mov	r2, r5
 800227e:	4641      	mov	r1, r8
 8002280:	4620      	mov	r0, r4
 8002282:	f7ff fe9a 	bl	8001fba <I2C_WaitOnTXISFlagUntilTimeout>
 8002286:	2800      	cmp	r0, #0
 8002288:	d191      	bne.n	80021ae <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800228a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002292:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002294:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002296:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002298:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800229a:	3b01      	subs	r3, #1
 800229c:	b29b      	uxth	r3, r3
 800229e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80022a2:	3a01      	subs	r2, #1
 80022a4:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022a6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80022a8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022aa:	b1b3      	cbz	r3, 80022da <HAL_I2C_Mem_Write+0x15a>
 80022ac:	b9aa      	cbnz	r2, 80022da <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ae:	9500      	str	r5, [sp, #0]
 80022b0:	4643      	mov	r3, r8
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff fea7 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 80022ba:	2800      	cmp	r0, #0
 80022bc:	f47f af77 	bne.w	80021ae <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2bff      	cmp	r3, #255	; 0xff
 80022c6:	d928      	bls.n	800231a <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c8:	22ff      	movs	r2, #255	; 0xff
 80022ca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022cc:	9000      	str	r0, [sp, #0]
 80022ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022d2:	4639      	mov	r1, r7
 80022d4:	4620      	mov	r0, r4
 80022d6:	f7ff fdcf 	bl	8001e78 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80022da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1cc      	bne.n	800227c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e2:	462a      	mov	r2, r5
 80022e4:	4641      	mov	r1, r8
 80022e6:	4620      	mov	r0, r4
 80022e8:	f7ff feb8 	bl	800205c <I2C_WaitOnSTOPFlagUntilTimeout>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	f47f af5e 	bne.w	80021ae <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	2120      	movs	r1, #32
 80022f6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80022fe:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002302:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800230c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002310:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002314:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002318:	e74a      	b.n	80021b0 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800231a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800231c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800231e:	b292      	uxth	r2, r2
 8002320:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	e7d3      	b.n	80022d2 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 800232a:	2002      	movs	r0, #2
 800232c:	e740      	b.n	80021b0 <HAL_I2C_Mem_Write+0x30>
 800232e:	bf00      	nop
 8002330:	80002000 	.word	0x80002000

08002334 <HAL_I2C_Mem_Read>:
{
 8002334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002338:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800233a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800233e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002342:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002346:	2b20      	cmp	r3, #32
{
 8002348:	4604      	mov	r4, r0
 800234a:	460f      	mov	r7, r1
 800234c:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800234e:	f040 80c9 	bne.w	80024e4 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8002352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002354:	b113      	cbz	r3, 800235c <HAL_I2C_Mem_Read+0x28>
 8002356:	f1ba 0f00 	cmp.w	sl, #0
 800235a:	d106      	bne.n	800236a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800235c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002360:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002362:	2001      	movs	r0, #1
}
 8002364:	b003      	add	sp, #12
 8002366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800236a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800236e:	2b01      	cmp	r3, #1
 8002370:	f000 80b8 	beq.w	80024e4 <HAL_I2C_Mem_Read+0x1b0>
 8002374:	f04f 0b01 	mov.w	fp, #1
 8002378:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800237c:	f7ff fbd2 	bl	8001b24 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002380:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002382:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002384:	9000      	str	r0, [sp, #0]
 8002386:	465a      	mov	r2, fp
 8002388:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff fe3b 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8002392:	2800      	cmp	r0, #0
 8002394:	d1e5      	bne.n	8002362 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002396:	2322      	movs	r3, #34	; 0x22
 8002398:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800239c:	2340      	movs	r3, #64	; 0x40
 800239e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80023a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80023a4:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023a6:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 80023aa:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	fa5f f289 	uxtb.w	r2, r9
 80023b2:	4603      	mov	r3, r0
 80023b4:	4639      	mov	r1, r7
 80023b6:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 80023b8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023bc:	f7ff fd5c 	bl	8001e78 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c0:	462a      	mov	r2, r5
 80023c2:	4641      	mov	r1, r8
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7ff fdf8 	bl	8001fba <I2C_WaitOnTXISFlagUntilTimeout>
 80023ca:	bb20      	cbnz	r0, 8002416 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023cc:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023d0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023d2:	d116      	bne.n	8002402 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023d4:	b2f6      	uxtb	r6, r6
 80023d6:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80023d8:	2200      	movs	r2, #0
 80023da:	9500      	str	r5, [sp, #0]
 80023dc:	4643      	mov	r3, r8
 80023de:	2140      	movs	r1, #64	; 0x40
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff fe11 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 80023e6:	b9b0      	cbnz	r0, 8002416 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2bff      	cmp	r3, #255	; 0xff
 80023ee:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <HAL_I2C_Mem_Read+0x1b8>)
 80023f0:	d815      	bhi.n	800241e <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80023f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023f4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80023f6:	b292      	uxth	r2, r2
 80023f8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	e012      	b.n	8002428 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002402:	0a32      	lsrs	r2, r6, #8
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002406:	4641      	mov	r1, r8
 8002408:	462a      	mov	r2, r5
 800240a:	4620      	mov	r0, r4
 800240c:	f7ff fdd5 	bl	8001fba <I2C_WaitOnTXISFlagUntilTimeout>
 8002410:	b908      	cbnz	r0, 8002416 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	e7de      	b.n	80023d4 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8002416:	2300      	movs	r3, #0
 8002418:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800241c:	e7a1      	b.n	8002362 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800241e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002420:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002422:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002428:	4639      	mov	r1, r7
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff fd24 	bl	8001e78 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002430:	9500      	str	r5, [sp, #0]
 8002432:	4643      	mov	r3, r8
 8002434:	2200      	movs	r2, #0
 8002436:	2104      	movs	r1, #4
 8002438:	4620      	mov	r0, r4
 800243a:	f7ff fde5 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 800243e:	2800      	cmp	r0, #0
 8002440:	d18f      	bne.n	8002362 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002448:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800244a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800244c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800244e:	3301      	adds	r3, #1
 8002450:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002452:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002454:	3b01      	subs	r3, #1
 8002456:	b29b      	uxth	r3, r3
 8002458:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800245a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800245c:	3a01      	subs	r2, #1
 800245e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002460:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002462:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002464:	b1b3      	cbz	r3, 8002494 <HAL_I2C_Mem_Read+0x160>
 8002466:	b9aa      	cbnz	r2, 8002494 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002468:	9500      	str	r5, [sp, #0]
 800246a:	4643      	mov	r3, r8
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff fdca 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8002474:	2800      	cmp	r0, #0
 8002476:	f47f af74 	bne.w	8002362 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800247a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	2bff      	cmp	r3, #255	; 0xff
 8002480:	d928      	bls.n	80024d4 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002482:	22ff      	movs	r2, #255	; 0xff
 8002484:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002486:	9000      	str	r0, [sp, #0]
 8002488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800248c:	4639      	mov	r1, r7
 800248e:	4620      	mov	r0, r4
 8002490:	f7ff fcf2 	bl	8001e78 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002494:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1c9      	bne.n	8002430 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	462a      	mov	r2, r5
 800249e:	4641      	mov	r1, r8
 80024a0:	4620      	mov	r0, r4
 80024a2:	f7ff fddb 	bl	800205c <I2C_WaitOnSTOPFlagUntilTimeout>
 80024a6:	2800      	cmp	r0, #0
 80024a8:	f47f af5b 	bne.w	8002362 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	2120      	movs	r1, #32
 80024b0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80024b8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80024bc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80024ca:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ce:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80024d2:	e747      	b.n	8002364 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80024d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024d6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80024d8:	b292      	uxth	r2, r2
 80024da:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	e7d3      	b.n	800248c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 80024e4:	2002      	movs	r0, #2
 80024e6:	e73d      	b.n	8002364 <HAL_I2C_Mem_Read+0x30>
 80024e8:	80002000 	.word	0x80002000
 80024ec:	80002400 	.word	0x80002400

080024f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024f0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	b2dc      	uxtb	r4, r3
 80024fa:	d11d      	bne.n	8002538 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002500:	2b01      	cmp	r3, #1
 8002502:	d019      	beq.n	8002538 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	2324      	movs	r3, #36	; 0x24
 8002506:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800250a:	6803      	ldr	r3, [r0, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800251a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4311      	orrs	r1, r2
 8002520:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800252a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002530:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002534:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002536:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002538:	2002      	movs	r0, #2
 800253a:	e7fc      	b.n	8002536 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800253c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800253c:	4b02      	ldr	r3, [pc, #8]	; (8002548 <HAL_PWREx_GetVoltageRange+0xc>)
 800253e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002540:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40007000 	.word	0x40007000

0800254c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800254c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800254e:	4d1e      	ldr	r5, [pc, #120]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002550:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002552:	00da      	lsls	r2, r3, #3
{
 8002554:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002556:	d518      	bpl.n	800258a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002558:	f7ff fff0 	bl	800253c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002560:	d123      	bne.n	80025aa <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002562:	2c80      	cmp	r4, #128	; 0x80
 8002564:	d929      	bls.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002566:	2ca0      	cmp	r4, #160	; 0xa0
 8002568:	bf8c      	ite	hi
 800256a:	2002      	movhi	r0, #2
 800256c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002570:	6813      	ldr	r3, [r2, #0]
 8002572:	f023 0307 	bic.w	r3, r3, #7
 8002576:	4303      	orrs	r3, r0
 8002578:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002580:	1a18      	subs	r0, r3, r0
 8002582:	bf18      	it	ne
 8002584:	2001      	movne	r0, #1
 8002586:	b003      	add	sp, #12
 8002588:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	65ab      	str	r3, [r5, #88]	; 0x58
 8002592:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800259c:	f7ff ffce 	bl	800253c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80025a0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80025a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a6:	65ab      	str	r3, [r5, #88]	; 0x58
 80025a8:	e7d8      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80025aa:	2c80      	cmp	r4, #128	; 0x80
 80025ac:	d807      	bhi.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80025ae:	d008      	beq.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80025b0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80025b4:	4258      	negs	r0, r3
 80025b6:	4158      	adcs	r0, r3
 80025b8:	e7d9      	b.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025ba:	2000      	movs	r0, #0
 80025bc:	e7d7      	b.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80025be:	2003      	movs	r0, #3
 80025c0:	e7d5      	b.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80025c2:	2002      	movs	r0, #2
 80025c4:	e7d3      	b.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40022000 	.word	0x40022000

080025d0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_RCC_GetSysClockFreq+0x8c>)
 80025d2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025d6:	f012 020c 	ands.w	r2, r2, #12
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x18>
 80025dc:	2a0c      	cmp	r2, #12
 80025de:	d115      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025e4:	2901      	cmp	r1, #1
 80025e6:	d118      	bne.n	800261a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025e8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80025ea:	481d      	ldr	r0, [pc, #116]	; (8002660 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025ec:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025ee:	bf55      	itete	pl
 80025f0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025f4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025f6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025fa:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80025fe:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002602:	b34a      	cbz	r2, 8002658 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002604:	2a0c      	cmp	r2, #12
 8002606:	d009      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x4c>
 8002608:	2000      	movs	r0, #0
  return sysclockfreq;
 800260a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800260c:	2a04      	cmp	r2, #4
 800260e:	d022      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002610:	2a08      	cmp	r2, #8
 8002612:	4814      	ldr	r0, [pc, #80]	; (8002664 <HAL_RCC_GetSysClockFreq+0x94>)
 8002614:	bf18      	it	ne
 8002616:	2000      	movne	r0, #0
 8002618:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800261a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002622:	2a02      	cmp	r2, #2
 8002624:	d015      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0x82>
 8002626:	490f      	ldr	r1, [pc, #60]	; (8002664 <HAL_RCC_GetSysClockFreq+0x94>)
 8002628:	2a03      	cmp	r2, #3
 800262a:	bf08      	it	eq
 800262c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800262e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002636:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002638:	68d8      	ldr	r0, [r3, #12]
 800263a:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800263e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002642:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002644:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002646:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002648:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800264c:	fbb2 f0f0 	udiv	r0, r2, r0
 8002650:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <HAL_RCC_GetSysClockFreq+0x98>)
 8002654:	e7eb      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002656:	4804      	ldr	r0, [pc, #16]	; (8002668 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	08005c68 	.word	0x08005c68
 8002664:	007a1200 	.word	0x007a1200
 8002668:	00f42400 	.word	0x00f42400

0800266c <HAL_RCC_OscConfig>:
{
 800266c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002670:	4605      	mov	r5, r0
 8002672:	b918      	cbnz	r0, 800267c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002674:	2001      	movs	r0, #1
}
 8002676:	b003      	add	sp, #12
 8002678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267c:	4c92      	ldr	r4, [pc, #584]	; (80028c8 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800267e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002680:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002682:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002684:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002686:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800268e:	d53d      	bpl.n	800270c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002690:	b11e      	cbz	r6, 800269a <HAL_RCC_OscConfig+0x2e>
 8002692:	2e0c      	cmp	r6, #12
 8002694:	d166      	bne.n	8002764 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002696:	2f01      	cmp	r7, #1
 8002698:	d164      	bne.n	8002764 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	0798      	lsls	r0, r3, #30
 800269e:	d502      	bpl.n	80026a6 <HAL_RCC_OscConfig+0x3a>
 80026a0:	69ab      	ldr	r3, [r5, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0e6      	beq.n	8002674 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	6a28      	ldr	r0, [r5, #32]
 80026aa:	0719      	lsls	r1, r3, #28
 80026ac:	bf56      	itet	pl
 80026ae:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80026b2:	6823      	ldrmi	r3, [r4, #0]
 80026b4:	091b      	lsrpl	r3, r3, #4
 80026b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ba:	4298      	cmp	r0, r3
 80026bc:	d93b      	bls.n	8002736 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026be:	f7ff ff45 	bl	800254c <RCC_SetFlashLatencyFromMSIRange>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d1d6      	bne.n	8002674 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	6023      	str	r3, [r4, #0]
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	6a2a      	ldr	r2, [r5, #32]
 80026d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026d6:	4313      	orrs	r3, r2
 80026d8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026da:	6863      	ldr	r3, [r4, #4]
 80026dc:	69ea      	ldr	r2, [r5, #28]
 80026de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026e6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e8:	f7ff ff72 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 80026ec:	68a3      	ldr	r3, [r4, #8]
 80026ee:	4a77      	ldr	r2, [pc, #476]	; (80028cc <HAL_RCC_OscConfig+0x260>)
 80026f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026f4:	5cd3      	ldrb	r3, [r2, r3]
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	40d8      	lsrs	r0, r3
 80026fc:	4b74      	ldr	r3, [pc, #464]	; (80028d0 <HAL_RCC_OscConfig+0x264>)
 80026fe:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002700:	4b74      	ldr	r3, [pc, #464]	; (80028d4 <HAL_RCC_OscConfig+0x268>)
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	f7ff f9ce 	bl	8001aa4 <HAL_InitTick>
        if(status != HAL_OK)
 8002708:	2800      	cmp	r0, #0
 800270a:	d1b4      	bne.n	8002676 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	07d8      	lsls	r0, r3, #31
 8002710:	d45f      	bmi.n	80027d2 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	682b      	ldr	r3, [r5, #0]
 8002714:	0799      	lsls	r1, r3, #30
 8002716:	f100 809e 	bmi.w	8002856 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	682b      	ldr	r3, [r5, #0]
 800271c:	0718      	lsls	r0, r3, #28
 800271e:	f100 80db 	bmi.w	80028d8 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	0759      	lsls	r1, r3, #29
 8002726:	f100 8101 	bmi.w	800292c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800272a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 816a 	bne.w	8002a06 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002732:	2000      	movs	r0, #0
 8002734:	e79f      	b.n	8002676 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	6023      	str	r3, [r4, #0]
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002744:	4303      	orrs	r3, r0
 8002746:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002748:	6863      	ldr	r3, [r4, #4]
 800274a:	69ea      	ldr	r2, [r5, #28]
 800274c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002750:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002754:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002756:	2e00      	cmp	r6, #0
 8002758:	d1c6      	bne.n	80026e8 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275a:	f7ff fef7 	bl	800254c <RCC_SetFlashLatencyFromMSIRange>
 800275e:	2800      	cmp	r0, #0
 8002760:	d0c2      	beq.n	80026e8 <HAL_RCC_OscConfig+0x7c>
 8002762:	e787      	b.n	8002674 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002764:	69ab      	ldr	r3, [r5, #24]
 8002766:	b31b      	cbz	r3, 80027b0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002770:	f7ff f9d8 	bl	8001b24 <HAL_GetTick>
 8002774:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	079a      	lsls	r2, r3, #30
 800277a:	d511      	bpl.n	80027a0 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	6023      	str	r3, [r4, #0]
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	6a2a      	ldr	r2, [r5, #32]
 8002788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800278c:	4313      	orrs	r3, r2
 800278e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002790:	6863      	ldr	r3, [r4, #4]
 8002792:	69ea      	ldr	r2, [r5, #28]
 8002794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800279c:	6063      	str	r3, [r4, #4]
 800279e:	e7b5      	b.n	800270c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a0:	f7ff f9c0 	bl	8001b24 <HAL_GetTick>
 80027a4:	eba0 0008 	sub.w	r0, r0, r8
 80027a8:	2802      	cmp	r0, #2
 80027aa:	d9e4      	bls.n	8002776 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80027ac:	2003      	movs	r0, #3
 80027ae:	e762      	b.n	8002676 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027b8:	f7ff f9b4 	bl	8001b24 <HAL_GetTick>
 80027bc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	079b      	lsls	r3, r3, #30
 80027c2:	d5a3      	bpl.n	800270c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c4:	f7ff f9ae 	bl	8001b24 <HAL_GetTick>
 80027c8:	eba0 0008 	sub.w	r0, r0, r8
 80027cc:	2802      	cmp	r0, #2
 80027ce:	d9f6      	bls.n	80027be <HAL_RCC_OscConfig+0x152>
 80027d0:	e7ec      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027d2:	2e08      	cmp	r6, #8
 80027d4:	d003      	beq.n	80027de <HAL_RCC_OscConfig+0x172>
 80027d6:	2e0c      	cmp	r6, #12
 80027d8:	d108      	bne.n	80027ec <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027da:	2f03      	cmp	r7, #3
 80027dc:	d106      	bne.n	80027ec <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	039a      	lsls	r2, r3, #14
 80027e2:	d596      	bpl.n	8002712 <HAL_RCC_OscConfig+0xa6>
 80027e4:	686b      	ldr	r3, [r5, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d193      	bne.n	8002712 <HAL_RCC_OscConfig+0xa6>
 80027ea:	e743      	b.n	8002674 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ec:	686b      	ldr	r3, [r5, #4]
 80027ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f2:	d110      	bne.n	8002816 <HAL_RCC_OscConfig+0x1aa>
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027fc:	f7ff f992 	bl	8001b24 <HAL_GetTick>
 8002800:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	039b      	lsls	r3, r3, #14
 8002806:	d484      	bmi.n	8002712 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7ff f98c 	bl	8001b24 <HAL_GetTick>
 800280c:	eba0 0008 	sub.w	r0, r0, r8
 8002810:	2864      	cmp	r0, #100	; 0x64
 8002812:	d9f6      	bls.n	8002802 <HAL_RCC_OscConfig+0x196>
 8002814:	e7ca      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281a:	d104      	bne.n	8002826 <HAL_RCC_OscConfig+0x1ba>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002822:	6023      	str	r3, [r4, #0]
 8002824:	e7e6      	b.n	80027f4 <HAL_RCC_OscConfig+0x188>
 8002826:	6822      	ldr	r2, [r4, #0]
 8002828:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800282c:	6022      	str	r2, [r4, #0]
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002834:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e0      	bne.n	80027fc <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 800283a:	f7ff f973 	bl	8001b24 <HAL_GetTick>
 800283e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	0398      	lsls	r0, r3, #14
 8002844:	f57f af65 	bpl.w	8002712 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7ff f96c 	bl	8001b24 <HAL_GetTick>
 800284c:	eba0 0008 	sub.w	r0, r0, r8
 8002850:	2864      	cmp	r0, #100	; 0x64
 8002852:	d9f5      	bls.n	8002840 <HAL_RCC_OscConfig+0x1d4>
 8002854:	e7aa      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002856:	2e04      	cmp	r6, #4
 8002858:	d003      	beq.n	8002862 <HAL_RCC_OscConfig+0x1f6>
 800285a:	2e0c      	cmp	r6, #12
 800285c:	d110      	bne.n	8002880 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800285e:	2f02      	cmp	r7, #2
 8002860:	d10e      	bne.n	8002880 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	0559      	lsls	r1, r3, #21
 8002866:	d503      	bpl.n	8002870 <HAL_RCC_OscConfig+0x204>
 8002868:	68eb      	ldr	r3, [r5, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f43f af02 	beq.w	8002674 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	6863      	ldr	r3, [r4, #4]
 8002872:	692a      	ldr	r2, [r5, #16]
 8002874:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002878:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800287c:	6063      	str	r3, [r4, #4]
 800287e:	e74c      	b.n	800271a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002880:	68eb      	ldr	r3, [r5, #12]
 8002882:	b17b      	cbz	r3, 80028a4 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800288c:	f7ff f94a 	bl	8001b24 <HAL_GetTick>
 8002890:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	055a      	lsls	r2, r3, #21
 8002896:	d4eb      	bmi.n	8002870 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002898:	f7ff f944 	bl	8001b24 <HAL_GetTick>
 800289c:	1bc0      	subs	r0, r0, r7
 800289e:	2802      	cmp	r0, #2
 80028a0:	d9f7      	bls.n	8002892 <HAL_RCC_OscConfig+0x226>
 80028a2:	e783      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028ac:	f7ff f93a 	bl	8001b24 <HAL_GetTick>
 80028b0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	055b      	lsls	r3, r3, #21
 80028b6:	f57f af30 	bpl.w	800271a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ba:	f7ff f933 	bl	8001b24 <HAL_GetTick>
 80028be:	1bc0      	subs	r0, r0, r7
 80028c0:	2802      	cmp	r0, #2
 80028c2:	d9f6      	bls.n	80028b2 <HAL_RCC_OscConfig+0x246>
 80028c4:	e772      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08005c98 	.word	0x08005c98
 80028d0:	20000080 	.word	0x20000080
 80028d4:	20000088 	.word	0x20000088
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d8:	696b      	ldr	r3, [r5, #20]
 80028da:	b19b      	cbz	r3, 8002904 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80028dc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80028e8:	f7ff f91c 	bl	8001b24 <HAL_GetTick>
 80028ec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80028f2:	079a      	lsls	r2, r3, #30
 80028f4:	f53f af15 	bmi.w	8002722 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f8:	f7ff f914 	bl	8001b24 <HAL_GetTick>
 80028fc:	1bc0      	subs	r0, r0, r7
 80028fe:	2802      	cmp	r0, #2
 8002900:	d9f5      	bls.n	80028ee <HAL_RCC_OscConfig+0x282>
 8002902:	e753      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002904:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002910:	f7ff f908 	bl	8001b24 <HAL_GetTick>
 8002914:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002916:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800291a:	079b      	lsls	r3, r3, #30
 800291c:	f57f af01 	bpl.w	8002722 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002920:	f7ff f900 	bl	8001b24 <HAL_GetTick>
 8002924:	1bc0      	subs	r0, r0, r7
 8002926:	2802      	cmp	r0, #2
 8002928:	d9f5      	bls.n	8002916 <HAL_RCC_OscConfig+0x2aa>
 800292a:	e73f      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800292c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800292e:	00df      	lsls	r7, r3, #3
 8002930:	d429      	bmi.n	8002986 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	65a3      	str	r3, [r4, #88]	; 0x58
 800293a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002944:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002948:	4f85      	ldr	r7, [pc, #532]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	05d8      	lsls	r0, r3, #23
 800294e:	d51d      	bpl.n	800298c <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002950:	68ab      	ldr	r3, [r5, #8]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d12b      	bne.n	80029ae <HAL_RCC_OscConfig+0x342>
 8002956:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002962:	f7ff f8df 	bl	8001b24 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800296a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002970:	079a      	lsls	r2, r3, #30
 8002972:	d542      	bpl.n	80029fa <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002974:	f1b8 0f00 	cmp.w	r8, #0
 8002978:	f43f aed7 	beq.w	800272a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 800297c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002982:	65a3      	str	r3, [r4, #88]	; 0x58
 8002984:	e6d1      	b.n	800272a <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002986:	f04f 0800 	mov.w	r8, #0
 800298a:	e7dd      	b.n	8002948 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002992:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002994:	f7ff f8c6 	bl	8001b24 <HAL_GetTick>
 8002998:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	05d9      	lsls	r1, r3, #23
 800299e:	d4d7      	bmi.n	8002950 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7ff f8c0 	bl	8001b24 <HAL_GetTick>
 80029a4:	eba0 0009 	sub.w	r0, r0, r9
 80029a8:	2802      	cmp	r0, #2
 80029aa:	d9f6      	bls.n	800299a <HAL_RCC_OscConfig+0x32e>
 80029ac:	e6fe      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d106      	bne.n	80029c0 <HAL_RCC_OscConfig+0x354>
 80029b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80029be:	e7ca      	b.n	8002956 <HAL_RCC_OscConfig+0x2ea>
 80029c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80029c4:	f022 0201 	bic.w	r2, r2, #1
 80029c8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80029cc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80029d0:	f022 0204 	bic.w	r2, r2, #4
 80029d4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1c2      	bne.n	8002962 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 80029dc:	f7ff f8a2 	bl	8001b24 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80029e4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80029ea:	079b      	lsls	r3, r3, #30
 80029ec:	d5c2      	bpl.n	8002974 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7ff f899 	bl	8001b24 <HAL_GetTick>
 80029f2:	1bc0      	subs	r0, r0, r7
 80029f4:	4548      	cmp	r0, r9
 80029f6:	d9f6      	bls.n	80029e6 <HAL_RCC_OscConfig+0x37a>
 80029f8:	e6d8      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7ff f893 	bl	8001b24 <HAL_GetTick>
 80029fe:	1bc0      	subs	r0, r0, r7
 8002a00:	4548      	cmp	r0, r9
 8002a02:	d9b3      	bls.n	800296c <HAL_RCC_OscConfig+0x300>
 8002a04:	e6d2      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	f040 808f 	bne.w	8002b2a <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002a0c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002a10:	f003 0103 	and.w	r1, r3, #3
 8002a14:	4291      	cmp	r1, r2
 8002a16:	d124      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a18:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002a1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a1e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a20:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002a24:	d11d      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a26:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002a28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a2c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002a30:	d117      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a32:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002a34:	3a07      	subs	r2, #7
 8002a36:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002a3a:	bf18      	it	ne
 8002a3c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3e:	4291      	cmp	r1, r2
 8002a40:	d10f      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a42:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002a44:	0852      	lsrs	r2, r2, #1
 8002a46:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002a4a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a4c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a52:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002a54:	0852      	lsrs	r2, r2, #1
 8002a56:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002a5a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a5c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002a60:	d04a      	beq.n	8002af8 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a62:	2e0c      	cmp	r6, #12
 8002a64:	f43f ae06 	beq.w	8002674 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	015f      	lsls	r7, r3, #5
 8002a6c:	f53f ae02 	bmi.w	8002674 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	00de      	lsls	r6, r3, #3
 8002a74:	f53f adfe 	bmi.w	8002674 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002a80:	f7ff f850 	bl	8001b24 <HAL_GetTick>
 8002a84:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	0198      	lsls	r0, r3, #6
 8002a8a:	d42f      	bmi.n	8002aec <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8c:	68e2      	ldr	r2, [r4, #12]
 8002a8e:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <HAL_RCC_OscConfig+0x4f8>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002a94:	4313      	orrs	r3, r2
 8002a96:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002a98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a9c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002a9e:	3a01      	subs	r2, #1
 8002aa0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002aa4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002aa6:	0912      	lsrs	r2, r2, #4
 8002aa8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002aac:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002aae:	0852      	lsrs	r2, r2, #1
 8002ab0:	3a01      	subs	r2, #1
 8002ab2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002ab6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ab8:	0852      	lsrs	r2, r2, #1
 8002aba:	3a01      	subs	r2, #1
 8002abc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002ac0:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac8:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aca:	68e3      	ldr	r3, [r4, #12]
 8002acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002ad2:	f7ff f827 	bl	8001b24 <HAL_GetTick>
 8002ad6:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	0199      	lsls	r1, r3, #6
 8002adc:	f53f ae29 	bmi.w	8002732 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7ff f820 	bl	8001b24 <HAL_GetTick>
 8002ae4:	1b40      	subs	r0, r0, r5
 8002ae6:	2802      	cmp	r0, #2
 8002ae8:	d9f6      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x46c>
 8002aea:	e65f      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7ff f81a 	bl	8001b24 <HAL_GetTick>
 8002af0:	1b80      	subs	r0, r0, r6
 8002af2:	2802      	cmp	r0, #2
 8002af4:	d9c7      	bls.n	8002a86 <HAL_RCC_OscConfig+0x41a>
 8002af6:	e659      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	019a      	lsls	r2, r3, #6
 8002afc:	f53f ae19 	bmi.w	8002732 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b06:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b08:	68e3      	ldr	r3, [r4, #12]
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002b10:	f7ff f808 	bl	8001b24 <HAL_GetTick>
 8002b14:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	019b      	lsls	r3, r3, #6
 8002b1a:	f53f ae0a 	bmi.w	8002732 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7ff f801 	bl	8001b24 <HAL_GetTick>
 8002b22:	1b40      	subs	r0, r0, r5
 8002b24:	2802      	cmp	r0, #2
 8002b26:	d9f6      	bls.n	8002b16 <HAL_RCC_OscConfig+0x4aa>
 8002b28:	e640      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2a:	2e0c      	cmp	r6, #12
 8002b2c:	f43f ada2 	beq.w	8002674 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b38:	f7fe fff4 	bl	8001b24 <HAL_GetTick>
 8002b3c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002b44:	d105      	bne.n	8002b52 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b46:	68e1      	ldr	r1, [r4, #12]
 8002b48:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <HAL_RCC_OscConfig+0x4fc>)
 8002b4a:	400a      	ands	r2, r1
 8002b4c:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8002b4e:	4618      	mov	r0, r3
 8002b50:	e591      	b.n	8002676 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe ffe7 	bl	8001b24 <HAL_GetTick>
 8002b56:	1b40      	subs	r0, r0, r5
 8002b58:	2802      	cmp	r0, #2
 8002b5a:	d9f0      	bls.n	8002b3e <HAL_RCC_OscConfig+0x4d2>
 8002b5c:	e626      	b.n	80027ac <HAL_RCC_OscConfig+0x140>
 8002b5e:	bf00      	nop
 8002b60:	40007000 	.word	0x40007000
 8002b64:	f99d808c 	.word	0xf99d808c
 8002b68:	feeefffc 	.word	0xfeeefffc

08002b6c <HAL_RCC_ClockConfig>:
{
 8002b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b70:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002b72:	4604      	mov	r4, r0
 8002b74:	b910      	cbnz	r0, 8002b7c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002b76:	2001      	movs	r0, #1
}
 8002b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	; (8002cac <HAL_RCC_ClockConfig+0x140>)
 8002b7e:	6813      	ldr	r3, [r2, #0]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	428b      	cmp	r3, r1
 8002b86:	d32c      	bcc.n	8002be2 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	6820      	ldr	r0, [r4, #0]
 8002b8a:	0786      	lsls	r6, r0, #30
 8002b8c:	d434      	bmi.n	8002bf8 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8e:	07c1      	lsls	r1, r0, #31
 8002b90:	d43f      	bmi.n	8002c12 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b92:	6821      	ldr	r1, [r4, #0]
 8002b94:	078a      	lsls	r2, r1, #30
 8002b96:	d468      	bmi.n	8002c6a <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b98:	4a44      	ldr	r2, [pc, #272]	; (8002cac <HAL_RCC_ClockConfig+0x140>)
 8002b9a:	6813      	ldr	r3, [r2, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	42ab      	cmp	r3, r5
 8002ba2:	d86f      	bhi.n	8002c84 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	f011 0f04 	tst.w	r1, #4
 8002ba8:	4d41      	ldr	r5, [pc, #260]	; (8002cb0 <HAL_RCC_ClockConfig+0x144>)
 8002baa:	d177      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	070b      	lsls	r3, r1, #28
 8002bae:	d506      	bpl.n	8002bbe <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb0:	68ab      	ldr	r3, [r5, #8]
 8002bb2:	6922      	ldr	r2, [r4, #16]
 8002bb4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002bb8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002bbc:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bbe:	f7ff fd07 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8002bc2:	68ab      	ldr	r3, [r5, #8]
 8002bc4:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <HAL_RCC_ClockConfig+0x148>)
 8002bc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	40d8      	lsrs	r0, r3
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_RCC_ClockConfig+0x14c>)
 8002bd8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002bda:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <HAL_RCC_ClockConfig+0x150>)
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	f7fe bf61 	b.w	8001aa4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	6813      	ldr	r3, [r2, #0]
 8002be4:	f023 0307 	bic.w	r3, r3, #7
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bec:	6813      	ldr	r3, [r2, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	428b      	cmp	r3, r1
 8002bf4:	d1bf      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xa>
 8002bf6:	e7c7      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bf8:	4a2d      	ldr	r2, [pc, #180]	; (8002cb0 <HAL_RCC_ClockConfig+0x144>)
 8002bfa:	68a6      	ldr	r6, [r4, #8]
 8002bfc:	6891      	ldr	r1, [r2, #8]
 8002bfe:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8002c02:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c04:	bf81      	itttt	hi
 8002c06:	6893      	ldrhi	r3, [r2, #8]
 8002c08:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8002c0c:	4333      	orrhi	r3, r6
 8002c0e:	6093      	strhi	r3, [r2, #8]
 8002c10:	e7bd      	b.n	8002b8e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c12:	6862      	ldr	r2, [r4, #4]
 8002c14:	4e26      	ldr	r6, [pc, #152]	; (8002cb0 <HAL_RCC_ClockConfig+0x144>)
 8002c16:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c18:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1a:	d11a      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c20:	d0a9      	beq.n	8002b76 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c22:	68b3      	ldr	r3, [r6, #8]
 8002c24:	f023 0303 	bic.w	r3, r3, #3
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002c2c:	f7fe ff7a 	bl	8001b24 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002c34:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	68b3      	ldr	r3, [r6, #8]
 8002c38:	6862      	ldr	r2, [r4, #4]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002c42:	d0a6      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fe ff6e 	bl	8001b24 <HAL_GetTick>
 8002c48:	1bc0      	subs	r0, r0, r7
 8002c4a:	4540      	cmp	r0, r8
 8002c4c:	d9f3      	bls.n	8002c36 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8002c4e:	2003      	movs	r0, #3
 8002c50:	e792      	b.n	8002b78 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	2a02      	cmp	r2, #2
 8002c54:	d102      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c5a:	e7e1      	b.n	8002c20 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c5c:	b912      	cbnz	r2, 8002c64 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c5e:	f013 0f02 	tst.w	r3, #2
 8002c62:	e7dd      	b.n	8002c20 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002c68:	e7da      	b.n	8002c20 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c6a:	4a11      	ldr	r2, [pc, #68]	; (8002cb0 <HAL_RCC_ClockConfig+0x144>)
 8002c6c:	68a6      	ldr	r6, [r4, #8]
 8002c6e:	6890      	ldr	r0, [r2, #8]
 8002c70:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8002c74:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c76:	bf3f      	itttt	cc
 8002c78:	6893      	ldrcc	r3, [r2, #8]
 8002c7a:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8002c7e:	4333      	orrcc	r3, r6
 8002c80:	6093      	strcc	r3, [r2, #8]
 8002c82:	e789      	b.n	8002b98 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c84:	6813      	ldr	r3, [r2, #0]
 8002c86:	f023 0307 	bic.w	r3, r3, #7
 8002c8a:	432b      	orrs	r3, r5
 8002c8c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	42ab      	cmp	r3, r5
 8002c96:	f47f af6e 	bne.w	8002b76 <HAL_RCC_ClockConfig+0xa>
 8002c9a:	e783      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9c:	68ab      	ldr	r3, [r5, #8]
 8002c9e:	68e2      	ldr	r2, [r4, #12]
 8002ca0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60ab      	str	r3, [r5, #8]
 8002ca8:	e780      	b.n	8002bac <HAL_RCC_ClockConfig+0x40>
 8002caa:	bf00      	nop
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08005c98 	.word	0x08005c98
 8002cb8:	20000080 	.word	0x20000080
 8002cbc:	20000088 	.word	0x20000088

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002cc2:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cce:	6810      	ldr	r0, [r2, #0]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
}
 8002cd4:	40d8      	lsrs	r0, r3
 8002cd6:	4770      	bx	lr
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08005ca8 	.word	0x08005ca8
 8002ce0:	20000080 	.word	0x20000080

08002ce4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ce6:	4a06      	ldr	r2, [pc, #24]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf2:	6810      	ldr	r0, [r2, #0]
 8002cf4:	f003 031f 	and.w	r3, r3, #31
}
 8002cf8:	40d8      	lsrs	r0, r3
 8002cfa:	4770      	bx	lr
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08005ca8 	.word	0x08005ca8
 8002d04:	20000080 	.word	0x20000080

08002d08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d0c:	461f      	mov	r7, r3
 8002d0e:	4689      	mov	r9, r1
 8002d10:	4690      	mov	r8, r2
 8002d12:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d14:	f7fe ff06 	bl	8001b24 <HAL_GetTick>
 8002d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d1a:	443b      	add	r3, r7
 8002d1c:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8002d1e:	f7fe ff01 	bl	8001b24 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8002d24:	681e      	ldr	r6, [r3, #0]
 8002d26:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8002d2a:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8002d2c:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d2e:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	6893      	ldr	r3, [r2, #8]
 8002d34:	ea39 0303 	bics.w	r3, r9, r3
 8002d38:	bf0c      	ite	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	2300      	movne	r3, #0
 8002d3e:	4543      	cmp	r3, r8
 8002d40:	d101      	bne.n	8002d46 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8002d42:	2000      	movs	r0, #0
 8002d44:	e02e      	b.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	1c7b      	adds	r3, r7, #1
 8002d48:	d0f3      	beq.n	8002d32 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d4a:	f7fe feeb 	bl	8001b24 <HAL_GetTick>
 8002d4e:	eba0 000a 	sub.w	r0, r0, sl
 8002d52:	42a8      	cmp	r0, r5
 8002d54:	d329      	bcc.n	8002daa <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d5e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d60:	6862      	ldr	r2, [r4, #4]
 8002d62:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002d66:	d10a      	bne.n	8002d7e <SPI_WaitFlagStateUntilTimeout+0x76>
 8002d68:	68a2      	ldr	r2, [r4, #8]
 8002d6a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002d6e:	d002      	beq.n	8002d76 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d70:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002d74:	d103      	bne.n	8002d7e <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002d80:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002d84:	d107      	bne.n	8002d96 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d94:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002da2:	2003      	movs	r0, #3
}
 8002da4:	b002      	add	sp, #8
 8002da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8002daa:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002dac:	2b00      	cmp	r3, #0
      count--;
 8002dae:	9b01      	ldr	r3, [sp, #4]
 8002db0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8002db4:	bf08      	it	eq
 8002db6:	2500      	moveq	r5, #0
      count--;
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	e7b9      	b.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0x28>
 8002dbc:	20000080 	.word	0x20000080

08002dc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc4:	4699      	mov	r9, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002dc6:	2300      	movs	r3, #0
{
 8002dc8:	4604      	mov	r4, r0
 8002dca:	4688      	mov	r8, r1
 8002dcc:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8002dce:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002dd2:	f7fe fea7 	bl	8001b24 <HAL_GetTick>
 8002dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dd8:	444b      	add	r3, r9
 8002dda:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8002ddc:	f7fe fea2 	bl	8001b24 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002de0:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <SPI_WaitFifoStateUntilTimeout+0xd4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002de2:	f8d4 b000 	ldr.w	fp, [r4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002de6:	681e      	ldr	r6, [r3, #0]
 8002de8:	2323      	movs	r3, #35	; 0x23
 8002dea:	435e      	muls	r6, r3
 8002dec:	0d36      	lsrs	r6, r6, #20
 8002dee:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8002df0:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002df2:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002df4:	6822      	ldr	r2, [r4, #0]
 8002df6:	6893      	ldr	r3, [r2, #8]
 8002df8:	ea03 0308 	and.w	r3, r3, r8
 8002dfc:	42bb      	cmp	r3, r7
 8002dfe:	d101      	bne.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8002e00:	2000      	movs	r0, #0
 8002e02:	e03a      	b.n	8002e7a <SPI_WaitFifoStateUntilTimeout+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e04:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 8002e08:	d107      	bne.n	8002e1a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002e0a:	b937      	cbnz	r7, 8002e1a <SPI_WaitFifoStateUntilTimeout+0x5a>
      tmpreg8 = *ptmpreg8;
 8002e0c:	f89b 300c 	ldrb.w	r3, [fp, #12]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8002e16:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002e1e:	d0ea      	beq.n	8002df6 <SPI_WaitFifoStateUntilTimeout+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e20:	f7fe fe80 	bl	8001b24 <HAL_GetTick>
 8002e24:	eba0 000a 	sub.w	r0, r0, sl
 8002e28:	42a8      	cmp	r0, r5
 8002e2a:	d329      	bcc.n	8002e80 <SPI_WaitFifoStateUntilTimeout+0xc0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e34:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e36:	6862      	ldr	r2, [r4, #4]
 8002e38:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002e3c:	d10a      	bne.n	8002e54 <SPI_WaitFifoStateUntilTimeout+0x94>
 8002e3e:	68a2      	ldr	r2, [r4, #8]
 8002e40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002e44:	d002      	beq.n	8002e4c <SPI_WaitFifoStateUntilTimeout+0x8c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002e4a:	d103      	bne.n	8002e54 <SPI_WaitFifoStateUntilTimeout+0x94>
          __HAL_SPI_DISABLE(hspi);
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e52:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e56:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002e5a:	d107      	bne.n	8002e6c <SPI_WaitFifoStateUntilTimeout+0xac>
          SPI_RESET_CRC(hspi);
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e6a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002e72:	2300      	movs	r3, #0
 8002e74:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002e78:	2003      	movs	r0, #3
}
 8002e7a:	b003      	add	sp, #12
 8002e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (count == 0U)
 8002e80:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002e82:	2b00      	cmp	r3, #0
      count--;
 8002e84:	9b01      	ldr	r3, [sp, #4]
 8002e86:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8002e8a:	bf08      	it	eq
 8002e8c:	2500      	moveq	r5, #0
      count--;
 8002e8e:	9301      	str	r3, [sp, #4]
 8002e90:	e7b0      	b.n	8002df4 <SPI_WaitFifoStateUntilTimeout+0x34>
 8002e92:	bf00      	nop
 8002e94:	20000080 	.word	0x20000080

08002e98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002e9a:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e9c:	6842      	ldr	r2, [r0, #4]
 8002e9e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea6:	d10b      	bne.n	8002ec0 <SPI_EndRxTransaction+0x28>
 8002ea8:	6882      	ldr	r2, [r0, #8]
 8002eaa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002eae:	d002      	beq.n	8002eb6 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002eb4:	d104      	bne.n	8002ec0 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002eb6:	6821      	ldr	r1, [r4, #0]
 8002eb8:	680a      	ldr	r2, [r1, #0]
 8002eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ebe:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec0:	9600      	str	r6, [sp, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	9303      	str	r3, [sp, #12]
 8002eca:	f7ff ff1d 	bl	8002d08 <SPI_WaitFlagStateUntilTimeout>
 8002ece:	9b03      	ldr	r3, [sp, #12]
 8002ed0:	4605      	mov	r5, r0
 8002ed2:	b128      	cbz	r0, 8002ee0 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ed4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002ed6:	f043 0320 	orr.w	r3, r3, #32
 8002eda:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002edc:	2503      	movs	r5, #3
 8002ede:	e013      	b.n	8002f08 <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee0:	6862      	ldr	r2, [r4, #4]
 8002ee2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002ee6:	d10f      	bne.n	8002f08 <SPI_EndRxTransaction+0x70>
 8002ee8:	68a2      	ldr	r2, [r4, #8]
 8002eea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002eee:	d002      	beq.n	8002ef6 <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ef0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002ef4:	d108      	bne.n	8002f08 <SPI_EndRxTransaction+0x70>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ef6:	9600      	str	r6, [sp, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7ff ff5e 	bl	8002dc0 <SPI_WaitFifoStateUntilTimeout>
 8002f04:	2800      	cmp	r0, #0
 8002f06:	d1e5      	bne.n	8002ed4 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 8002f08:	4628      	mov	r0, r5
 8002f0a:	b004      	add	sp, #16
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}

08002f0e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0e:	b530      	push	{r4, r5, lr}
 8002f10:	b085      	sub	sp, #20
 8002f12:	460b      	mov	r3, r1
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f14:	9200      	str	r2, [sp, #0]
 8002f16:	9103      	str	r1, [sp, #12]
{
 8002f18:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f1a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f1e:	2200      	movs	r2, #0
{
 8002f20:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f22:	f7ff ff4d 	bl	8002dc0 <SPI_WaitFifoStateUntilTimeout>
 8002f26:	9b03      	ldr	r3, [sp, #12]
 8002f28:	4602      	mov	r2, r0
 8002f2a:	b128      	cbz	r0, 8002f38 <SPI_EndRxTxTransaction+0x2a>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002f2e:	f043 0320 	orr.w	r3, r3, #32
 8002f32:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f34:	2003      	movs	r0, #3
 8002f36:	e011      	b.n	8002f5c <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f38:	9500      	str	r5, [sp, #0]
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	9303      	str	r3, [sp, #12]
 8002f40:	f7ff fee2 	bl	8002d08 <SPI_WaitFlagStateUntilTimeout>
 8002f44:	9b03      	ldr	r3, [sp, #12]
 8002f46:	4602      	mov	r2, r0
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d1ef      	bne.n	8002f2c <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f4c:	9500      	str	r5, [sp, #0]
 8002f4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f52:	4620      	mov	r0, r4
 8002f54:	f7ff ff34 	bl	8002dc0 <SPI_WaitFifoStateUntilTimeout>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d1e7      	bne.n	8002f2c <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 8002f5c:	b005      	add	sp, #20
 8002f5e:	bd30      	pop	{r4, r5, pc}

08002f60 <HAL_SPI_MspInit>:
}
 8002f60:	4770      	bx	lr

08002f62 <HAL_SPI_Init>:
{
 8002f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 8002f64:	4604      	mov	r4, r0
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d079      	beq.n	800305e <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d14f      	bne.n	8003010 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f70:	6842      	ldr	r2, [r0, #4]
 8002f72:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002f76:	d000      	beq.n	8002f7a <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f78:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f7a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002f7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f82:	b923      	cbnz	r3, 8002f8e <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8002f84:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff ffe9 	bl	8002f60 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002f8e:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f90:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f92:	2302      	movs	r3, #2
 8002f94:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002f98:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	d85b      	bhi.n	8003062 <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002faa:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fae:	d000      	beq.n	8002fb2 <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb0:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb2:	6863      	ldr	r3, [r4, #4]
 8002fb4:	68a7      	ldr	r7, [r4, #8]
 8002fb6:	69a0      	ldr	r0, [r4, #24]
 8002fb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fba:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 8002fbe:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002fc2:	433b      	orrs	r3, r7
 8002fc4:	6927      	ldr	r7, [r4, #16]
 8002fc6:	f007 0702 	and.w	r7, r7, #2
 8002fca:	433b      	orrs	r3, r7
 8002fcc:	6967      	ldr	r7, [r4, #20]
 8002fce:	f007 0701 	and.w	r7, r7, #1
 8002fd2:	433b      	orrs	r3, r7
 8002fd4:	f400 7700 	and.w	r7, r0, #512	; 0x200
 8002fd8:	433b      	orrs	r3, r7
 8002fda:	69e7      	ldr	r7, [r4, #28]
 8002fdc:	f007 0738 	and.w	r7, r7, #56	; 0x38
 8002fe0:	433b      	orrs	r3, r7
 8002fe2:	6a27      	ldr	r7, [r4, #32]
 8002fe4:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8002fe8:	433b      	orrs	r3, r7
 8002fea:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 8002fee:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ff4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff6:	d111      	bne.n	800301c <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002ff8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ffa:	bb6b      	cbnz	r3, 8003058 <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ffc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003000:	d90a      	bls.n	8003018 <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003002:	2302      	movs	r3, #2
 8003004:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e005      	b.n	800301c <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003010:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003016:	e7b0      	b.n	8002f7a <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003018:	2301      	movs	r3, #1
 800301a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800301c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800301e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	f007 0708 	and.w	r7, r7, #8
 8003028:	433b      	orrs	r3, r7
 800302a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800302e:	0c00      	lsrs	r0, r0, #16
 8003030:	4319      	orrs	r1, r3
 8003032:	f000 0004 	and.w	r0, r0, #4
 8003036:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003038:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800303c:	bf08      	it	eq
 800303e:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003040:	ea45 0501 	orr.w	r5, r5, r1
 8003044:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003046:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800304a:	bf08      	it	eq
 800304c:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 800304e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003050:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003052:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003058:	2b02      	cmp	r3, #2
 800305a:	d1df      	bne.n	800301c <HAL_SPI_Init+0xba>
 800305c:	e7d3      	b.n	8003006 <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 800305e:	2001      	movs	r0, #1
 8003060:	e7f9      	b.n	8003056 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003062:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003064:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8003068:	e7a1      	b.n	8002fae <HAL_SPI_Init+0x4c>

0800306a <HAL_SPI_MspDeInit>:
 800306a:	4770      	bx	lr

0800306c <HAL_SPI_DeInit>:
{
 800306c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800306e:	4604      	mov	r4, r0
 8003070:	b180      	cbz	r0, 8003094 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8003072:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003074:	2302      	movs	r3, #2
 8003076:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800307a:	6813      	ldr	r3, [r2, #0]
 800307c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003080:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003082:	f7ff fff2 	bl	800306a <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003086:	2000      	movs	r0, #0
 8003088:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 800308a:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800308e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 8003092:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003094:	2001      	movs	r0, #1
 8003096:	e7fc      	b.n	8003092 <HAL_SPI_DeInit+0x26>

08003098 <HAL_SPI_TransmitReceive>:
{
 8003098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800309c:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 80030a2:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 80030a6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80030aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80030ac:	2b01      	cmp	r3, #1
{
 80030ae:	4604      	mov	r4, r0
 80030b0:	460e      	mov	r6, r1
 80030b2:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 80030b4:	f000 81b4 	beq.w	8003420 <HAL_SPI_TransmitReceive+0x388>
 80030b8:	2301      	movs	r3, #1
 80030ba:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80030be:	f7fe fd31 	bl	8001b24 <HAL_GetTick>
  tmp_state           = hspi->State;
 80030c2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80030c6:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030ca:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80030cc:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 80030ce:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 80030d0:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80030d4:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	d00b      	beq.n	80030f0 <HAL_SPI_TransmitReceive+0x58>
 80030d8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80030dc:	f040 819e 	bne.w	800341c <HAL_SPI_TransmitReceive+0x384>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e0:	68a3      	ldr	r3, [r4, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 819a 	bne.w	800341c <HAL_SPI_TransmitReceive+0x384>
 80030e8:	f1bc 0f04 	cmp.w	ip, #4
 80030ec:	f040 8196 	bne.w	800341c <HAL_SPI_TransmitReceive+0x384>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030f0:	2e00      	cmp	r6, #0
 80030f2:	f000 8176 	beq.w	80033e2 <HAL_SPI_TransmitReceive+0x34a>
 80030f6:	f1ba 0f00 	cmp.w	sl, #0
 80030fa:	f000 8172 	beq.w	80033e2 <HAL_SPI_TransmitReceive+0x34a>
 80030fe:	f1b9 0f00 	cmp.w	r9, #0
 8003102:	f000 816e 	beq.w	80033e2 <HAL_SPI_TransmitReceive+0x34a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003106:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800310a:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800310e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003110:	bf1c      	itt	ne
 8003112:	2305      	movne	r3, #5
 8003114:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003118:	2300      	movs	r3, #0
 800311a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800311c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003120:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8003122:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 800312a:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800312e:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003130:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003134:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003138:	d107      	bne.n	800314a <HAL_SPI_TransmitReceive+0xb2>
    SPI_RESET_CRC(hspi);
 800313a:	682b      	ldr	r3, [r5, #0]
 800313c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003140:	602b      	str	r3, [r5, #0]
 8003142:	682b      	ldr	r3, [r5, #0]
 8003144:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003148:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800314a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800314e:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003150:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8003154:	d802      	bhi.n	800315c <HAL_SPI_TransmitReceive+0xc4>
 8003156:	f1b9 0f01 	cmp.w	r9, #1
 800315a:	d03a      	beq.n	80031d2 <HAL_SPI_TransmitReceive+0x13a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800315c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003160:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	682b      	ldr	r3, [r5, #0]
 8003164:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003166:	bf5e      	ittt	pl
 8003168:	682b      	ldrpl	r3, [r5, #0]
 800316a:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800316e:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003170:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8003174:	d97f      	bls.n	8003276 <HAL_SPI_TransmitReceive+0x1de>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003176:	b112      	cbz	r2, 800317e <HAL_SPI_TransmitReceive+0xe6>
 8003178:	f1b9 0f01 	cmp.w	r9, #1
 800317c:	d107      	bne.n	800318e <HAL_SPI_TransmitReceive+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800317e:	f836 3b02 	ldrh.w	r3, [r6], #2
 8003182:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 8003184:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003186:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003188:	3b01      	subs	r3, #1
 800318a:	b29b      	uxth	r3, r3
 800318c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800318e:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003192:	f001 0604 	and.w	r6, r1, #4
 8003196:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800319a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800319c:	b29b      	uxth	r3, r3
 800319e:	b9db      	cbnz	r3, 80031d8 <HAL_SPI_TransmitReceive+0x140>
 80031a0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	b9bb      	cbnz	r3, 80031d8 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ae:	f040 8101 	bne.w	80033b4 <HAL_SPI_TransmitReceive+0x31c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80031b2:	2201      	movs	r2, #1
 80031b4:	f8cd 8000 	str.w	r8, [sp]
 80031b8:	463b      	mov	r3, r7
 80031ba:	4611      	mov	r1, r2
 80031bc:	4620      	mov	r0, r4
 80031be:	f7ff fda3 	bl	8002d08 <SPI_WaitFlagStateUntilTimeout>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	f000 80ee 	beq.w	80033a4 <HAL_SPI_TransmitReceive+0x30c>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80031c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80031ca:	f043 0302 	orr.w	r3, r3, #2
 80031ce:	6623      	str	r3, [r4, #96]	; 0x60
 80031d0:	e02a      	b.n	8003228 <HAL_SPI_TransmitReceive+0x190>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031d6:	e7c3      	b.n	8003160 <HAL_SPI_TransmitReceive+0xc8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	0790      	lsls	r0, r2, #30
 80031de:	d507      	bpl.n	80031f0 <HAL_SPI_TransmitReceive+0x158>
 80031e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80031e2:	b292      	uxth	r2, r2
 80031e4:	b122      	cbz	r2, 80031f0 <HAL_SPI_TransmitReceive+0x158>
 80031e6:	f1b9 0f00 	cmp.w	r9, #0
 80031ea:	d128      	bne.n	800323e <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 80031ec:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031f0:	6899      	ldr	r1, [r3, #8]
 80031f2:	f011 0101 	ands.w	r1, r1, #1
 80031f6:	d00f      	beq.n	8003218 <HAL_SPI_TransmitReceive+0x180>
 80031f8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80031fc:	b292      	uxth	r2, r2
 80031fe:	b15a      	cbz	r2, 8003218 <HAL_SPI_TransmitReceive+0x180>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003204:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003208:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800320a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800320e:	3b01      	subs	r3, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003216:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003218:	f7fe fc84 	bl	8001b24 <HAL_GetTick>
 800321c:	eba0 0008 	sub.w	r0, r0, r8
 8003220:	42b8      	cmp	r0, r7
 8003222:	d3ba      	bcc.n	800319a <HAL_SPI_TransmitReceive+0x102>
 8003224:	1c79      	adds	r1, r7, #1
 8003226:	d0b8      	beq.n	800319a <HAL_SPI_TransmitReceive+0x102>
          errorcode = HAL_TIMEOUT;
 8003228:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800322a:	2301      	movs	r3, #1
 800322c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003230:	2300      	movs	r3, #0
 8003232:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003236:	4628      	mov	r0, r5
 8003238:	b004      	add	sp, #16
 800323a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800323e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003240:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003244:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003246:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003248:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800324a:	3a01      	subs	r2, #1
 800324c:	b292      	uxth	r2, r2
 800324e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003250:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003252:	b292      	uxth	r2, r2
 8003254:	2a00      	cmp	r2, #0
 8003256:	d1c9      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x154>
 8003258:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800325a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800325e:	d1c5      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x154>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003260:	b926      	cbnz	r6, 800326c <HAL_SPI_TransmitReceive+0x1d4>
 8003262:	b11d      	cbz	r5, 800326c <HAL_SPI_TransmitReceive+0x1d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e7ba      	b.n	80031ec <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003276:	b112      	cbz	r2, 800327e <HAL_SPI_TransmitReceive+0x1e6>
 8003278:	f1b9 0f01 	cmp.w	r9, #1
 800327c:	d10b      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x1fe>
      if (hspi->TxXferCount > 1U)
 800327e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d90d      	bls.n	80032a2 <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003286:	f836 3b02 	ldrh.w	r3, [r6], #2
 800328a:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 800328c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800328e:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003290:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8003292:	b29b      	uxth	r3, r3
 8003294:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003296:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003298:	f001 0604 	and.w	r6, r1, #4
 800329c:	f000 0908 	and.w	r9, r0, #8
 80032a0:	e03c      	b.n	800331c <HAL_SPI_TransmitReceive+0x284>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032a2:	7833      	ldrb	r3, [r6, #0]
 80032a4:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 80032a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032a8:	3301      	adds	r3, #1
 80032aa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80032ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032ae:	3b01      	subs	r3, #1
 80032b0:	e7ef      	b.n	8003292 <HAL_SPI_TransmitReceive+0x1fa>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	6821      	ldr	r1, [r4, #0]
 80032b4:	688b      	ldr	r3, [r1, #8]
 80032b6:	079a      	lsls	r2, r3, #30
 80032b8:	d505      	bpl.n	80032c6 <HAL_SPI_TransmitReceive+0x22e>
 80032ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	b113      	cbz	r3, 80032c6 <HAL_SPI_TransmitReceive+0x22e>
 80032c0:	2d00      	cmp	r5, #0
 80032c2:	d135      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x298>
        txallowed = 0U;
 80032c4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032c6:	6821      	ldr	r1, [r4, #0]
 80032c8:	688b      	ldr	r3, [r1, #8]
 80032ca:	f013 0301 	ands.w	r3, r3, #1
 80032ce:	d01d      	beq.n	800330c <HAL_SPI_TransmitReceive+0x274>
 80032d0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80032d4:	b292      	uxth	r2, r2
 80032d6:	b1ca      	cbz	r2, 800330c <HAL_SPI_TransmitReceive+0x274>
        if (hspi->RxXferCount > 1U)
 80032d8:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 80032de:	b280      	uxth	r0, r0
 80032e0:	2801      	cmp	r0, #1
 80032e2:	d950      	bls.n	8003386 <HAL_SPI_TransmitReceive+0x2ee>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032e4:	68c8      	ldr	r0, [r1, #12]
 80032e6:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ea:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80032ec:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80032f0:	3a02      	subs	r2, #2
 80032f2:	b292      	uxth	r2, r2
 80032f4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80032f8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80032fc:	b292      	uxth	r2, r2
 80032fe:	2a01      	cmp	r2, #1
 8003300:	d803      	bhi.n	800330a <HAL_SPI_TransmitReceive+0x272>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003302:	684a      	ldr	r2, [r1, #4]
 8003304:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003308:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 800330a:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800330c:	f7fe fc0a 	bl	8001b24 <HAL_GetTick>
 8003310:	eba0 0008 	sub.w	r0, r0, r8
 8003314:	42b8      	cmp	r0, r7
 8003316:	d342      	bcc.n	800339e <HAL_SPI_TransmitReceive+0x306>
 8003318:	1c7b      	adds	r3, r7, #1
 800331a:	d185      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x190>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800331c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1c6      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x21a>
 8003324:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1c1      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x21a>
 800332e:	e73b      	b.n	80031a8 <HAL_SPI_TransmitReceive+0x110>
        if (hspi->TxXferCount > 1U)
 8003330:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003332:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8003334:	b292      	uxth	r2, r2
 8003336:	2a01      	cmp	r2, #1
 8003338:	d91d      	bls.n	8003376 <HAL_SPI_TransmitReceive+0x2de>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800333a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800333e:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003340:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003342:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003344:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8003346:	b29b      	uxth	r3, r3
 8003348:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800334a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1b8      	bne.n	80032c4 <HAL_SPI_TransmitReceive+0x22c>
 8003352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003358:	d1b4      	bne.n	80032c4 <HAL_SPI_TransmitReceive+0x22c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800335a:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800335c:	b936      	cbnz	r6, 800336c <HAL_SPI_TransmitReceive+0x2d4>
 800335e:	f1b9 0f00 	cmp.w	r9, #0
 8003362:	d003      	beq.n	800336c <HAL_SPI_TransmitReceive+0x2d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336a:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e7a6      	b.n	80032c4 <HAL_SPI_TransmitReceive+0x22c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 800337a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800337c:	3301      	adds	r3, #1
 800337e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003380:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003382:	3b01      	subs	r3, #1
 8003384:	e7df      	b.n	8003346 <HAL_SPI_TransmitReceive+0x2ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003386:	7b09      	ldrb	r1, [r1, #12]
 8003388:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 800338a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800338c:	3201      	adds	r2, #1
 800338e:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003390:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003394:	3a01      	subs	r2, #1
 8003396:	b292      	uxth	r2, r2
 8003398:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 800339c:	e7b5      	b.n	800330a <HAL_SPI_TransmitReceive+0x272>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800339e:	2f00      	cmp	r7, #0
 80033a0:	d1bc      	bne.n	800331c <HAL_SPI_TransmitReceive+0x284>
 80033a2:	e741      	b.n	8003228 <HAL_SPI_TransmitReceive+0x190>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a4:	68e3      	ldr	r3, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 80033a6:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80033ac:	d11b      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x34e>
      tmpreg = READ_REG(hspi->Instance->DR);
 80033ae:	68eb      	ldr	r3, [r5, #12]
 80033b0:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80033b2:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80033b4:	6822      	ldr	r2, [r4, #0]
 80033b6:	6895      	ldr	r5, [r2, #8]
 80033b8:	f015 0510 	ands.w	r5, r5, #16
 80033bc:	d007      	beq.n	80033ce <HAL_SPI_TransmitReceive+0x336>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80033be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80033c6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80033ca:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 80033cc:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ce:	4642      	mov	r2, r8
 80033d0:	4639      	mov	r1, r7
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7ff fd9b 	bl	8002f0e <SPI_EndRxTxTransaction>
 80033d8:	2800      	cmp	r0, #0
 80033da:	f43f af26 	beq.w	800322a <HAL_SPI_TransmitReceive+0x192>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033de:	2320      	movs	r3, #32
 80033e0:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80033e2:	2501      	movs	r5, #1
 80033e4:	e721      	b.n	800322a <HAL_SPI_TransmitReceive+0x192>
      tmpreg8 = *ptmpreg8;
 80033e6:	7b2b      	ldrb	r3, [r5, #12]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 80033ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80033f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d1dd      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x31c>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80033f8:	2201      	movs	r2, #1
 80033fa:	f8cd 8000 	str.w	r8, [sp]
 80033fe:	463b      	mov	r3, r7
 8003400:	4611      	mov	r1, r2
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff fc80 	bl	8002d08 <SPI_WaitFlagStateUntilTimeout>
 8003408:	2800      	cmp	r0, #0
 800340a:	f47f aedd 	bne.w	80031c8 <HAL_SPI_TransmitReceive+0x130>
        tmpreg8 = *ptmpreg8;
 800340e:	7b2b      	ldrb	r3, [r5, #12]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8003416:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800341a:	e7cb      	b.n	80033b4 <HAL_SPI_TransmitReceive+0x31c>
    errorcode = HAL_BUSY;
 800341c:	2502      	movs	r5, #2
 800341e:	e704      	b.n	800322a <HAL_SPI_TransmitReceive+0x192>
  __HAL_LOCK(hspi);
 8003420:	2502      	movs	r5, #2
 8003422:	e708      	b.n	8003236 <HAL_SPI_TransmitReceive+0x19e>

08003424 <HAL_SPI_Receive>:
{
 8003424:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003428:	461e      	mov	r6, r3
  __IO uint32_t tmpreg = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 800342e:	f88d 300b 	strb.w	r3, [sp, #11]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003432:	6843      	ldr	r3, [r0, #4]
 8003434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8003438:	4604      	mov	r4, r0
 800343a:	4688      	mov	r8, r1
 800343c:	4615      	mov	r5, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800343e:	d10c      	bne.n	800345a <HAL_SPI_Receive+0x36>
 8003440:	6883      	ldr	r3, [r0, #8]
 8003442:	b953      	cbnz	r3, 800345a <HAL_SPI_Receive+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003444:	2304      	movs	r3, #4
 8003446:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800344a:	4613      	mov	r3, r2
 800344c:	9600      	str	r6, [sp, #0]
 800344e:	460a      	mov	r2, r1
 8003450:	f7ff fe22 	bl	8003098 <HAL_SPI_TransmitReceive>
}
 8003454:	b004      	add	sp, #16
 8003456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800345a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800345e:	2b01      	cmp	r3, #1
 8003460:	f000 8102 	beq.w	8003668 <HAL_SPI_Receive+0x244>
 8003464:	2301      	movs	r3, #1
 8003466:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800346a:	f7fe fb5b 	bl	8001b24 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800346e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003472:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003474:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003476:	b2d8      	uxtb	r0, r3
 8003478:	f040 80f4 	bne.w	8003664 <HAL_SPI_Receive+0x240>
  if ((pData == NULL) || (Size == 0U))
 800347c:	f1b8 0f00 	cmp.w	r8, #0
 8003480:	f000 809f 	beq.w	80035c2 <HAL_SPI_Receive+0x19e>
 8003484:	2d00      	cmp	r5, #0
 8003486:	f000 809c 	beq.w	80035c2 <HAL_SPI_Receive+0x19e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800348a:	2304      	movs	r3, #4
 800348c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003490:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferSize  = Size;
 8003492:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003496:	2000      	movs	r0, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800349c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800349e:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80034a2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034a6:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    SPI_RESET_CRC(hspi);
 80034aa:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034ac:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80034ae:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80034b0:	87e0      	strh	r0, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b2:	d10d      	bne.n	80034d0 <HAL_SPI_Receive+0xac>
    SPI_RESET_CRC(hspi);
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ba:	602b      	str	r3, [r5, #0]
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034c2:	602b      	str	r3, [r5, #0]
    hspi->RxXferCount--;
 80034c4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d0:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034d2:	686b      	ldr	r3, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034d8:	bf8c      	ite	hi
 80034da:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034de:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 80034e2:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e4:	68a3      	ldr	r3, [r4, #8]
 80034e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ea:	d107      	bne.n	80034fc <HAL_SPI_Receive+0xd8>
    __HAL_SPI_DISABLE(hspi);
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f2:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034fa:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034fc:	682b      	ldr	r3, [r5, #0]
 80034fe:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003500:	bf5e      	ittt	pl
 8003502:	682b      	ldrpl	r3, [r5, #0]
 8003504:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003508:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800350a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800350e:	d923      	bls.n	8003558 <HAL_SPI_Receive+0x134>
    while (hspi->RxXferCount > 0U)
 8003510:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003514:	b29b      	uxth	r3, r3
 8003516:	b323      	cbz	r3, 8003562 <HAL_SPI_Receive+0x13e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	07d1      	lsls	r1, r2, #31
 800351e:	d55a      	bpl.n	80035d6 <HAL_SPI_Receive+0x1b2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003524:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003528:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800352a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800352e:	3b01      	subs	r3, #1
 8003530:	b29b      	uxth	r3, r3
 8003532:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003536:	e7eb      	b.n	8003510 <HAL_SPI_Receive+0xec>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	07d5      	lsls	r5, r2, #31
 800353e:	d538      	bpl.n	80035b2 <HAL_SPI_Receive+0x18e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003540:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003542:	7b1b      	ldrb	r3, [r3, #12]
 8003544:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003548:	3301      	adds	r3, #1
 800354a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800354c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003550:	3b01      	subs	r3, #1
 8003552:	b29b      	uxth	r3, r3
 8003554:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8003558:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ea      	bne.n	8003538 <HAL_SPI_Receive+0x114>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003562:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003568:	d148      	bne.n	80035fc <HAL_SPI_Receive+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003572:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003574:	2201      	movs	r2, #1
 8003576:	9700      	str	r7, [sp, #0]
 8003578:	4633      	mov	r3, r6
 800357a:	4611      	mov	r1, r2
 800357c:	4620      	mov	r0, r4
 800357e:	f7ff fbc3 	bl	8002d08 <SPI_WaitFlagStateUntilTimeout>
 8003582:	b9e8      	cbnz	r0, 80035c0 <HAL_SPI_Receive+0x19c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003584:	68e1      	ldr	r1, [r4, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800358a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800358e:	bf8b      	itete	hi
 8003590:	68d2      	ldrhi	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003592:	7b12      	ldrbls	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003594:	801a      	strhhi	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003596:	701a      	strbls	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003598:	2201      	movs	r2, #1
 800359a:	9700      	str	r7, [sp, #0]
 800359c:	4633      	mov	r3, r6
 800359e:	4611      	mov	r1, r2
 80035a0:	4620      	mov	r0, r4
 80035a2:	f7ff fbb1 	bl	8002d08 <SPI_WaitFlagStateUntilTimeout>
 80035a6:	b308      	cbz	r0, 80035ec <HAL_SPI_Receive+0x1c8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80035a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	6623      	str	r3, [r4, #96]	; 0x60
 80035b0:	e006      	b.n	80035c0 <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035b2:	f7fe fab7 	bl	8001b24 <HAL_GetTick>
 80035b6:	1bc0      	subs	r0, r0, r7
 80035b8:	42b0      	cmp	r0, r6
 80035ba:	d309      	bcc.n	80035d0 <HAL_SPI_Receive+0x1ac>
 80035bc:	1c70      	adds	r0, r6, #1
 80035be:	d0cb      	beq.n	8003558 <HAL_SPI_Receive+0x134>
          errorcode = HAL_TIMEOUT;
 80035c0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80035c8:	2300      	movs	r3, #0
 80035ca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 80035ce:	e741      	b.n	8003454 <HAL_SPI_Receive+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d0:	2e00      	cmp	r6, #0
 80035d2:	d1c1      	bne.n	8003558 <HAL_SPI_Receive+0x134>
 80035d4:	e7f4      	b.n	80035c0 <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d6:	f7fe faa5 	bl	8001b24 <HAL_GetTick>
 80035da:	1bc0      	subs	r0, r0, r7
 80035dc:	42b0      	cmp	r0, r6
 80035de:	d302      	bcc.n	80035e6 <HAL_SPI_Receive+0x1c2>
 80035e0:	1c72      	adds	r2, r6, #1
 80035e2:	d095      	beq.n	8003510 <HAL_SPI_Receive+0xec>
 80035e4:	e7ec      	b.n	80035c0 <HAL_SPI_Receive+0x19c>
 80035e6:	2e00      	cmp	r6, #0
 80035e8:	d192      	bne.n	8003510 <HAL_SPI_Receive+0xec>
 80035ea:	e7e9      	b.n	80035c0 <HAL_SPI_Receive+0x19c>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035ec:	68e2      	ldr	r2, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 80035ee:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035f0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80035f4:	d11a      	bne.n	800362c <HAL_SPI_Receive+0x208>
      tmpreg = READ_REG(hspi->Instance->DR);
 80035f6:	68eb      	ldr	r3, [r5, #12]
 80035f8:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80035fa:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035fc:	463a      	mov	r2, r7
 80035fe:	4631      	mov	r1, r6
 8003600:	4620      	mov	r0, r4
 8003602:	f7ff fc49 	bl	8002e98 <SPI_EndRxTransaction>
 8003606:	b108      	cbz	r0, 800360c <HAL_SPI_Receive+0x1e8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003608:	2320      	movs	r3, #32
 800360a:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	6893      	ldr	r3, [r2, #8]
 8003610:	06db      	lsls	r3, r3, #27
 8003612:	d506      	bpl.n	8003622 <HAL_SPI_Receive+0x1fe>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003614:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800361c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003620:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003622:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8003624:	3800      	subs	r0, #0
 8003626:	bf18      	it	ne
 8003628:	2001      	movne	r0, #1
error :
 800362a:	e7ca      	b.n	80035c2 <HAL_SPI_Receive+0x19e>
      tmpreg8 = *ptmpreg8;
 800362c:	7b2b      	ldrb	r3, [r5, #12]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f88d 300b 	strb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003634:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg8);
 8003638:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800363c:	d1de      	bne.n	80035fc <HAL_SPI_Receive+0x1d8>
 800363e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003640:	2b02      	cmp	r3, #2
 8003642:	d1db      	bne.n	80035fc <HAL_SPI_Receive+0x1d8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003644:	2201      	movs	r2, #1
 8003646:	9700      	str	r7, [sp, #0]
 8003648:	4633      	mov	r3, r6
 800364a:	4611      	mov	r1, r2
 800364c:	4620      	mov	r0, r4
 800364e:	f7ff fb5b 	bl	8002d08 <SPI_WaitFlagStateUntilTimeout>
 8003652:	2800      	cmp	r0, #0
 8003654:	d1a8      	bne.n	80035a8 <HAL_SPI_Receive+0x184>
        tmpreg8 = *ptmpreg8;
 8003656:	7b2b      	ldrb	r3, [r5, #12]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 800365e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003662:	e7cb      	b.n	80035fc <HAL_SPI_Receive+0x1d8>
    errorcode = HAL_BUSY;
 8003664:	2002      	movs	r0, #2
 8003666:	e7ac      	b.n	80035c2 <HAL_SPI_Receive+0x19e>
  __HAL_LOCK(hspi);
 8003668:	2002      	movs	r0, #2
 800366a:	e6f3      	b.n	8003454 <HAL_SPI_Receive+0x30>

0800366c <HAL_SPI_Transmit_IT>:
{
 800366c:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800366e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8003672:	2801      	cmp	r0, #1
 8003674:	d04d      	beq.n	8003712 <HAL_SPI_Transmit_IT+0xa6>
 8003676:	2001      	movs	r0, #1
 8003678:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 800367c:	2900      	cmp	r1, #0
 800367e:	d040      	beq.n	8003702 <HAL_SPI_Transmit_IT+0x96>
 8003680:	2a00      	cmp	r2, #0
 8003682:	d03e      	beq.n	8003702 <HAL_SPI_Transmit_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003684:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8003688:	2801      	cmp	r0, #1
 800368a:	d13e      	bne.n	800370a <HAL_SPI_Transmit_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800368c:	2003      	movs	r0, #3
 800368e:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003692:	2000      	movs	r0, #0
 8003694:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003696:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003698:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 800369a:	491f      	ldr	r1, [pc, #124]	; (8003718 <HAL_SPI_Transmit_IT+0xac>)
  hspi->TxXferSize  = Size;
 800369c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800369e:	6418      	str	r0, [r3, #64]	; 0x40
    hspi->TxISR = SPI_TxISR_8BIT;
 80036a0:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_SPI_Transmit_IT+0xb0>)
  hspi->RxXferSize  = 0U;
 80036a2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80036a6:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80036aa:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036ac:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 80036ae:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80036b2:	bf98      	it	ls
 80036b4:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b6:	6899      	ldr	r1, [r3, #8]
 80036b8:	651a      	str	r2, [r3, #80]	; 0x50
 80036ba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 80036be:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036c0:	d107      	bne.n	80036d2 <HAL_SPI_Transmit_IT+0x66>
    __HAL_SPI_DISABLE(hspi);
 80036c2:	6811      	ldr	r1, [r2, #0]
 80036c4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80036c8:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 80036ca:	6811      	ldr	r1, [r2, #0]
 80036cc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80036d0:	6011      	str	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80036d4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80036d8:	d107      	bne.n	80036ea <HAL_SPI_Transmit_IT+0x7e>
    SPI_RESET_CRC(hspi);
 80036da:	6811      	ldr	r1, [r2, #0]
 80036dc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80036e0:	6011      	str	r1, [r2, #0]
 80036e2:	6811      	ldr	r1, [r2, #0]
 80036e4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80036e8:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80036ea:	6851      	ldr	r1, [r2, #4]
 80036ec:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 80036f0:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036f2:	6810      	ldr	r0, [r2, #0]
 80036f4:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80036f8:	d109      	bne.n	800370e <HAL_SPI_Transmit_IT+0xa2>
    __HAL_SPI_ENABLE(hspi);
 80036fa:	6811      	ldr	r1, [r2, #0]
 80036fc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003700:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8003702:	2200      	movs	r2, #0
 8003704:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003708:	4770      	bx	lr
    errorcode = HAL_BUSY;
 800370a:	2002      	movs	r0, #2
 800370c:	e7f9      	b.n	8003702 <HAL_SPI_Transmit_IT+0x96>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800370e:	2000      	movs	r0, #0
 8003710:	e7f7      	b.n	8003702 <HAL_SPI_Transmit_IT+0x96>
  __HAL_LOCK(hspi);
 8003712:	2002      	movs	r0, #2
}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	08003973 	.word	0x08003973
 800371c:	080039a7 	.word	0x080039a7

08003720 <HAL_SPI_TransmitReceive_IT>:
{
 8003720:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 8003722:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8003726:	2c01      	cmp	r4, #1
 8003728:	d070      	beq.n	800380c <HAL_SPI_TransmitReceive_IT+0xec>
 800372a:	2401      	movs	r4, #1
 800372c:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 8003730:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003734:	2c01      	cmp	r4, #1
  tmp_state           = hspi->State;
 8003736:	b2e5      	uxtb	r5, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003738:	d008      	beq.n	800374c <HAL_SPI_TransmitReceive_IT+0x2c>
 800373a:	6844      	ldr	r4, [r0, #4]
 800373c:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8003740:	d15e      	bne.n	8003800 <HAL_SPI_TransmitReceive_IT+0xe0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003742:	6884      	ldr	r4, [r0, #8]
 8003744:	2c00      	cmp	r4, #0
 8003746:	d15b      	bne.n	8003800 <HAL_SPI_TransmitReceive_IT+0xe0>
 8003748:	2d04      	cmp	r5, #4
 800374a:	d159      	bne.n	8003800 <HAL_SPI_TransmitReceive_IT+0xe0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800374c:	2900      	cmp	r1, #0
 800374e:	d059      	beq.n	8003804 <HAL_SPI_TransmitReceive_IT+0xe4>
 8003750:	2a00      	cmp	r2, #0
 8003752:	d057      	beq.n	8003804 <HAL_SPI_TransmitReceive_IT+0xe4>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d055      	beq.n	8003804 <HAL_SPI_TransmitReceive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003758:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800375c:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800375e:	2c04      	cmp	r4, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003760:	68c1      	ldr	r1, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003762:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003764:	bf1c      	itt	ne
 8003766:	2405      	movne	r4, #5
 8003768:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800376c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003770:	bf8b      	itete	hi
 8003772:	4a27      	ldrhi	r2, [pc, #156]	; (8003810 <HAL_SPI_TransmitReceive_IT+0xf0>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003774:	4a27      	ldrls	r2, [pc, #156]	; (8003814 <HAL_SPI_TransmitReceive_IT+0xf4>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003776:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003778:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800377a:	bf8c      	ite	hi
 800377c:	4a26      	ldrhi	r2, [pc, #152]	; (8003818 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800377e:	4a27      	ldrls	r2, [pc, #156]	; (800381c <HAL_SPI_TransmitReceive_IT+0xfc>)
 8003780:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003782:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->TxXferSize  = Size;
 8003784:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003786:	2400      	movs	r4, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003788:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800378c:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800378e:	6802      	ldr	r2, [r0, #0]
 8003790:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003792:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003796:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800379a:	d12a      	bne.n	80037f2 <HAL_SPI_TransmitReceive_IT+0xd2>
    hspi->CRCSize = 1U;
 800379c:	2401      	movs	r4, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800379e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 80037a2:	6484      	str	r4, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80037a4:	d803      	bhi.n	80037ae <HAL_SPI_TransmitReceive_IT+0x8e>
 80037a6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80037a8:	2c02      	cmp	r4, #2
      hspi->CRCSize = 2U;
 80037aa:	bf08      	it	eq
 80037ac:	6484      	streq	r4, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 80037ae:	6814      	ldr	r4, [r2, #0]
 80037b0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 80037b4:	6014      	str	r4, [r2, #0]
 80037b6:	6814      	ldr	r4, [r2, #0]
 80037b8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80037bc:	6014      	str	r4, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80037be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80037c2:	d801      	bhi.n	80037c8 <HAL_SPI_TransmitReceive_IT+0xa8>
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d017      	beq.n	80037f8 <HAL_SPI_TransmitReceive_IT+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037c8:	6853      	ldr	r3, [r2, #4]
 80037ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ce:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037d0:	6853      	ldr	r3, [r2, #4]
 80037d2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80037d6:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037d8:	6813      	ldr	r3, [r2, #0]
 80037da:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80037de:	d113      	bne.n	8003808 <HAL_SPI_TransmitReceive_IT+0xe8>
    __HAL_SPI_ENABLE(hspi);
 80037e0:	6811      	ldr	r1, [r2, #0]
 80037e2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80037e6:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 80037e8:	2200      	movs	r2, #0
 80037ea:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 80037f2:	2400      	movs	r4, #0
 80037f4:	6484      	str	r4, [r0, #72]	; 0x48
 80037f6:	e7e2      	b.n	80037be <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037f8:	6853      	ldr	r3, [r2, #4]
 80037fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037fe:	e7e6      	b.n	80037ce <HAL_SPI_TransmitReceive_IT+0xae>
    errorcode = HAL_BUSY;
 8003800:	2302      	movs	r3, #2
 8003802:	e7f1      	b.n	80037e8 <HAL_SPI_TransmitReceive_IT+0xc8>
    errorcode = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e7ef      	b.n	80037e8 <HAL_SPI_TransmitReceive_IT+0xc8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e7ed      	b.n	80037e8 <HAL_SPI_TransmitReceive_IT+0xc8>
  __HAL_LOCK(hspi);
 800380c:	2302      	movs	r3, #2
 800380e:	e7ee      	b.n	80037ee <HAL_SPI_TransmitReceive_IT+0xce>
 8003810:	08003d09 	.word	0x08003d09
 8003814:	08003bf9 	.word	0x08003bf9
 8003818:	08003cb3 	.word	0x08003cb3
 800381c:	08003b93 	.word	0x08003b93

08003820 <HAL_SPI_Receive_IT>:
{
 8003820:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003822:	6886      	ldr	r6, [r0, #8]
{
 8003824:	4604      	mov	r4, r0
 8003826:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003828:	b95e      	cbnz	r6, 8003842 <HAL_SPI_Receive_IT+0x22>
 800382a:	6843      	ldr	r3, [r0, #4]
 800382c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003830:	d107      	bne.n	8003842 <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003832:	2304      	movs	r3, #4
 8003834:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 8003838:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800383a:	4613      	mov	r3, r2
 800383c:	460a      	mov	r2, r1
 800383e:	f7ff bf6f 	b.w	8003720 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 8003842:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d061      	beq.n	800390e <HAL_SPI_Receive_IT+0xee>
 800384a:	2301      	movs	r3, #1
 800384c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8003850:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003854:	2b01      	cmp	r3, #1
 8003856:	b2d8      	uxtb	r0, r3
 8003858:	d155      	bne.n	8003906 <HAL_SPI_Receive_IT+0xe6>
  if ((pData == NULL) || (Size == 0U))
 800385a:	2d00      	cmp	r5, #0
 800385c:	d04b      	beq.n	80038f6 <HAL_SPI_Receive_IT+0xd6>
 800385e:	2a00      	cmp	r2, #0
 8003860:	d049      	beq.n	80038f6 <HAL_SPI_Receive_IT+0xd6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003862:	2304      	movs	r3, #4
 8003864:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003868:	2300      	movs	r3, #0
 800386a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800386c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800386e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 8003872:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003874:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003876:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003878:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800387a:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 800387c:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003880:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003882:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003884:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003888:	bf8b      	itete	hi
 800388a:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800388e:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003892:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003894:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003896:	bf8c      	ite	hi
 8003898:	4a1e      	ldrhi	r2, [pc, #120]	; (8003914 <HAL_SPI_Receive_IT+0xf4>)
    hspi->RxISR = SPI_RxISR_8BIT;
 800389a:	4a1f      	ldrls	r2, [pc, #124]	; (8003918 <HAL_SPI_Receive_IT+0xf8>)
 800389c:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800389e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80038a2:	d107      	bne.n	80038b4 <HAL_SPI_Receive_IT+0x94>
    __HAL_SPI_DISABLE(hspi);
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038b2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80038b6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80038ba:	d121      	bne.n	8003900 <HAL_SPI_Receive_IT+0xe0>
    hspi->CRCSize = 1U;
 80038bc:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80038be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 80038c2:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80038c4:	d803      	bhi.n	80038ce <HAL_SPI_Receive_IT+0xae>
 80038c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80038c8:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 80038ca:	bf08      	it	eq
 80038cc:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038dc:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80038e4:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80038ec:	d10d      	bne.n	800390a <HAL_SPI_Receive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038f4:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80038f6:	2300      	movs	r3, #0
 80038f8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80038fc:	bc70      	pop	{r4, r5, r6}
 80038fe:	4770      	bx	lr
    hspi->CRCSize = 0U;
 8003900:	2200      	movs	r2, #0
 8003902:	64a2      	str	r2, [r4, #72]	; 0x48
 8003904:	e7eb      	b.n	80038de <HAL_SPI_Receive_IT+0xbe>
    errorcode = HAL_BUSY;
 8003906:	2002      	movs	r0, #2
 8003908:	e7f5      	b.n	80038f6 <HAL_SPI_Receive_IT+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800390a:	2000      	movs	r0, #0
 800390c:	e7f3      	b.n	80038f6 <HAL_SPI_Receive_IT+0xd6>
  __HAL_LOCK(hspi);
 800390e:	2002      	movs	r0, #2
 8003910:	e7f4      	b.n	80038fc <HAL_SPI_Receive_IT+0xdc>
 8003912:	bf00      	nop
 8003914:	08003ab1 	.word	0x08003ab1
 8003918:	08003a31 	.word	0x08003a31

0800391c <HAL_SPI_TxRxCpltCallback>:
 800391c:	4770      	bx	lr

0800391e <HAL_SPI_ErrorCallback>:
 800391e:	4770      	bx	lr

08003920 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003920:	b513      	push	{r0, r1, r4, lr}
 8003922:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003924:	f7fe f8fe 	bl	8001b24 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003928:	6821      	ldr	r1, [r4, #0]
 800392a:	684b      	ldr	r3, [r1, #4]
 800392c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 8003930:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003932:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003934:	4620      	mov	r0, r4
 8003936:	2164      	movs	r1, #100	; 0x64
 8003938:	f7ff fae9 	bl	8002f0e <SPI_EndRxTxTransaction>
 800393c:	b118      	cbz	r0, 8003946 <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003940:	f043 0320 	orr.w	r3, r3, #32
 8003944:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003946:	68a3      	ldr	r3, [r4, #8]
 8003948:	b933      	cbnz	r3, 8003958 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800394a:	9301      	str	r3, [sp, #4]
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	9201      	str	r2, [sp, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003958:	2301      	movs	r3, #1
 800395a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800395e:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003960:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003962:	b11b      	cbz	r3, 800396c <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 8003964:	f7ff ffdb 	bl	800391e <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003968:	b002      	add	sp, #8
 800396a:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 800396c:	f7fd fd80 	bl	8001470 <HAL_SPI_TxCpltCallback>
}
 8003970:	e7fa      	b.n	8003968 <SPI_CloseTx_ISR+0x48>

08003972 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003972:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003974:	6803      	ldr	r3, [r0, #0]
 8003976:	7812      	ldrb	r2, [r2, #0]
 8003978:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 800397a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800397c:	3301      	adds	r3, #1
 800397e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8003980:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003982:	3b01      	subs	r3, #1
 8003984:	b29b      	uxth	r3, r3
 8003986:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003988:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800398a:	b29b      	uxth	r3, r3
 800398c:	b953      	cbnz	r3, 80039a4 <SPI_TxISR_8BIT+0x32>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800398e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003994:	bf01      	itttt	eq
 8003996:	6802      	ldreq	r2, [r0, #0]
 8003998:	6813      	ldreq	r3, [r2, #0]
 800399a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800399e:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 80039a0:	f7ff bfbe 	b.w	8003920 <SPI_CloseTx_ISR>
}
 80039a4:	4770      	bx	lr

080039a6 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039a8:	6802      	ldr	r2, [r0, #0]
 80039aa:	f833 1b02 	ldrh.w	r1, [r3], #2
 80039ae:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b0:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80039b2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80039ba:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	b94b      	cbnz	r3, 80039d4 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80039c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80039c6:	bf02      	ittt	eq
 80039c8:	6813      	ldreq	r3, [r2, #0]
 80039ca:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80039ce:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 80039d0:	f7ff bfa6 	b.w	8003920 <SPI_CloseTx_ISR>
}
 80039d4:	4770      	bx	lr

080039d6 <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80039d6:	6802      	ldr	r2, [r0, #0]
 80039d8:	6853      	ldr	r3, [r2, #4]
 80039da:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 80039de:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80039e0:	6053      	str	r3, [r2, #4]
{
 80039e2:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80039e4:	f7fe f89e 	bl	8001b24 <HAL_GetTick>
 80039e8:	2164      	movs	r1, #100	; 0x64
 80039ea:	4602      	mov	r2, r0
 80039ec:	4620      	mov	r0, r4
 80039ee:	f7ff fa53 	bl	8002e98 <SPI_EndRxTransaction>
 80039f2:	b118      	cbz	r0, 80039fc <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80039f6:	f043 0320 	orr.w	r3, r3, #32
 80039fa:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80039fc:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80039fe:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 8003a00:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003a04:	6893      	ldr	r3, [r2, #8]
 8003a06:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003a0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003a0c:	d009      	beq.n	8003a22 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003a0e:	f043 0302 	orr.w	r3, r3, #2
 8003a12:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003a14:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003a18:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 8003a1a:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 8003a1c:	f7ff ff7f 	bl	800391e <HAL_SPI_ErrorCallback>
}
 8003a20:	e004      	b.n	8003a2c <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 8003a22:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f9      	bne.n	8003a1c <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 8003a28:	f7fd fd1a 	bl	8001460 <HAL_SPI_RxCpltCallback>
}
 8003a2c:	bd10      	pop	{r4, pc}
	...

08003a30 <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003a30:	6802      	ldr	r2, [r0, #0]
 8003a32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003a34:	7b12      	ldrb	r2, [r2, #12]
 8003a36:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003a38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003a3e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003a4a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d108      	bne.n	8003a66 <SPI_RxISR_8BIT+0x36>
 8003a54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003a5a:	bf01      	itttt	eq
 8003a5c:	6802      	ldreq	r2, [r0, #0]
 8003a5e:	6813      	ldreq	r3, [r2, #0]
 8003a60:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003a64:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8003a66:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	b943      	cbnz	r3, 8003a80 <SPI_RxISR_8BIT+0x50>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a74:	d102      	bne.n	8003a7c <SPI_RxISR_8BIT+0x4c>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8003a76:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <SPI_RxISR_8BIT+0x54>)
 8003a78:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8003a7a:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8003a7c:	f7ff bfab 	b.w	80039d6 <SPI_CloseRx_ISR>
}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	08003a89 	.word	0x08003a89

08003a88 <SPI_RxISR_8BITCRC>:
{
 8003a88:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f88d 2007 	strb.w	r2, [sp, #7]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a90:	6802      	ldr	r2, [r0, #0]
  tmpreg8 = *ptmpreg8;
 8003a92:	7b12      	ldrb	r2, [r2, #12]
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg8);
 8003a9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 8003a9e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003aa0:	3a01      	subs	r2, #1
 8003aa2:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8003aa4:	b912      	cbnz	r2, 8003aac <SPI_RxISR_8BITCRC+0x24>
}
 8003aa6:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 8003aa8:	f7ff bf95 	b.w	80039d6 <SPI_CloseRx_ISR>
}
 8003aac:	b002      	add	sp, #8
 8003aae:	4770      	bx	lr

08003ab0 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003ab0:	6802      	ldr	r2, [r0, #0]
 8003ab2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003ab4:	68d1      	ldr	r1, [r2, #12]
 8003ab6:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aba:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003abc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003ac8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <SPI_RxISR_16BIT+0x32>
 8003ad2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003ad8:	bf02      	ittt	eq
 8003ada:	6813      	ldreq	r3, [r2, #0]
 8003adc:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003ae0:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8003ae2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	b943      	cbnz	r3, 8003afc <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af0:	d102      	bne.n	8003af8 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8003af2:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <SPI_RxISR_16BIT+0x50>)
 8003af4:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8003af6:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8003af8:	f7ff bf6d 	b.w	80039d6 <SPI_CloseRx_ISR>
}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	08003b05 	.word	0x08003b05

08003b04 <SPI_RxISR_16BITCRC>:
{
 8003b04:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8003b0a:	6803      	ldr	r3, [r0, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8003b10:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b18:	605a      	str	r2, [r3, #4]
}
 8003b1a:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 8003b1c:	f7ff bf5b 	b.w	80039d6 <SPI_CloseRx_ISR>

08003b20 <SPI_CloseRxTx_ISR>:
{
 8003b20:	b510      	push	{r4, lr}
 8003b22:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8003b24:	f7fd fffe 	bl	8001b24 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b28:	6821      	ldr	r1, [r4, #0]
 8003b2a:	684b      	ldr	r3, [r1, #4]
 8003b2c:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 8003b30:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b32:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b34:	4620      	mov	r0, r4
 8003b36:	2164      	movs	r1, #100	; 0x64
 8003b38:	f7ff f9e9 	bl	8002f0e <SPI_EndRxTxTransaction>
 8003b3c:	b118      	cbz	r0, 8003b46 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b40:	f043 0320 	orr.w	r3, r3, #32
 8003b44:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003b46:	6822      	ldr	r2, [r4, #0]
 8003b48:	6893      	ldr	r3, [r2, #8]
 8003b4a:	f013 0f10 	tst.w	r3, #16
 8003b4e:	f04f 0301 	mov.w	r3, #1
 8003b52:	d00c      	beq.n	8003b6e <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 8003b54:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003b58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b5a:	f043 0302 	orr.w	r3, r3, #2
 8003b5e:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003b60:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003b64:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 8003b66:	4620      	mov	r0, r4
 8003b68:	f7ff fed9 	bl	800391e <HAL_SPI_ErrorCallback>
}
 8003b6c:	e00a      	b.n	8003b84 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003b6e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003b70:	b962      	cbnz	r2, 8003b8c <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003b72:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 8003b76:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003b7a:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 8003b7c:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003b7e:	d102      	bne.n	8003b86 <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 8003b80:	f7fd fc6e 	bl	8001460 <HAL_SPI_RxCpltCallback>
}
 8003b84:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 8003b86:	f7ff fec9 	bl	800391c <HAL_SPI_TxRxCpltCallback>
 8003b8a:	e7fb      	b.n	8003b84 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 8003b8c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8003b90:	e7e9      	b.n	8003b66 <SPI_CloseRxTx_ISR+0x46>

08003b92 <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 8003b92:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b94:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b96:	6801      	ldr	r1, [r0, #0]
  if (hspi->TxXferCount >= 2U)
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	2a01      	cmp	r2, #1
 8003b9c:	d918      	bls.n	8003bd0 <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003ba2:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba4:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003ba6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003ba8:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003bae:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	b9fb      	cbnz	r3, 8003bf4 <SPI_2linesTxISR_8BIT+0x62>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bb4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003bb6:	6803      	ldr	r3, [r0, #0]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bb8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003bbc:	d110      	bne.n	8003be0 <SPI_2linesTxISR_8BIT+0x4e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bc4:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bcc:	605a      	str	r2, [r3, #4]
      return;
 8003bce:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	730b      	strb	r3, [r1, #12]
    hspi->pTxBuffPtr++;
 8003bd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8003bda:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	e7e4      	b.n	8003baa <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003be6:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 8003be8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	b90b      	cbnz	r3, 8003bf4 <SPI_2linesTxISR_8BIT+0x62>
      SPI_CloseRxTx_ISR(hspi);
 8003bf0:	f7ff bf96 	b.w	8003b20 <SPI_CloseRxTx_ISR>
}
 8003bf4:	4770      	bx	lr
	...

08003bf8 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 8003bf8:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003bfc:	6802      	ldr	r2, [r0, #0]
 8003bfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
  if (hspi->RxXferCount > 1U)
 8003c00:	b289      	uxth	r1, r1
 8003c02:	2901      	cmp	r1, #1
 8003c04:	d922      	bls.n	8003c4c <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003c06:	68d1      	ldr	r1, [r2, #12]
 8003c08:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c0c:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003c0e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003c12:	3b02      	subs	r3, #2
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003c1a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d103      	bne.n	8003c2c <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c24:	6853      	ldr	r3, [r2, #4]
 8003c26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c2a:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 8003c2c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b9fb      	cbnz	r3, 8003c74 <SPI_2linesRxISR_8BIT+0x7c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c34:	6a82      	ldr	r2, [r0, #40]	; 0x28
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c36:	6803      	ldr	r3, [r0, #0]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c38:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c3c:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c3e:	d111      	bne.n	8003c64 <SPI_2linesRxISR_8BIT+0x6c>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c44:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <SPI_2linesRxISR_8BIT+0x80>)
 8003c48:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8003c4a:	4770      	bx	lr
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003c4c:	7b12      	ldrb	r2, [r2, #12]
 8003c4e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003c50:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003c52:	3301      	adds	r3, #1
 8003c54:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8003c56:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8003c62:	e7e3      	b.n	8003c2c <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003c64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c68:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 8003c6a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	b90b      	cbnz	r3, 8003c74 <SPI_2linesRxISR_8BIT+0x7c>
      SPI_CloseRxTx_ISR(hspi);
 8003c70:	f7ff bf56 	b.w	8003b20 <SPI_CloseRxTx_ISR>
}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	08003c7d 	.word	0x08003c7d

08003c7c <SPI_2linesRxISR_8BITCRC>:
{
 8003c7c:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 8003c7e:	2200      	movs	r2, #0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c80:	6801      	ldr	r1, [r0, #0]
  __IO uint8_t  tmpreg8 = 0;
 8003c82:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg8 = *ptmpreg8;
 8003c86:	7b0a      	ldrb	r2, [r1, #12]
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg8);
 8003c8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 8003c92:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003c94:	3a01      	subs	r2, #1
 8003c96:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8003c98:	b94a      	cbnz	r2, 8003cae <SPI_2linesRxISR_8BITCRC+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003c9a:	684a      	ldr	r2, [r1, #4]
 8003c9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ca0:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8003ca2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	b913      	cbnz	r3, 8003cae <SPI_2linesRxISR_8BITCRC+0x32>
}
 8003ca8:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 8003caa:	f7ff bf39 	b.w	8003b20 <SPI_CloseRxTx_ISR>
}
 8003cae:	b002      	add	sp, #8
 8003cb0:	4770      	bx	lr

08003cb2 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003cb4:	6802      	ldr	r2, [r0, #0]
{
 8003cb6:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb8:	f831 4b02 	ldrh.w	r4, [r1], #2
 8003cbc:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cbe:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8003cc0:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8003cc2:	3901      	subs	r1, #1
 8003cc4:	b289      	uxth	r1, r1
 8003cc6:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003cc8:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8003cca:	b289      	uxth	r1, r1
 8003ccc:	b959      	cbnz	r1, 8003ce6 <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cce:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003cd0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003cd4:	d10a      	bne.n	8003cec <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003cd6:	6813      	ldr	r3, [r2, #0]
 8003cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cdc:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003cde:	6853      	ldr	r3, [r2, #4]
 8003ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce4:	6053      	str	r3, [r2, #4]
}
 8003ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cea:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003cec:	6851      	ldr	r1, [r2, #4]
 8003cee:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003cf2:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003cf4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f3      	bne.n	8003ce6 <SPI_2linesTxISR_16BIT+0x34>
}
 8003cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8003d02:	f7ff bf0d 	b.w	8003b20 <SPI_CloseRxTx_ISR>
	...

08003d08 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003d08:	6801      	ldr	r1, [r0, #0]
 8003d0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003d0c:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003d0e:	68cc      	ldr	r4, [r1, #12]
 8003d10:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d14:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003d16:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8003d1a:	3a01      	subs	r2, #1
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8003d22:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8003d26:	b292      	uxth	r2, r2
 8003d28:	b92a      	cbnz	r2, 8003d36 <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d2a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003d2c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003d30:	d104      	bne.n	8003d3c <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8003d32:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <SPI_2linesRxISR_16BIT+0x4c>)
 8003d34:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 8003d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d3a:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003d3c:	684a      	ldr	r2, [r1, #4]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8003d44:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f4      	bne.n	8003d36 <SPI_2linesRxISR_16BIT+0x2e>
}
 8003d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8003d50:	f7ff bee6 	b.w	8003b20 <SPI_CloseRxTx_ISR>
 8003d54:	08003d59 	.word	0x08003d59

08003d58 <SPI_2linesRxISR_16BITCRC>:
{
 8003d58:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8003d5e:	6803      	ldr	r3, [r0, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8003d64:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6c:	605a      	str	r2, [r3, #4]
}
 8003d6e:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 8003d70:	f7ff bed6 	b.w	8003b20 <SPI_CloseRxTx_ISR>

08003d74 <HAL_SPI_IRQHandler>:
{
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8003d76:	6803      	ldr	r3, [r0, #0]
 8003d78:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003d7a:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d7c:	0656      	lsls	r6, r2, #25
{
 8003d7e:	b085      	sub	sp, #20
 8003d80:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d82:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8003d86:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8003d8a:	d408      	bmi.n	8003d9e <HAL_SPI_IRQHandler+0x2a>
 8003d8c:	07d6      	lsls	r6, r2, #31
 8003d8e:	d506      	bpl.n	8003d9e <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d90:	066e      	lsls	r6, r5, #25
 8003d92:	d504      	bpl.n	8003d9e <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8003d94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 8003d96:	b005      	add	sp, #20
 8003d98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8003d9c:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d9e:	0796      	lsls	r6, r2, #30
 8003da0:	d504      	bpl.n	8003dac <HAL_SPI_IRQHandler+0x38>
 8003da2:	0628      	lsls	r0, r5, #24
 8003da4:	d502      	bpl.n	8003dac <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8003da6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003da8:	4620      	mov	r0, r4
 8003daa:	e7f4      	b.n	8003d96 <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003dac:	ea41 1152 	orr.w	r1, r1, r2, lsr #5
 8003db0:	f3c2 2000 	ubfx	r0, r2, #8, #1
 8003db4:	f001 0101 	and.w	r1, r1, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003db8:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003dba:	ea51 0200 	orrs.w	r2, r1, r0
 8003dbe:	d057      	beq.n	8003e70 <HAL_SPI_IRQHandler+0xfc>
 8003dc0:	06aa      	lsls	r2, r5, #26
 8003dc2:	d555      	bpl.n	8003e70 <HAL_SPI_IRQHandler+0xfc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003dc4:	b17f      	cbz	r7, 8003de6 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003dc6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8003dca:	2a03      	cmp	r2, #3
 8003dcc:	f04f 0100 	mov.w	r1, #0
 8003dd0:	d048      	beq.n	8003e64 <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003dd2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003dd4:	f042 0204 	orr.w	r2, r2, #4
 8003dd8:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dda:	9100      	str	r1, [sp, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	9200      	str	r2, [sp, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	9200      	str	r2, [sp, #0]
 8003de4:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003de6:	07f1      	lsls	r1, r6, #31
 8003de8:	d50c      	bpl.n	8003e04 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003dea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003df2:	2200      	movs	r2, #0
 8003df4:	9202      	str	r2, [sp, #8]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	9202      	str	r2, [sp, #8]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003e04:	b140      	cbz	r0, 8003e18 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e06:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003e08:	f042 0208 	orr.w	r2, r2, #8
 8003e0c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	9203      	str	r2, [sp, #12]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	9203      	str	r2, [sp, #12]
 8003e16:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e18:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003e1a:	b34a      	cbz	r2, 8003e70 <HAL_SPI_IRQHandler+0xfc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e22:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003e24:	2201      	movs	r2, #1
 8003e26:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e2a:	07aa      	lsls	r2, r5, #30
 8003e2c:	d022      	beq.n	8003e74 <HAL_SPI_IRQHandler+0x100>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e2e:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e32:	f022 0203 	bic.w	r2, r2, #3
 8003e36:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003e38:	b140      	cbz	r0, 8003e4c <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_SPI_IRQHandler+0x108>)
 8003e3c:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e3e:	f7fd fef1 	bl	8001c24 <HAL_DMA_Abort_IT>
 8003e42:	b118      	cbz	r0, 8003e4c <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e44:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e4a:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003e4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e4e:	b178      	cbz	r0, 8003e70 <HAL_SPI_IRQHandler+0xfc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_SPI_IRQHandler+0x108>)
 8003e52:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e54:	f7fd fee6 	bl	8001c24 <HAL_DMA_Abort_IT>
 8003e58:	b150      	cbz	r0, 8003e70 <HAL_SPI_IRQHandler+0xfc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e5a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e60:	6623      	str	r3, [r4, #96]	; 0x60
 8003e62:	e005      	b.n	8003e70 <HAL_SPI_IRQHandler+0xfc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e64:	9101      	str	r1, [sp, #4]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	9201      	str	r2, [sp, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	9b01      	ldr	r3, [sp, #4]
}
 8003e70:	b005      	add	sp, #20
 8003e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff fd52 	bl	800391e <HAL_SPI_ErrorCallback>
 8003e7a:	e7f9      	b.n	8003e70 <HAL_SPI_IRQHandler+0xfc>
 8003e7c:	08003e81 	.word	0x08003e81

08003e80 <SPI_DMAAbortOnError>:
{
 8003e80:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e82:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003e8a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8003e8c:	f7ff fd47 	bl	800391e <HAL_SPI_ErrorCallback>
}
 8003e90:	bd08      	pop	{r3, pc}

08003e92 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003e92:	4770      	bx	lr

08003e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e98:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e9a:	6921      	ldr	r1, [r4, #16]
 8003e9c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e9e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ea0:	69c0      	ldr	r0, [r0, #28]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	6961      	ldr	r1, [r4, #20]
 8003ea6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ea8:	4992      	ldr	r1, [pc, #584]	; (80040f4 <UART_SetConfig+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eaa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eac:	4029      	ands	r1, r5
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	68e1      	ldr	r1, [r4, #12]
 8003eb6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ebe:	4a8e      	ldr	r2, [pc, #568]	; (80040f8 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ec0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ec2:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ec4:	bf1c      	itt	ne
 8003ec6:	6a22      	ldrne	r2, [r4, #32]
 8003ec8:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed4:	4a89      	ldr	r2, [pc, #548]	; (80040fc <UART_SetConfig+0x268>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d11b      	bne.n	8003f12 <UART_SetConfig+0x7e>
 8003eda:	4b89      	ldr	r3, [pc, #548]	; (8004100 <UART_SetConfig+0x26c>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	f200 80d5 	bhi.w	8004096 <UART_SetConfig+0x202>
 8003eec:	4a85      	ldr	r2, [pc, #532]	; (8004104 <UART_SetConfig+0x270>)
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003ef4:	f040 809f 	bne.w	8004036 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d828      	bhi.n	8003f4e <UART_SetConfig+0xba>
 8003efc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f00:	00ce00df 	.word	0x00ce00df
 8003f04:	00270099 	.word	0x00270099
 8003f08:	002700d4 	.word	0x002700d4
 8003f0c:	00270027 	.word	0x00270027
 8003f10:	00e3      	.short	0x00e3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f12:	4a7d      	ldr	r2, [pc, #500]	; (8004108 <UART_SetConfig+0x274>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d108      	bne.n	8003f2a <UART_SetConfig+0x96>
 8003f18:	4b79      	ldr	r3, [pc, #484]	; (8004100 <UART_SetConfig+0x26c>)
 8003f1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f1e:	4b79      	ldr	r3, [pc, #484]	; (8004104 <UART_SetConfig+0x270>)
 8003f20:	f002 020c 	and.w	r2, r2, #12
 8003f24:	4413      	add	r3, r2
 8003f26:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f28:	e7e2      	b.n	8003ef0 <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f2a:	4a78      	ldr	r2, [pc, #480]	; (800410c <UART_SetConfig+0x278>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d119      	bne.n	8003f64 <UART_SetConfig+0xd0>
 8003f30:	4b73      	ldr	r3, [pc, #460]	; (8004100 <UART_SetConfig+0x26c>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	f000 80b7 	beq.w	80040ae <UART_SetConfig+0x21a>
 8003f40:	d807      	bhi.n	8003f52 <UART_SetConfig+0xbe>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80b8 	beq.w	80040b8 <UART_SetConfig+0x224>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	f000 80aa 	beq.w	80040a2 <UART_SetConfig+0x20e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4e:	2001      	movs	r0, #1
 8003f50:	e04e      	b.n	8003ff0 <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f52:	2b30      	cmp	r3, #48	; 0x30
 8003f54:	d1fb      	bne.n	8003f4e <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f56:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003f5a:	f000 80b4 	beq.w	80040c6 <UART_SetConfig+0x232>
 8003f5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003f62:	e083      	b.n	800406c <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f64:	4a6a      	ldr	r2, [pc, #424]	; (8004110 <UART_SetConfig+0x27c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10f      	bne.n	8003f8a <UART_SetConfig+0xf6>
 8003f6a:	4b65      	ldr	r3, [pc, #404]	; (8004100 <UART_SetConfig+0x26c>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f74:	2b80      	cmp	r3, #128	; 0x80
 8003f76:	f000 809a 	beq.w	80040ae <UART_SetConfig+0x21a>
 8003f7a:	d804      	bhi.n	8003f86 <UART_SetConfig+0xf2>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 809b 	beq.w	80040b8 <UART_SetConfig+0x224>
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	e7e1      	b.n	8003f4a <UART_SetConfig+0xb6>
 8003f86:	2bc0      	cmp	r3, #192	; 0xc0
 8003f88:	e7e4      	b.n	8003f54 <UART_SetConfig+0xc0>
 8003f8a:	4a62      	ldr	r2, [pc, #392]	; (8004114 <UART_SetConfig+0x280>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d112      	bne.n	8003fb6 <UART_SetConfig+0x122>
 8003f90:	4b5b      	ldr	r3, [pc, #364]	; (8004100 <UART_SetConfig+0x26c>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9e:	f000 8086 	beq.w	80040ae <UART_SetConfig+0x21a>
 8003fa2:	d805      	bhi.n	8003fb0 <UART_SetConfig+0x11c>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8087 	beq.w	80040b8 <UART_SetConfig+0x224>
 8003faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fae:	e7cc      	b.n	8003f4a <UART_SetConfig+0xb6>
 8003fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fb4:	e7ce      	b.n	8003f54 <UART_SetConfig+0xc0>
 8003fb6:	4a50      	ldr	r2, [pc, #320]	; (80040f8 <UART_SetConfig+0x264>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d1c8      	bne.n	8003f4e <UART_SetConfig+0xba>
 8003fbc:	4b50      	ldr	r3, [pc, #320]	; (8004100 <UART_SetConfig+0x26c>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d015      	beq.n	8003ff8 <UART_SetConfig+0x164>
 8003fcc:	d806      	bhi.n	8003fdc <UART_SetConfig+0x148>
 8003fce:	b15b      	cbz	r3, 8003fe8 <UART_SetConfig+0x154>
 8003fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd4:	d1bb      	bne.n	8003f4e <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd6:	f7fe fafb 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
        break;
 8003fda:	e007      	b.n	8003fec <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fe0:	d1b5      	bne.n	8003f4e <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 8003fe2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003fe6:	e008      	b.n	8003ffa <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7fe fe6a 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003fec:	b928      	cbnz	r0, 8003ffa <UART_SetConfig+0x166>
 8003fee:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003ff2:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8003ff8:	4847      	ldr	r0, [pc, #284]	; (8004118 <UART_SetConfig+0x284>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ffa:	6862      	ldr	r2, [r4, #4]
 8003ffc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004000:	4283      	cmp	r3, r0
 8004002:	d8a4      	bhi.n	8003f4e <UART_SetConfig+0xba>
 8004004:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004008:	d8a1      	bhi.n	8003f4e <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800400a:	0851      	lsrs	r1, r2, #1
 800400c:	2500      	movs	r5, #0
 800400e:	468c      	mov	ip, r1
 8004010:	f44f 7680 	mov.w	r6, #256	; 0x100
 8004014:	4629      	mov	r1, r5
 8004016:	fbe0 c106 	umlal	ip, r1, r0, r6
 800401a:	462b      	mov	r3, r5
 800401c:	4660      	mov	r0, ip
 800401e:	f7fc f92f 	bl	8000280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004022:	4b3e      	ldr	r3, [pc, #248]	; (800411c <UART_SetConfig+0x288>)
 8004024:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004028:	429a      	cmp	r2, r3
 800402a:	d890      	bhi.n	8003f4e <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	60d8      	str	r0, [r3, #12]
 8004030:	e7dd      	b.n	8003fee <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 8004032:	4839      	ldr	r0, [pc, #228]	; (8004118 <UART_SetConfig+0x284>)
 8004034:	e047      	b.n	80040c6 <UART_SetConfig+0x232>
    switch (clocksource)
 8004036:	2b08      	cmp	r3, #8
 8004038:	d889      	bhi.n	8003f4e <UART_SetConfig+0xba>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <UART_SetConfig+0x1ac>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004065 	.word	0x08004065
 8004044:	0800408b 	.word	0x0800408b
 8004048:	080040b5 	.word	0x080040b5
 800404c:	08003f4f 	.word	0x08003f4f
 8004050:	08004091 	.word	0x08004091
 8004054:	08003f4f 	.word	0x08003f4f
 8004058:	08003f4f 	.word	0x08003f4f
 800405c:	08003f4f 	.word	0x08003f4f
 8004060:	08003f5f 	.word	0x08003f5f
        pclk = HAL_RCC_GetPCLK1Freq();
 8004064:	f7fe fe2c 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004068:	2800      	cmp	r0, #0
 800406a:	d0c0      	beq.n	8003fee <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800406c:	6862      	ldr	r2, [r4, #4]
 800406e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004072:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004076:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800407a:	f1a3 0110 	sub.w	r1, r3, #16
 800407e:	4291      	cmp	r1, r2
 8004080:	f63f af65 	bhi.w	8003f4e <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	60d3      	str	r3, [r2, #12]
 8004088:	e7b1      	b.n	8003fee <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800408a:	f7fe fe2b 	bl	8002ce4 <HAL_RCC_GetPCLK2Freq>
        break;
 800408e:	e7eb      	b.n	8004068 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8004090:	f7fe fa9e 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
        break;
 8004094:	e7e8      	b.n	8004068 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004096:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800409a:	d1f6      	bne.n	800408a <UART_SetConfig+0x1f6>
        pclk = HAL_RCC_GetPCLK2Freq();
 800409c:	f7fe fe22 	bl	8002ce4 <HAL_RCC_GetPCLK2Freq>
        break;
 80040a0:	e00f      	b.n	80040c2 <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80040a6:	d1f3      	bne.n	8004090 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 80040a8:	f7fe fa92 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
        break;
 80040ac:	e009      	b.n	80040c2 <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80040b2:	d0be      	beq.n	8004032 <UART_SetConfig+0x19e>
        pclk = (uint32_t) HSI_VALUE;
 80040b4:	4818      	ldr	r0, [pc, #96]	; (8004118 <UART_SetConfig+0x284>)
 80040b6:	e7d9      	b.n	800406c <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80040bc:	d1d2      	bne.n	8004064 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80040be:	f7fe fdff 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d093      	beq.n	8003fee <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040c6:	6862      	ldr	r2, [r4, #4]
 80040c8:	0853      	lsrs	r3, r2, #1
 80040ca:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ce:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040d2:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d6:	f1a0 0210 	sub.w	r2, r0, #16
 80040da:	429a      	cmp	r2, r3
 80040dc:	f63f af37 	bhi.w	8003f4e <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040e0:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 80040e4:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040e6:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040e8:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80040ec:	4318      	orrs	r0, r3
 80040ee:	60d0      	str	r0, [r2, #12]
 80040f0:	e77d      	b.n	8003fee <UART_SetConfig+0x15a>
 80040f2:	bf00      	nop
 80040f4:	efff69f3 	.word	0xefff69f3
 80040f8:	40008000 	.word	0x40008000
 80040fc:	40013800 	.word	0x40013800
 8004100:	40021000 	.word	0x40021000
 8004104:	08005cb0 	.word	0x08005cb0
 8004108:	40004400 	.word	0x40004400
 800410c:	40004800 	.word	0x40004800
 8004110:	40004c00 	.word	0x40004c00
 8004114:	40005000 	.word	0x40005000
 8004118:	00f42400 	.word	0x00f42400
 800411c:	000ffcff 	.word	0x000ffcff

08004120 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004120:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004122:	07da      	lsls	r2, r3, #31
{
 8004124:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004126:	d506      	bpl.n	8004136 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004128:	6801      	ldr	r1, [r0, #0]
 800412a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800412c:	684a      	ldr	r2, [r1, #4]
 800412e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004132:	4322      	orrs	r2, r4
 8004134:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004136:	079c      	lsls	r4, r3, #30
 8004138:	d506      	bpl.n	8004148 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800413a:	6801      	ldr	r1, [r0, #0]
 800413c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800413e:	684a      	ldr	r2, [r1, #4]
 8004140:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004144:	4322      	orrs	r2, r4
 8004146:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004148:	0759      	lsls	r1, r3, #29
 800414a:	d506      	bpl.n	800415a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800414c:	6801      	ldr	r1, [r0, #0]
 800414e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004150:	684a      	ldr	r2, [r1, #4]
 8004152:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004156:	4322      	orrs	r2, r4
 8004158:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800415a:	071a      	lsls	r2, r3, #28
 800415c:	d506      	bpl.n	800416c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800415e:	6801      	ldr	r1, [r0, #0]
 8004160:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004162:	684a      	ldr	r2, [r1, #4]
 8004164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004168:	4322      	orrs	r2, r4
 800416a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800416c:	06dc      	lsls	r4, r3, #27
 800416e:	d506      	bpl.n	800417e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004170:	6801      	ldr	r1, [r0, #0]
 8004172:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004174:	688a      	ldr	r2, [r1, #8]
 8004176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800417a:	4322      	orrs	r2, r4
 800417c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800417e:	0699      	lsls	r1, r3, #26
 8004180:	d506      	bpl.n	8004190 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004182:	6801      	ldr	r1, [r0, #0]
 8004184:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004186:	688a      	ldr	r2, [r1, #8]
 8004188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800418c:	4322      	orrs	r2, r4
 800418e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004190:	065a      	lsls	r2, r3, #25
 8004192:	d50f      	bpl.n	80041b4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004194:	6801      	ldr	r1, [r0, #0]
 8004196:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004198:	684a      	ldr	r2, [r1, #4]
 800419a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800419e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041a0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041a4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041a6:	d105      	bne.n	80041b4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a8:	684a      	ldr	r2, [r1, #4]
 80041aa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80041ac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80041b0:	4322      	orrs	r2, r4
 80041b2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	d506      	bpl.n	80041c6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b8:	6802      	ldr	r2, [r0, #0]
 80041ba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80041bc:	6853      	ldr	r3, [r2, #4]
 80041be:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80041c2:	430b      	orrs	r3, r1
 80041c4:	6053      	str	r3, [r2, #4]
  }
}
 80041c6:	bd10      	pop	{r4, pc}

080041c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80041d0:	4604      	mov	r4, r0
 80041d2:	460e      	mov	r6, r1
 80041d4:	4615      	mov	r5, r2
 80041d6:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	69d3      	ldr	r3, [r2, #28]
 80041dc:	ea36 0303 	bics.w	r3, r6, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	42ab      	cmp	r3, r5
 80041e8:	d001      	beq.n	80041ee <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80041ea:	2000      	movs	r0, #0
 80041ec:	e025      	b.n	800423a <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	f1b8 3fff 	cmp.w	r8, #4294967295
 80041f2:	d0f2      	beq.n	80041da <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f4:	f7fd fc96 	bl	8001b24 <HAL_GetTick>
 80041f8:	1bc0      	subs	r0, r0, r7
 80041fa:	4540      	cmp	r0, r8
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	d802      	bhi.n	8004206 <UART_WaitOnFlagUntilTimeout+0x3e>
 8004200:	f1b8 0f00 	cmp.w	r8, #0
 8004204:	d11b      	bne.n	800423e <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800420a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	e840 3200 	strex	r2, r3, [r0]
 8004212:	2a00      	cmp	r2, #0
 8004214:	d1f7      	bne.n	8004206 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	f100 0308 	add.w	r3, r0, #8
 800421a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	f100 0108 	add.w	r1, r0, #8
 8004226:	e841 3200 	strex	r2, r3, [r1]
 800422a:	2a00      	cmp	r2, #0
 800422c:	d1f3      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800422e:	2320      	movs	r3, #32
 8004230:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004232:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004234:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8004238:	2003      	movs	r0, #3
}
 800423a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800423e:	6803      	ldr	r3, [r0, #0]
 8004240:	075a      	lsls	r2, r3, #29
 8004242:	d5c9      	bpl.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004244:	69c3      	ldr	r3, [r0, #28]
 8004246:	051b      	lsls	r3, r3, #20
 8004248:	d5c6      	bpl.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800424a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800424e:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	e840 3200 	strex	r2, r3, [r0]
 800425c:	2a00      	cmp	r2, #0
 800425e:	d1f7      	bne.n	8004250 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	f100 0308 	add.w	r3, r0, #8
 8004264:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004268:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	f100 0108 	add.w	r1, r0, #8
 8004270:	e841 3200 	strex	r2, r3, [r1]
 8004274:	2a00      	cmp	r2, #0
 8004276:	d1f3      	bne.n	8004260 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8004278:	2320      	movs	r3, #32
 800427a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800427c:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800427e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004282:	e7d7      	b.n	8004234 <UART_WaitOnFlagUntilTimeout+0x6c>

08004284 <HAL_UART_Transmit>:
{
 8004284:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004288:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800428a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800428c:	2b20      	cmp	r3, #32
{
 800428e:	4604      	mov	r4, r0
 8004290:	460e      	mov	r6, r1
 8004292:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004294:	d14e      	bne.n	8004334 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8004296:	2900      	cmp	r1, #0
 8004298:	d04a      	beq.n	8004330 <HAL_UART_Transmit+0xac>
 800429a:	2a00      	cmp	r2, #0
 800429c:	d048      	beq.n	8004330 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800429e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d046      	beq.n	8004334 <HAL_UART_Transmit+0xb0>
 80042a6:	2301      	movs	r3, #1
 80042a8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ac:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ae:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b4:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80042b6:	f7fd fc35 	bl	8001b24 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ba:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 80042bc:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80042c4:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 80042c6:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ca:	d103      	bne.n	80042d4 <HAL_UART_Transmit+0x50>
 80042cc:	6922      	ldr	r2, [r4, #16]
 80042ce:	b90a      	cbnz	r2, 80042d4 <HAL_UART_Transmit+0x50>
 80042d0:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80042d2:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80042d4:	2200      	movs	r2, #0
 80042d6:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80042da:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042de:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80042e2:	b292      	uxth	r2, r2
 80042e4:	b93a      	cbnz	r2, 80042f6 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e6:	2140      	movs	r1, #64	; 0x40
 80042e8:	4620      	mov	r0, r4
 80042ea:	f7ff ff6d 	bl	80041c8 <UART_WaitOnFlagUntilTimeout>
 80042ee:	b950      	cbnz	r0, 8004306 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80042f0:	2320      	movs	r3, #32
 80042f2:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80042f4:	e008      	b.n	8004308 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	2200      	movs	r2, #0
 80042f8:	2180      	movs	r1, #128	; 0x80
 80042fa:	4620      	mov	r0, r4
 80042fc:	9303      	str	r3, [sp, #12]
 80042fe:	f7ff ff63 	bl	80041c8 <UART_WaitOnFlagUntilTimeout>
 8004302:	9b03      	ldr	r3, [sp, #12]
 8004304:	b118      	cbz	r0, 800430e <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8004306:	2003      	movs	r0, #3
}
 8004308:	b004      	add	sp, #16
 800430a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800430e:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8004310:	b95e      	cbnz	r6, 800432a <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004312:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004316:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800431a:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800431c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8004320:	3a01      	subs	r2, #1
 8004322:	b292      	uxth	r2, r2
 8004324:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8004328:	e7d7      	b.n	80042da <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800432a:	f816 2b01 	ldrb.w	r2, [r6], #1
 800432e:	e7f4      	b.n	800431a <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8004330:	2001      	movs	r0, #1
 8004332:	e7e9      	b.n	8004308 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8004334:	2002      	movs	r0, #2
 8004336:	e7e7      	b.n	8004308 <HAL_UART_Transmit+0x84>

08004338 <UART_CheckIdleState>:
{
 8004338:	b530      	push	{r4, r5, lr}
 800433a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	2500      	movs	r5, #0
{
 800433e:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8004344:	f7fd fbee 	bl	8001b24 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800434e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004350:	d415      	bmi.n	800437e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004352:	6822      	ldr	r2, [r4, #0]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	0752      	lsls	r2, r2, #29
 8004358:	d509      	bpl.n	800436e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800435e:	9200      	str	r2, [sp, #0]
 8004360:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004364:	2200      	movs	r2, #0
 8004366:	4620      	mov	r0, r4
 8004368:	f7ff ff2e 	bl	80041c8 <UART_WaitOnFlagUntilTimeout>
 800436c:	b9a0      	cbnz	r0, 8004398 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800436e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004370:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004372:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004374:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004378:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437a:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 800437c:	e00d      	b.n	800439a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800437e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004382:	9200      	str	r2, [sp, #0]
 8004384:	9003      	str	r0, [sp, #12]
 8004386:	462a      	mov	r2, r5
 8004388:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800438c:	4620      	mov	r0, r4
 800438e:	f7ff ff1b 	bl	80041c8 <UART_WaitOnFlagUntilTimeout>
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	2800      	cmp	r0, #0
 8004396:	d0dc      	beq.n	8004352 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004398:	2003      	movs	r0, #3
}
 800439a:	b005      	add	sp, #20
 800439c:	bd30      	pop	{r4, r5, pc}

0800439e <HAL_UART_Init>:
{
 800439e:	b510      	push	{r4, lr}
  if (huart == NULL)
 80043a0:	4604      	mov	r4, r0
 80043a2:	b340      	cbz	r0, 80043f6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80043a4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80043a6:	b91b      	cbnz	r3, 80043b0 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80043a8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80043ac:	f7ff fd71 	bl	8003e92 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80043b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80043b2:	2324      	movs	r3, #36	; 0x24
 80043b4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043be:	4620      	mov	r0, r4
 80043c0:	f7ff fd68 	bl	8003e94 <UART_SetConfig>
 80043c4:	2801      	cmp	r0, #1
 80043c6:	d016      	beq.n	80043f6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043ca:	b113      	cbz	r3, 80043d2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80043cc:	4620      	mov	r0, r4
 80043ce:	f7ff fea7 	bl	8004120 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80043ea:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80043ec:	601a      	str	r2, [r3, #0]
}
 80043ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80043f2:	f7ff bfa1 	b.w	8004338 <UART_CheckIdleState>
}
 80043f6:	2001      	movs	r0, #1
 80043f8:	bd10      	pop	{r4, pc}
	...

080043fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80043fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004434 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004400:	f7fd fb2a 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004404:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004406:	e003      	b.n	8004410 <LoopCopyDataInit>

08004408 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800440a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800440c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800440e:	3104      	adds	r1, #4

08004410 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004410:	480a      	ldr	r0, [pc, #40]	; (800443c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004414:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004416:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004418:	d3f6      	bcc.n	8004408 <CopyDataInit>
	ldr	r2, =_sbss
 800441a:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <LoopForever+0x12>)
	b	LoopFillZerobss
 800441c:	e002      	b.n	8004424 <LoopFillZerobss>

0800441e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800441e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004420:	f842 3b04 	str.w	r3, [r2], #4

08004424 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004424:	4b08      	ldr	r3, [pc, #32]	; (8004448 <LoopForever+0x16>)
	cmp	r2, r3
 8004426:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004428:	d3f9      	bcc.n	800441e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800442a:	f000 f861 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800442e:	f7fc f8a9 	bl	8000584 <main>

08004432 <LoopForever>:

LoopForever:
    b LoopForever
 8004432:	e7fe      	b.n	8004432 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004434:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004438:	08006610 	.word	0x08006610
	ldr	r0, =_sdata
 800443c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004440:	200000f0 	.word	0x200000f0
	ldr	r2, =_sbss
 8004444:	200000f0 	.word	0x200000f0
	ldr	r3, = _ebss
 8004448:	20000b78 	.word	0x20000b78

0800444c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800444c:	e7fe      	b.n	800444c <ADC1_2_IRQHandler>

0800444e <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800444e:	2001      	movs	r0, #1
 8004450:	4770      	bx	lr

08004452 <_kill>:

int _kill(int pid, int sig)
{
 8004452:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004454:	f000 f846 	bl	80044e4 <__errno>
 8004458:	2316      	movs	r3, #22
 800445a:	6003      	str	r3, [r0, #0]
	return -1;
}
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	bd08      	pop	{r3, pc}

08004462 <_exit>:

void _exit (int status)
{
 8004462:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004464:	f000 f83e 	bl	80044e4 <__errno>
 8004468:	2316      	movs	r3, #22
 800446a:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800446c:	e7fe      	b.n	800446c <_exit+0xa>

0800446e <_read>:
}

int _read (int file, char *ptr, int len)
{
 800446e:	b510      	push	{r4, lr}
 8004470:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8004472:	f3af 8000 	nop.w
 8004476:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8004478:	2001      	movs	r0, #1
 800447a:	bd10      	pop	{r4, pc}

0800447c <_write>:

int _write(int file, char *ptr, int len)
{
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	460d      	mov	r5, r1
 8004480:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004482:	460e      	mov	r6, r1
 8004484:	1b73      	subs	r3, r6, r5
 8004486:	429c      	cmp	r4, r3
 8004488:	dc01      	bgt.n	800448e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800448a:	4620      	mov	r0, r4
 800448c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800448e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004492:	f7fc f9c5 	bl	8000820 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004496:	e7f5      	b.n	8004484 <_write+0x8>

08004498 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004498:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <_sbrk+0x2c>)
 800449a:	6811      	ldr	r1, [r2, #0]
{
 800449c:	b508      	push	{r3, lr}
 800449e:	4603      	mov	r3, r0
	if (heap_end == 0)
 80044a0:	b909      	cbnz	r1, 80044a6 <_sbrk+0xe>
		heap_end = &end;
 80044a2:	4909      	ldr	r1, [pc, #36]	; (80044c8 <_sbrk+0x30>)
 80044a4:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80044a6:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80044a8:	4669      	mov	r1, sp
 80044aa:	4403      	add	r3, r0
 80044ac:	428b      	cmp	r3, r1
 80044ae:	d906      	bls.n	80044be <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80044b0:	f000 f818 	bl	80044e4 <__errno>
 80044b4:	230c      	movs	r3, #12
 80044b6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80044bc:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80044be:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80044c0:	e7fc      	b.n	80044bc <_sbrk+0x24>
 80044c2:	bf00      	nop
 80044c4:	20000b60 	.word	0x20000b60
 80044c8:	20000b78 	.word	0x20000b78

080044cc <_close>:

int _close(int file)
{
	return -1;
}
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	4770      	bx	lr

080044d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80044d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044d6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80044d8:	2000      	movs	r0, #0
 80044da:	4770      	bx	lr

080044dc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80044dc:	2001      	movs	r0, #1
 80044de:	4770      	bx	lr

080044e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80044e0:	2000      	movs	r0, #0
 80044e2:	4770      	bx	lr

080044e4 <__errno>:
 80044e4:	4b01      	ldr	r3, [pc, #4]	; (80044ec <__errno+0x8>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	2000008c 	.word	0x2000008c

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4d0d      	ldr	r5, [pc, #52]	; (8004528 <__libc_init_array+0x38>)
 80044f4:	4c0d      	ldr	r4, [pc, #52]	; (800452c <__libc_init_array+0x3c>)
 80044f6:	1b64      	subs	r4, r4, r5
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	2600      	movs	r6, #0
 80044fc:	42a6      	cmp	r6, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	4d0b      	ldr	r5, [pc, #44]	; (8004530 <__libc_init_array+0x40>)
 8004502:	4c0c      	ldr	r4, [pc, #48]	; (8004534 <__libc_init_array+0x44>)
 8004504:	f001 fb70 	bl	8005be8 <_init>
 8004508:	1b64      	subs	r4, r4, r5
 800450a:	10a4      	asrs	r4, r4, #2
 800450c:	2600      	movs	r6, #0
 800450e:	42a6      	cmp	r6, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f855 3b04 	ldr.w	r3, [r5], #4
 8004518:	4798      	blx	r3
 800451a:	3601      	adds	r6, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004522:	4798      	blx	r3
 8004524:	3601      	adds	r6, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	08006600 	.word	0x08006600
 800452c:	08006600 	.word	0x08006600
 8004530:	08006600 	.word	0x08006600
 8004534:	08006604 	.word	0x08006604

08004538 <malloc>:
 8004538:	4b02      	ldr	r3, [pc, #8]	; (8004544 <malloc+0xc>)
 800453a:	4601      	mov	r1, r0
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	f000 b885 	b.w	800464c <_malloc_r>
 8004542:	bf00      	nop
 8004544:	2000008c 	.word	0x2000008c

08004548 <memcpy>:
 8004548:	440a      	add	r2, r1
 800454a:	4291      	cmp	r1, r2
 800454c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004550:	d100      	bne.n	8004554 <memcpy+0xc>
 8004552:	4770      	bx	lr
 8004554:	b510      	push	{r4, lr}
 8004556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800455a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800455e:	4291      	cmp	r1, r2
 8004560:	d1f9      	bne.n	8004556 <memcpy+0xe>
 8004562:	bd10      	pop	{r4, pc}

08004564 <memset>:
 8004564:	4402      	add	r2, r0
 8004566:	4603      	mov	r3, r0
 8004568:	4293      	cmp	r3, r2
 800456a:	d100      	bne.n	800456e <memset+0xa>
 800456c:	4770      	bx	lr
 800456e:	f803 1b01 	strb.w	r1, [r3], #1
 8004572:	e7f9      	b.n	8004568 <memset+0x4>

08004574 <_free_r>:
 8004574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004576:	2900      	cmp	r1, #0
 8004578:	d044      	beq.n	8004604 <_free_r+0x90>
 800457a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800457e:	9001      	str	r0, [sp, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f1a1 0404 	sub.w	r4, r1, #4
 8004586:	bfb8      	it	lt
 8004588:	18e4      	addlt	r4, r4, r3
 800458a:	f000 fd45 	bl	8005018 <__malloc_lock>
 800458e:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <_free_r+0x94>)
 8004590:	9801      	ldr	r0, [sp, #4]
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	b933      	cbnz	r3, 80045a4 <_free_r+0x30>
 8004596:	6063      	str	r3, [r4, #4]
 8004598:	6014      	str	r4, [r2, #0]
 800459a:	b003      	add	sp, #12
 800459c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045a0:	f000 bd40 	b.w	8005024 <__malloc_unlock>
 80045a4:	42a3      	cmp	r3, r4
 80045a6:	d908      	bls.n	80045ba <_free_r+0x46>
 80045a8:	6825      	ldr	r5, [r4, #0]
 80045aa:	1961      	adds	r1, r4, r5
 80045ac:	428b      	cmp	r3, r1
 80045ae:	bf01      	itttt	eq
 80045b0:	6819      	ldreq	r1, [r3, #0]
 80045b2:	685b      	ldreq	r3, [r3, #4]
 80045b4:	1949      	addeq	r1, r1, r5
 80045b6:	6021      	streq	r1, [r4, #0]
 80045b8:	e7ed      	b.n	8004596 <_free_r+0x22>
 80045ba:	461a      	mov	r2, r3
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	b10b      	cbz	r3, 80045c4 <_free_r+0x50>
 80045c0:	42a3      	cmp	r3, r4
 80045c2:	d9fa      	bls.n	80045ba <_free_r+0x46>
 80045c4:	6811      	ldr	r1, [r2, #0]
 80045c6:	1855      	adds	r5, r2, r1
 80045c8:	42a5      	cmp	r5, r4
 80045ca:	d10b      	bne.n	80045e4 <_free_r+0x70>
 80045cc:	6824      	ldr	r4, [r4, #0]
 80045ce:	4421      	add	r1, r4
 80045d0:	1854      	adds	r4, r2, r1
 80045d2:	42a3      	cmp	r3, r4
 80045d4:	6011      	str	r1, [r2, #0]
 80045d6:	d1e0      	bne.n	800459a <_free_r+0x26>
 80045d8:	681c      	ldr	r4, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	6053      	str	r3, [r2, #4]
 80045de:	4421      	add	r1, r4
 80045e0:	6011      	str	r1, [r2, #0]
 80045e2:	e7da      	b.n	800459a <_free_r+0x26>
 80045e4:	d902      	bls.n	80045ec <_free_r+0x78>
 80045e6:	230c      	movs	r3, #12
 80045e8:	6003      	str	r3, [r0, #0]
 80045ea:	e7d6      	b.n	800459a <_free_r+0x26>
 80045ec:	6825      	ldr	r5, [r4, #0]
 80045ee:	1961      	adds	r1, r4, r5
 80045f0:	428b      	cmp	r3, r1
 80045f2:	bf04      	itt	eq
 80045f4:	6819      	ldreq	r1, [r3, #0]
 80045f6:	685b      	ldreq	r3, [r3, #4]
 80045f8:	6063      	str	r3, [r4, #4]
 80045fa:	bf04      	itt	eq
 80045fc:	1949      	addeq	r1, r1, r5
 80045fe:	6021      	streq	r1, [r4, #0]
 8004600:	6054      	str	r4, [r2, #4]
 8004602:	e7ca      	b.n	800459a <_free_r+0x26>
 8004604:	b003      	add	sp, #12
 8004606:	bd30      	pop	{r4, r5, pc}
 8004608:	20000b68 	.word	0x20000b68

0800460c <sbrk_aligned>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	4e0e      	ldr	r6, [pc, #56]	; (8004648 <sbrk_aligned+0x3c>)
 8004610:	460c      	mov	r4, r1
 8004612:	6831      	ldr	r1, [r6, #0]
 8004614:	4605      	mov	r5, r0
 8004616:	b911      	cbnz	r1, 800461e <sbrk_aligned+0x12>
 8004618:	f000 f930 	bl	800487c <_sbrk_r>
 800461c:	6030      	str	r0, [r6, #0]
 800461e:	4621      	mov	r1, r4
 8004620:	4628      	mov	r0, r5
 8004622:	f000 f92b 	bl	800487c <_sbrk_r>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d00a      	beq.n	8004640 <sbrk_aligned+0x34>
 800462a:	1cc4      	adds	r4, r0, #3
 800462c:	f024 0403 	bic.w	r4, r4, #3
 8004630:	42a0      	cmp	r0, r4
 8004632:	d007      	beq.n	8004644 <sbrk_aligned+0x38>
 8004634:	1a21      	subs	r1, r4, r0
 8004636:	4628      	mov	r0, r5
 8004638:	f000 f920 	bl	800487c <_sbrk_r>
 800463c:	3001      	adds	r0, #1
 800463e:	d101      	bne.n	8004644 <sbrk_aligned+0x38>
 8004640:	f04f 34ff 	mov.w	r4, #4294967295
 8004644:	4620      	mov	r0, r4
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	20000b6c 	.word	0x20000b6c

0800464c <_malloc_r>:
 800464c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004650:	1ccd      	adds	r5, r1, #3
 8004652:	f025 0503 	bic.w	r5, r5, #3
 8004656:	3508      	adds	r5, #8
 8004658:	2d0c      	cmp	r5, #12
 800465a:	bf38      	it	cc
 800465c:	250c      	movcc	r5, #12
 800465e:	2d00      	cmp	r5, #0
 8004660:	4607      	mov	r7, r0
 8004662:	db01      	blt.n	8004668 <_malloc_r+0x1c>
 8004664:	42a9      	cmp	r1, r5
 8004666:	d905      	bls.n	8004674 <_malloc_r+0x28>
 8004668:	230c      	movs	r3, #12
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	2600      	movs	r6, #0
 800466e:	4630      	mov	r0, r6
 8004670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004674:	4e2e      	ldr	r6, [pc, #184]	; (8004730 <_malloc_r+0xe4>)
 8004676:	f000 fccf 	bl	8005018 <__malloc_lock>
 800467a:	6833      	ldr	r3, [r6, #0]
 800467c:	461c      	mov	r4, r3
 800467e:	bb34      	cbnz	r4, 80046ce <_malloc_r+0x82>
 8004680:	4629      	mov	r1, r5
 8004682:	4638      	mov	r0, r7
 8004684:	f7ff ffc2 	bl	800460c <sbrk_aligned>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	4604      	mov	r4, r0
 800468c:	d14d      	bne.n	800472a <_malloc_r+0xde>
 800468e:	6834      	ldr	r4, [r6, #0]
 8004690:	4626      	mov	r6, r4
 8004692:	2e00      	cmp	r6, #0
 8004694:	d140      	bne.n	8004718 <_malloc_r+0xcc>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	4631      	mov	r1, r6
 800469a:	4638      	mov	r0, r7
 800469c:	eb04 0803 	add.w	r8, r4, r3
 80046a0:	f000 f8ec 	bl	800487c <_sbrk_r>
 80046a4:	4580      	cmp	r8, r0
 80046a6:	d13a      	bne.n	800471e <_malloc_r+0xd2>
 80046a8:	6821      	ldr	r1, [r4, #0]
 80046aa:	3503      	adds	r5, #3
 80046ac:	1a6d      	subs	r5, r5, r1
 80046ae:	f025 0503 	bic.w	r5, r5, #3
 80046b2:	3508      	adds	r5, #8
 80046b4:	2d0c      	cmp	r5, #12
 80046b6:	bf38      	it	cc
 80046b8:	250c      	movcc	r5, #12
 80046ba:	4629      	mov	r1, r5
 80046bc:	4638      	mov	r0, r7
 80046be:	f7ff ffa5 	bl	800460c <sbrk_aligned>
 80046c2:	3001      	adds	r0, #1
 80046c4:	d02b      	beq.n	800471e <_malloc_r+0xd2>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	442b      	add	r3, r5
 80046ca:	6023      	str	r3, [r4, #0]
 80046cc:	e00e      	b.n	80046ec <_malloc_r+0xa0>
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	1b52      	subs	r2, r2, r5
 80046d2:	d41e      	bmi.n	8004712 <_malloc_r+0xc6>
 80046d4:	2a0b      	cmp	r2, #11
 80046d6:	d916      	bls.n	8004706 <_malloc_r+0xba>
 80046d8:	1961      	adds	r1, r4, r5
 80046da:	42a3      	cmp	r3, r4
 80046dc:	6025      	str	r5, [r4, #0]
 80046de:	bf18      	it	ne
 80046e0:	6059      	strne	r1, [r3, #4]
 80046e2:	6863      	ldr	r3, [r4, #4]
 80046e4:	bf08      	it	eq
 80046e6:	6031      	streq	r1, [r6, #0]
 80046e8:	5162      	str	r2, [r4, r5]
 80046ea:	604b      	str	r3, [r1, #4]
 80046ec:	4638      	mov	r0, r7
 80046ee:	f104 060b 	add.w	r6, r4, #11
 80046f2:	f000 fc97 	bl	8005024 <__malloc_unlock>
 80046f6:	f026 0607 	bic.w	r6, r6, #7
 80046fa:	1d23      	adds	r3, r4, #4
 80046fc:	1af2      	subs	r2, r6, r3
 80046fe:	d0b6      	beq.n	800466e <_malloc_r+0x22>
 8004700:	1b9b      	subs	r3, r3, r6
 8004702:	50a3      	str	r3, [r4, r2]
 8004704:	e7b3      	b.n	800466e <_malloc_r+0x22>
 8004706:	6862      	ldr	r2, [r4, #4]
 8004708:	42a3      	cmp	r3, r4
 800470a:	bf0c      	ite	eq
 800470c:	6032      	streq	r2, [r6, #0]
 800470e:	605a      	strne	r2, [r3, #4]
 8004710:	e7ec      	b.n	80046ec <_malloc_r+0xa0>
 8004712:	4623      	mov	r3, r4
 8004714:	6864      	ldr	r4, [r4, #4]
 8004716:	e7b2      	b.n	800467e <_malloc_r+0x32>
 8004718:	4634      	mov	r4, r6
 800471a:	6876      	ldr	r6, [r6, #4]
 800471c:	e7b9      	b.n	8004692 <_malloc_r+0x46>
 800471e:	230c      	movs	r3, #12
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4638      	mov	r0, r7
 8004724:	f000 fc7e 	bl	8005024 <__malloc_unlock>
 8004728:	e7a1      	b.n	800466e <_malloc_r+0x22>
 800472a:	6025      	str	r5, [r4, #0]
 800472c:	e7de      	b.n	80046ec <_malloc_r+0xa0>
 800472e:	bf00      	nop
 8004730:	20000b68 	.word	0x20000b68

08004734 <iprintf>:
 8004734:	b40f      	push	{r0, r1, r2, r3}
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <iprintf+0x2c>)
 8004738:	b513      	push	{r0, r1, r4, lr}
 800473a:	681c      	ldr	r4, [r3, #0]
 800473c:	b124      	cbz	r4, 8004748 <iprintf+0x14>
 800473e:	69a3      	ldr	r3, [r4, #24]
 8004740:	b913      	cbnz	r3, 8004748 <iprintf+0x14>
 8004742:	4620      	mov	r0, r4
 8004744:	f000 fb50 	bl	8004de8 <__sinit>
 8004748:	ab05      	add	r3, sp, #20
 800474a:	9a04      	ldr	r2, [sp, #16]
 800474c:	68a1      	ldr	r1, [r4, #8]
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	4620      	mov	r0, r4
 8004752:	f000 fdf3 	bl	800533c <_vfiprintf_r>
 8004756:	b002      	add	sp, #8
 8004758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800475c:	b004      	add	sp, #16
 800475e:	4770      	bx	lr
 8004760:	2000008c 	.word	0x2000008c

08004764 <putchar>:
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <putchar+0x28>)
 8004766:	b513      	push	{r0, r1, r4, lr}
 8004768:	681c      	ldr	r4, [r3, #0]
 800476a:	4601      	mov	r1, r0
 800476c:	b134      	cbz	r4, 800477c <putchar+0x18>
 800476e:	69a3      	ldr	r3, [r4, #24]
 8004770:	b923      	cbnz	r3, 800477c <putchar+0x18>
 8004772:	9001      	str	r0, [sp, #4]
 8004774:	4620      	mov	r0, r4
 8004776:	f000 fb37 	bl	8004de8 <__sinit>
 800477a:	9901      	ldr	r1, [sp, #4]
 800477c:	68a2      	ldr	r2, [r4, #8]
 800477e:	4620      	mov	r0, r4
 8004780:	b002      	add	sp, #8
 8004782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004786:	f001 b89d 	b.w	80058c4 <_putc_r>
 800478a:	bf00      	nop
 800478c:	2000008c 	.word	0x2000008c

08004790 <_puts_r>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	460e      	mov	r6, r1
 8004794:	4605      	mov	r5, r0
 8004796:	b118      	cbz	r0, 80047a0 <_puts_r+0x10>
 8004798:	6983      	ldr	r3, [r0, #24]
 800479a:	b90b      	cbnz	r3, 80047a0 <_puts_r+0x10>
 800479c:	f000 fb24 	bl	8004de8 <__sinit>
 80047a0:	69ab      	ldr	r3, [r5, #24]
 80047a2:	68ac      	ldr	r4, [r5, #8]
 80047a4:	b913      	cbnz	r3, 80047ac <_puts_r+0x1c>
 80047a6:	4628      	mov	r0, r5
 80047a8:	f000 fb1e 	bl	8004de8 <__sinit>
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <_puts_r+0xd0>)
 80047ae:	429c      	cmp	r4, r3
 80047b0:	d120      	bne.n	80047f4 <_puts_r+0x64>
 80047b2:	686c      	ldr	r4, [r5, #4]
 80047b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047b6:	07db      	lsls	r3, r3, #31
 80047b8:	d405      	bmi.n	80047c6 <_puts_r+0x36>
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	0598      	lsls	r0, r3, #22
 80047be:	d402      	bmi.n	80047c6 <_puts_r+0x36>
 80047c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047c2:	f000 fbc1 	bl	8004f48 <__retarget_lock_acquire_recursive>
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	0719      	lsls	r1, r3, #28
 80047ca:	d51d      	bpl.n	8004808 <_puts_r+0x78>
 80047cc:	6923      	ldr	r3, [r4, #16]
 80047ce:	b1db      	cbz	r3, 8004808 <_puts_r+0x78>
 80047d0:	3e01      	subs	r6, #1
 80047d2:	68a3      	ldr	r3, [r4, #8]
 80047d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047d8:	3b01      	subs	r3, #1
 80047da:	60a3      	str	r3, [r4, #8]
 80047dc:	bb39      	cbnz	r1, 800482e <_puts_r+0x9e>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	da38      	bge.n	8004854 <_puts_r+0xc4>
 80047e2:	4622      	mov	r2, r4
 80047e4:	210a      	movs	r1, #10
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 f906 	bl	80049f8 <__swbuf_r>
 80047ec:	3001      	adds	r0, #1
 80047ee:	d011      	beq.n	8004814 <_puts_r+0x84>
 80047f0:	250a      	movs	r5, #10
 80047f2:	e011      	b.n	8004818 <_puts_r+0x88>
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <_puts_r+0xd4>)
 80047f6:	429c      	cmp	r4, r3
 80047f8:	d101      	bne.n	80047fe <_puts_r+0x6e>
 80047fa:	68ac      	ldr	r4, [r5, #8]
 80047fc:	e7da      	b.n	80047b4 <_puts_r+0x24>
 80047fe:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <_puts_r+0xd8>)
 8004800:	429c      	cmp	r4, r3
 8004802:	bf08      	it	eq
 8004804:	68ec      	ldreq	r4, [r5, #12]
 8004806:	e7d5      	b.n	80047b4 <_puts_r+0x24>
 8004808:	4621      	mov	r1, r4
 800480a:	4628      	mov	r0, r5
 800480c:	f000 f946 	bl	8004a9c <__swsetup_r>
 8004810:	2800      	cmp	r0, #0
 8004812:	d0dd      	beq.n	80047d0 <_puts_r+0x40>
 8004814:	f04f 35ff 	mov.w	r5, #4294967295
 8004818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800481a:	07da      	lsls	r2, r3, #31
 800481c:	d405      	bmi.n	800482a <_puts_r+0x9a>
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	059b      	lsls	r3, r3, #22
 8004822:	d402      	bmi.n	800482a <_puts_r+0x9a>
 8004824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004826:	f000 fb90 	bl	8004f4a <__retarget_lock_release_recursive>
 800482a:	4628      	mov	r0, r5
 800482c:	bd70      	pop	{r4, r5, r6, pc}
 800482e:	2b00      	cmp	r3, #0
 8004830:	da04      	bge.n	800483c <_puts_r+0xac>
 8004832:	69a2      	ldr	r2, [r4, #24]
 8004834:	429a      	cmp	r2, r3
 8004836:	dc06      	bgt.n	8004846 <_puts_r+0xb6>
 8004838:	290a      	cmp	r1, #10
 800483a:	d004      	beq.n	8004846 <_puts_r+0xb6>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	6022      	str	r2, [r4, #0]
 8004842:	7019      	strb	r1, [r3, #0]
 8004844:	e7c5      	b.n	80047d2 <_puts_r+0x42>
 8004846:	4622      	mov	r2, r4
 8004848:	4628      	mov	r0, r5
 800484a:	f000 f8d5 	bl	80049f8 <__swbuf_r>
 800484e:	3001      	adds	r0, #1
 8004850:	d1bf      	bne.n	80047d2 <_puts_r+0x42>
 8004852:	e7df      	b.n	8004814 <_puts_r+0x84>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	250a      	movs	r5, #10
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	6022      	str	r2, [r4, #0]
 800485c:	701d      	strb	r5, [r3, #0]
 800485e:	e7db      	b.n	8004818 <_puts_r+0x88>
 8004860:	08006584 	.word	0x08006584
 8004864:	080065a4 	.word	0x080065a4
 8004868:	08006564 	.word	0x08006564

0800486c <puts>:
 800486c:	4b02      	ldr	r3, [pc, #8]	; (8004878 <puts+0xc>)
 800486e:	4601      	mov	r1, r0
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	f7ff bf8d 	b.w	8004790 <_puts_r>
 8004876:	bf00      	nop
 8004878:	2000008c 	.word	0x2000008c

0800487c <_sbrk_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4d06      	ldr	r5, [pc, #24]	; (8004898 <_sbrk_r+0x1c>)
 8004880:	2300      	movs	r3, #0
 8004882:	4604      	mov	r4, r0
 8004884:	4608      	mov	r0, r1
 8004886:	602b      	str	r3, [r5, #0]
 8004888:	f7ff fe06 	bl	8004498 <_sbrk>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d102      	bne.n	8004896 <_sbrk_r+0x1a>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	b103      	cbz	r3, 8004896 <_sbrk_r+0x1a>
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	bd38      	pop	{r3, r4, r5, pc}
 8004898:	20000b74 	.word	0x20000b74

0800489c <siprintf>:
 800489c:	b40e      	push	{r1, r2, r3}
 800489e:	b500      	push	{lr}
 80048a0:	b09c      	sub	sp, #112	; 0x70
 80048a2:	ab1d      	add	r3, sp, #116	; 0x74
 80048a4:	9002      	str	r0, [sp, #8]
 80048a6:	9006      	str	r0, [sp, #24]
 80048a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048ac:	4809      	ldr	r0, [pc, #36]	; (80048d4 <siprintf+0x38>)
 80048ae:	9107      	str	r1, [sp, #28]
 80048b0:	9104      	str	r1, [sp, #16]
 80048b2:	4909      	ldr	r1, [pc, #36]	; (80048d8 <siprintf+0x3c>)
 80048b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b8:	9105      	str	r1, [sp, #20]
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	a902      	add	r1, sp, #8
 80048c0:	f000 fc12 	bl	80050e8 <_svfiprintf_r>
 80048c4:	9b02      	ldr	r3, [sp, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	b01c      	add	sp, #112	; 0x70
 80048cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048d0:	b003      	add	sp, #12
 80048d2:	4770      	bx	lr
 80048d4:	2000008c 	.word	0x2000008c
 80048d8:	ffff0208 	.word	0xffff0208

080048dc <strcpy>:
 80048dc:	4603      	mov	r3, r0
 80048de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048e2:	f803 2b01 	strb.w	r2, [r3], #1
 80048e6:	2a00      	cmp	r2, #0
 80048e8:	d1f9      	bne.n	80048de <strcpy+0x2>
 80048ea:	4770      	bx	lr

080048ec <strncpy>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	3901      	subs	r1, #1
 80048f0:	4603      	mov	r3, r0
 80048f2:	b132      	cbz	r2, 8004902 <strncpy+0x16>
 80048f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80048f8:	f803 4b01 	strb.w	r4, [r3], #1
 80048fc:	3a01      	subs	r2, #1
 80048fe:	2c00      	cmp	r4, #0
 8004900:	d1f7      	bne.n	80048f2 <strncpy+0x6>
 8004902:	441a      	add	r2, r3
 8004904:	2100      	movs	r1, #0
 8004906:	4293      	cmp	r3, r2
 8004908:	d100      	bne.n	800490c <strncpy+0x20>
 800490a:	bd10      	pop	{r4, pc}
 800490c:	f803 1b01 	strb.w	r1, [r3], #1
 8004910:	e7f9      	b.n	8004906 <strncpy+0x1a>

08004912 <strstr>:
 8004912:	780a      	ldrb	r2, [r1, #0]
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	b96a      	cbnz	r2, 8004934 <strstr+0x22>
 8004918:	bd70      	pop	{r4, r5, r6, pc}
 800491a:	429a      	cmp	r2, r3
 800491c:	d109      	bne.n	8004932 <strstr+0x20>
 800491e:	460c      	mov	r4, r1
 8004920:	4605      	mov	r5, r0
 8004922:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f6      	beq.n	8004918 <strstr+0x6>
 800492a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800492e:	429e      	cmp	r6, r3
 8004930:	d0f7      	beq.n	8004922 <strstr+0x10>
 8004932:	3001      	adds	r0, #1
 8004934:	7803      	ldrb	r3, [r0, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1ef      	bne.n	800491a <strstr+0x8>
 800493a:	4618      	mov	r0, r3
 800493c:	e7ec      	b.n	8004918 <strstr+0x6>
	...

08004940 <strtok>:
 8004940:	4b16      	ldr	r3, [pc, #88]	; (800499c <strtok+0x5c>)
 8004942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004944:	681e      	ldr	r6, [r3, #0]
 8004946:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004948:	4605      	mov	r5, r0
 800494a:	b9fc      	cbnz	r4, 800498c <strtok+0x4c>
 800494c:	2050      	movs	r0, #80	; 0x50
 800494e:	9101      	str	r1, [sp, #4]
 8004950:	f7ff fdf2 	bl	8004538 <malloc>
 8004954:	9901      	ldr	r1, [sp, #4]
 8004956:	65b0      	str	r0, [r6, #88]	; 0x58
 8004958:	4602      	mov	r2, r0
 800495a:	b920      	cbnz	r0, 8004966 <strtok+0x26>
 800495c:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <strtok+0x60>)
 800495e:	4811      	ldr	r0, [pc, #68]	; (80049a4 <strtok+0x64>)
 8004960:	2157      	movs	r1, #87	; 0x57
 8004962:	f000 f909 	bl	8004b78 <__assert_func>
 8004966:	e9c0 4400 	strd	r4, r4, [r0]
 800496a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800496e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004972:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004976:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800497a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800497e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004982:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004986:	6184      	str	r4, [r0, #24]
 8004988:	7704      	strb	r4, [r0, #28]
 800498a:	6244      	str	r4, [r0, #36]	; 0x24
 800498c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800498e:	2301      	movs	r3, #1
 8004990:	4628      	mov	r0, r5
 8004992:	b002      	add	sp, #8
 8004994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004998:	f000 b806 	b.w	80049a8 <__strtok_r>
 800499c:	2000008c 	.word	0x2000008c
 80049a0:	080064b4 	.word	0x080064b4
 80049a4:	080064cb 	.word	0x080064cb

080049a8 <__strtok_r>:
 80049a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049aa:	b908      	cbnz	r0, 80049b0 <__strtok_r+0x8>
 80049ac:	6810      	ldr	r0, [r2, #0]
 80049ae:	b188      	cbz	r0, 80049d4 <__strtok_r+0x2c>
 80049b0:	4604      	mov	r4, r0
 80049b2:	4620      	mov	r0, r4
 80049b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80049b8:	460f      	mov	r7, r1
 80049ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80049be:	b91e      	cbnz	r6, 80049c8 <__strtok_r+0x20>
 80049c0:	b965      	cbnz	r5, 80049dc <__strtok_r+0x34>
 80049c2:	6015      	str	r5, [r2, #0]
 80049c4:	4628      	mov	r0, r5
 80049c6:	e005      	b.n	80049d4 <__strtok_r+0x2c>
 80049c8:	42b5      	cmp	r5, r6
 80049ca:	d1f6      	bne.n	80049ba <__strtok_r+0x12>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <__strtok_r+0xa>
 80049d0:	6014      	str	r4, [r2, #0]
 80049d2:	7003      	strb	r3, [r0, #0]
 80049d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d6:	461c      	mov	r4, r3
 80049d8:	e00c      	b.n	80049f4 <__strtok_r+0x4c>
 80049da:	b915      	cbnz	r5, 80049e2 <__strtok_r+0x3a>
 80049dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80049e0:	460e      	mov	r6, r1
 80049e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80049e6:	42ab      	cmp	r3, r5
 80049e8:	d1f7      	bne.n	80049da <__strtok_r+0x32>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f3      	beq.n	80049d6 <__strtok_r+0x2e>
 80049ee:	2300      	movs	r3, #0
 80049f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80049f4:	6014      	str	r4, [r2, #0]
 80049f6:	e7ed      	b.n	80049d4 <__strtok_r+0x2c>

080049f8 <__swbuf_r>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	460e      	mov	r6, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	4605      	mov	r5, r0
 8004a00:	b118      	cbz	r0, 8004a0a <__swbuf_r+0x12>
 8004a02:	6983      	ldr	r3, [r0, #24]
 8004a04:	b90b      	cbnz	r3, 8004a0a <__swbuf_r+0x12>
 8004a06:	f000 f9ef 	bl	8004de8 <__sinit>
 8004a0a:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <__swbuf_r+0x98>)
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	d12b      	bne.n	8004a68 <__swbuf_r+0x70>
 8004a10:	686c      	ldr	r4, [r5, #4]
 8004a12:	69a3      	ldr	r3, [r4, #24]
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	071a      	lsls	r2, r3, #28
 8004a1a:	d52f      	bpl.n	8004a7c <__swbuf_r+0x84>
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	b36b      	cbz	r3, 8004a7c <__swbuf_r+0x84>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	6820      	ldr	r0, [r4, #0]
 8004a24:	1ac0      	subs	r0, r0, r3
 8004a26:	6963      	ldr	r3, [r4, #20]
 8004a28:	b2f6      	uxtb	r6, r6
 8004a2a:	4283      	cmp	r3, r0
 8004a2c:	4637      	mov	r7, r6
 8004a2e:	dc04      	bgt.n	8004a3a <__swbuf_r+0x42>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 f944 	bl	8004cc0 <_fflush_r>
 8004a38:	bb30      	cbnz	r0, 8004a88 <__swbuf_r+0x90>
 8004a3a:	68a3      	ldr	r3, [r4, #8]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	60a3      	str	r3, [r4, #8]
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	6022      	str	r2, [r4, #0]
 8004a46:	701e      	strb	r6, [r3, #0]
 8004a48:	6963      	ldr	r3, [r4, #20]
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	4283      	cmp	r3, r0
 8004a4e:	d004      	beq.n	8004a5a <__swbuf_r+0x62>
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	07db      	lsls	r3, r3, #31
 8004a54:	d506      	bpl.n	8004a64 <__swbuf_r+0x6c>
 8004a56:	2e0a      	cmp	r6, #10
 8004a58:	d104      	bne.n	8004a64 <__swbuf_r+0x6c>
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f000 f92f 	bl	8004cc0 <_fflush_r>
 8004a62:	b988      	cbnz	r0, 8004a88 <__swbuf_r+0x90>
 8004a64:	4638      	mov	r0, r7
 8004a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <__swbuf_r+0x9c>)
 8004a6a:	429c      	cmp	r4, r3
 8004a6c:	d101      	bne.n	8004a72 <__swbuf_r+0x7a>
 8004a6e:	68ac      	ldr	r4, [r5, #8]
 8004a70:	e7cf      	b.n	8004a12 <__swbuf_r+0x1a>
 8004a72:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <__swbuf_r+0xa0>)
 8004a74:	429c      	cmp	r4, r3
 8004a76:	bf08      	it	eq
 8004a78:	68ec      	ldreq	r4, [r5, #12]
 8004a7a:	e7ca      	b.n	8004a12 <__swbuf_r+0x1a>
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f000 f80c 	bl	8004a9c <__swsetup_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d0cb      	beq.n	8004a20 <__swbuf_r+0x28>
 8004a88:	f04f 37ff 	mov.w	r7, #4294967295
 8004a8c:	e7ea      	b.n	8004a64 <__swbuf_r+0x6c>
 8004a8e:	bf00      	nop
 8004a90:	08006584 	.word	0x08006584
 8004a94:	080065a4 	.word	0x080065a4
 8004a98:	08006564 	.word	0x08006564

08004a9c <__swsetup_r>:
 8004a9c:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <__swsetup_r+0xcc>)
 8004a9e:	b570      	push	{r4, r5, r6, lr}
 8004aa0:	681d      	ldr	r5, [r3, #0]
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	b125      	cbz	r5, 8004ab2 <__swsetup_r+0x16>
 8004aa8:	69ab      	ldr	r3, [r5, #24]
 8004aaa:	b913      	cbnz	r3, 8004ab2 <__swsetup_r+0x16>
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 f99b 	bl	8004de8 <__sinit>
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	; (8004b6c <__swsetup_r+0xd0>)
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	d10f      	bne.n	8004ad8 <__swsetup_r+0x3c>
 8004ab8:	686c      	ldr	r4, [r5, #4]
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ac0:	0719      	lsls	r1, r3, #28
 8004ac2:	d42c      	bmi.n	8004b1e <__swsetup_r+0x82>
 8004ac4:	06dd      	lsls	r5, r3, #27
 8004ac6:	d411      	bmi.n	8004aec <__swsetup_r+0x50>
 8004ac8:	2309      	movs	r3, #9
 8004aca:	6033      	str	r3, [r6, #0]
 8004acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad6:	e03e      	b.n	8004b56 <__swsetup_r+0xba>
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <__swsetup_r+0xd4>)
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d101      	bne.n	8004ae2 <__swsetup_r+0x46>
 8004ade:	68ac      	ldr	r4, [r5, #8]
 8004ae0:	e7eb      	b.n	8004aba <__swsetup_r+0x1e>
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <__swsetup_r+0xd8>)
 8004ae4:	429c      	cmp	r4, r3
 8004ae6:	bf08      	it	eq
 8004ae8:	68ec      	ldreq	r4, [r5, #12]
 8004aea:	e7e6      	b.n	8004aba <__swsetup_r+0x1e>
 8004aec:	0758      	lsls	r0, r3, #29
 8004aee:	d512      	bpl.n	8004b16 <__swsetup_r+0x7a>
 8004af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af2:	b141      	cbz	r1, 8004b06 <__swsetup_r+0x6a>
 8004af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004af8:	4299      	cmp	r1, r3
 8004afa:	d002      	beq.n	8004b02 <__swsetup_r+0x66>
 8004afc:	4630      	mov	r0, r6
 8004afe:	f7ff fd39 	bl	8004574 <_free_r>
 8004b02:	2300      	movs	r3, #0
 8004b04:	6363      	str	r3, [r4, #52]	; 0x34
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b0c:	81a3      	strh	r3, [r4, #12]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6063      	str	r3, [r4, #4]
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	f043 0308 	orr.w	r3, r3, #8
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	b94b      	cbnz	r3, 8004b36 <__swsetup_r+0x9a>
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d003      	beq.n	8004b36 <__swsetup_r+0x9a>
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 fa31 	bl	8004f98 <__smakebuf_r>
 8004b36:	89a0      	ldrh	r0, [r4, #12]
 8004b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b3c:	f010 0301 	ands.w	r3, r0, #1
 8004b40:	d00a      	beq.n	8004b58 <__swsetup_r+0xbc>
 8004b42:	2300      	movs	r3, #0
 8004b44:	60a3      	str	r3, [r4, #8]
 8004b46:	6963      	ldr	r3, [r4, #20]
 8004b48:	425b      	negs	r3, r3
 8004b4a:	61a3      	str	r3, [r4, #24]
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	b943      	cbnz	r3, 8004b62 <__swsetup_r+0xc6>
 8004b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b54:	d1ba      	bne.n	8004acc <__swsetup_r+0x30>
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	0781      	lsls	r1, r0, #30
 8004b5a:	bf58      	it	pl
 8004b5c:	6963      	ldrpl	r3, [r4, #20]
 8004b5e:	60a3      	str	r3, [r4, #8]
 8004b60:	e7f4      	b.n	8004b4c <__swsetup_r+0xb0>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e7f7      	b.n	8004b56 <__swsetup_r+0xba>
 8004b66:	bf00      	nop
 8004b68:	2000008c 	.word	0x2000008c
 8004b6c:	08006584 	.word	0x08006584
 8004b70:	080065a4 	.word	0x080065a4
 8004b74:	08006564 	.word	0x08006564

08004b78 <__assert_func>:
 8004b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b7a:	4614      	mov	r4, r2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <__assert_func+0x2c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4605      	mov	r5, r0
 8004b84:	68d8      	ldr	r0, [r3, #12]
 8004b86:	b14c      	cbz	r4, 8004b9c <__assert_func+0x24>
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <__assert_func+0x30>)
 8004b8a:	9100      	str	r1, [sp, #0]
 8004b8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b90:	4906      	ldr	r1, [pc, #24]	; (8004bac <__assert_func+0x34>)
 8004b92:	462b      	mov	r3, r5
 8004b94:	f000 f9a6 	bl	8004ee4 <fiprintf>
 8004b98:	f000 ff32 	bl	8005a00 <abort>
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <__assert_func+0x38>)
 8004b9e:	461c      	mov	r4, r3
 8004ba0:	e7f3      	b.n	8004b8a <__assert_func+0x12>
 8004ba2:	bf00      	nop
 8004ba4:	2000008c 	.word	0x2000008c
 8004ba8:	08006528 	.word	0x08006528
 8004bac:	08006535 	.word	0x08006535
 8004bb0:	0800633c 	.word	0x0800633c

08004bb4 <__sflush_r>:
 8004bb4:	898a      	ldrh	r2, [r1, #12]
 8004bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bba:	4605      	mov	r5, r0
 8004bbc:	0710      	lsls	r0, r2, #28
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	d458      	bmi.n	8004c74 <__sflush_r+0xc0>
 8004bc2:	684b      	ldr	r3, [r1, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	dc05      	bgt.n	8004bd4 <__sflush_r+0x20>
 8004bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	dc02      	bgt.n	8004bd4 <__sflush_r+0x20>
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bd6:	2e00      	cmp	r6, #0
 8004bd8:	d0f9      	beq.n	8004bce <__sflush_r+0x1a>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004be0:	682f      	ldr	r7, [r5, #0]
 8004be2:	602b      	str	r3, [r5, #0]
 8004be4:	d032      	beq.n	8004c4c <__sflush_r+0x98>
 8004be6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	075a      	lsls	r2, r3, #29
 8004bec:	d505      	bpl.n	8004bfa <__sflush_r+0x46>
 8004bee:	6863      	ldr	r3, [r4, #4]
 8004bf0:	1ac0      	subs	r0, r0, r3
 8004bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bf4:	b10b      	cbz	r3, 8004bfa <__sflush_r+0x46>
 8004bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bf8:	1ac0      	subs	r0, r0, r3
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c00:	6a21      	ldr	r1, [r4, #32]
 8004c02:	4628      	mov	r0, r5
 8004c04:	47b0      	blx	r6
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	d106      	bne.n	8004c1a <__sflush_r+0x66>
 8004c0c:	6829      	ldr	r1, [r5, #0]
 8004c0e:	291d      	cmp	r1, #29
 8004c10:	d82c      	bhi.n	8004c6c <__sflush_r+0xb8>
 8004c12:	4a2a      	ldr	r2, [pc, #168]	; (8004cbc <__sflush_r+0x108>)
 8004c14:	40ca      	lsrs	r2, r1
 8004c16:	07d6      	lsls	r6, r2, #31
 8004c18:	d528      	bpl.n	8004c6c <__sflush_r+0xb8>
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	6062      	str	r2, [r4, #4]
 8004c1e:	04d9      	lsls	r1, r3, #19
 8004c20:	6922      	ldr	r2, [r4, #16]
 8004c22:	6022      	str	r2, [r4, #0]
 8004c24:	d504      	bpl.n	8004c30 <__sflush_r+0x7c>
 8004c26:	1c42      	adds	r2, r0, #1
 8004c28:	d101      	bne.n	8004c2e <__sflush_r+0x7a>
 8004c2a:	682b      	ldr	r3, [r5, #0]
 8004c2c:	b903      	cbnz	r3, 8004c30 <__sflush_r+0x7c>
 8004c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c32:	602f      	str	r7, [r5, #0]
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d0ca      	beq.n	8004bce <__sflush_r+0x1a>
 8004c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	d002      	beq.n	8004c46 <__sflush_r+0x92>
 8004c40:	4628      	mov	r0, r5
 8004c42:	f7ff fc97 	bl	8004574 <_free_r>
 8004c46:	2000      	movs	r0, #0
 8004c48:	6360      	str	r0, [r4, #52]	; 0x34
 8004c4a:	e7c1      	b.n	8004bd0 <__sflush_r+0x1c>
 8004c4c:	6a21      	ldr	r1, [r4, #32]
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b0      	blx	r6
 8004c54:	1c41      	adds	r1, r0, #1
 8004c56:	d1c7      	bne.n	8004be8 <__sflush_r+0x34>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0c4      	beq.n	8004be8 <__sflush_r+0x34>
 8004c5e:	2b1d      	cmp	r3, #29
 8004c60:	d001      	beq.n	8004c66 <__sflush_r+0xb2>
 8004c62:	2b16      	cmp	r3, #22
 8004c64:	d101      	bne.n	8004c6a <__sflush_r+0xb6>
 8004c66:	602f      	str	r7, [r5, #0]
 8004c68:	e7b1      	b.n	8004bce <__sflush_r+0x1a>
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	e7ad      	b.n	8004bd0 <__sflush_r+0x1c>
 8004c74:	690f      	ldr	r7, [r1, #16]
 8004c76:	2f00      	cmp	r7, #0
 8004c78:	d0a9      	beq.n	8004bce <__sflush_r+0x1a>
 8004c7a:	0793      	lsls	r3, r2, #30
 8004c7c:	680e      	ldr	r6, [r1, #0]
 8004c7e:	bf08      	it	eq
 8004c80:	694b      	ldreq	r3, [r1, #20]
 8004c82:	600f      	str	r7, [r1, #0]
 8004c84:	bf18      	it	ne
 8004c86:	2300      	movne	r3, #0
 8004c88:	eba6 0807 	sub.w	r8, r6, r7
 8004c8c:	608b      	str	r3, [r1, #8]
 8004c8e:	f1b8 0f00 	cmp.w	r8, #0
 8004c92:	dd9c      	ble.n	8004bce <__sflush_r+0x1a>
 8004c94:	6a21      	ldr	r1, [r4, #32]
 8004c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c98:	4643      	mov	r3, r8
 8004c9a:	463a      	mov	r2, r7
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b0      	blx	r6
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	dc06      	bgt.n	8004cb2 <__sflush_r+0xfe>
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	e78e      	b.n	8004bd0 <__sflush_r+0x1c>
 8004cb2:	4407      	add	r7, r0
 8004cb4:	eba8 0800 	sub.w	r8, r8, r0
 8004cb8:	e7e9      	b.n	8004c8e <__sflush_r+0xda>
 8004cba:	bf00      	nop
 8004cbc:	20400001 	.word	0x20400001

08004cc0 <_fflush_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	690b      	ldr	r3, [r1, #16]
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	b913      	cbnz	r3, 8004cd0 <_fflush_r+0x10>
 8004cca:	2500      	movs	r5, #0
 8004ccc:	4628      	mov	r0, r5
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	b118      	cbz	r0, 8004cda <_fflush_r+0x1a>
 8004cd2:	6983      	ldr	r3, [r0, #24]
 8004cd4:	b90b      	cbnz	r3, 8004cda <_fflush_r+0x1a>
 8004cd6:	f000 f887 	bl	8004de8 <__sinit>
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <_fflush_r+0x6c>)
 8004cdc:	429c      	cmp	r4, r3
 8004cde:	d11b      	bne.n	8004d18 <_fflush_r+0x58>
 8004ce0:	686c      	ldr	r4, [r5, #4]
 8004ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0ef      	beq.n	8004cca <_fflush_r+0xa>
 8004cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cec:	07d0      	lsls	r0, r2, #31
 8004cee:	d404      	bmi.n	8004cfa <_fflush_r+0x3a>
 8004cf0:	0599      	lsls	r1, r3, #22
 8004cf2:	d402      	bmi.n	8004cfa <_fflush_r+0x3a>
 8004cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf6:	f000 f927 	bl	8004f48 <__retarget_lock_acquire_recursive>
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	f7ff ff59 	bl	8004bb4 <__sflush_r>
 8004d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d04:	07da      	lsls	r2, r3, #31
 8004d06:	4605      	mov	r5, r0
 8004d08:	d4e0      	bmi.n	8004ccc <_fflush_r+0xc>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	059b      	lsls	r3, r3, #22
 8004d0e:	d4dd      	bmi.n	8004ccc <_fflush_r+0xc>
 8004d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d12:	f000 f91a 	bl	8004f4a <__retarget_lock_release_recursive>
 8004d16:	e7d9      	b.n	8004ccc <_fflush_r+0xc>
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <_fflush_r+0x70>)
 8004d1a:	429c      	cmp	r4, r3
 8004d1c:	d101      	bne.n	8004d22 <_fflush_r+0x62>
 8004d1e:	68ac      	ldr	r4, [r5, #8]
 8004d20:	e7df      	b.n	8004ce2 <_fflush_r+0x22>
 8004d22:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <_fflush_r+0x74>)
 8004d24:	429c      	cmp	r4, r3
 8004d26:	bf08      	it	eq
 8004d28:	68ec      	ldreq	r4, [r5, #12]
 8004d2a:	e7da      	b.n	8004ce2 <_fflush_r+0x22>
 8004d2c:	08006584 	.word	0x08006584
 8004d30:	080065a4 	.word	0x080065a4
 8004d34:	08006564 	.word	0x08006564

08004d38 <std>:
 8004d38:	2300      	movs	r3, #0
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d46:	6083      	str	r3, [r0, #8]
 8004d48:	8181      	strh	r1, [r0, #12]
 8004d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d4c:	81c2      	strh	r2, [r0, #14]
 8004d4e:	6183      	str	r3, [r0, #24]
 8004d50:	4619      	mov	r1, r3
 8004d52:	2208      	movs	r2, #8
 8004d54:	305c      	adds	r0, #92	; 0x5c
 8004d56:	f7ff fc05 	bl	8004564 <memset>
 8004d5a:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <std+0x38>)
 8004d5c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <std+0x3c>)
 8004d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <std+0x40>)
 8004d64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <std+0x44>)
 8004d68:	6224      	str	r4, [r4, #32]
 8004d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	bf00      	nop
 8004d70:	08005955 	.word	0x08005955
 8004d74:	08005977 	.word	0x08005977
 8004d78:	080059af 	.word	0x080059af
 8004d7c:	080059d3 	.word	0x080059d3

08004d80 <_cleanup_r>:
 8004d80:	4901      	ldr	r1, [pc, #4]	; (8004d88 <_cleanup_r+0x8>)
 8004d82:	f000 b8c1 	b.w	8004f08 <_fwalk_reent>
 8004d86:	bf00      	nop
 8004d88:	08004cc1 	.word	0x08004cc1

08004d8c <__sfmoreglue>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	2268      	movs	r2, #104	; 0x68
 8004d90:	1e4d      	subs	r5, r1, #1
 8004d92:	4355      	muls	r5, r2
 8004d94:	460e      	mov	r6, r1
 8004d96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d9a:	f7ff fc57 	bl	800464c <_malloc_r>
 8004d9e:	4604      	mov	r4, r0
 8004da0:	b140      	cbz	r0, 8004db4 <__sfmoreglue+0x28>
 8004da2:	2100      	movs	r1, #0
 8004da4:	e9c0 1600 	strd	r1, r6, [r0]
 8004da8:	300c      	adds	r0, #12
 8004daa:	60a0      	str	r0, [r4, #8]
 8004dac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004db0:	f7ff fbd8 	bl	8004564 <memset>
 8004db4:	4620      	mov	r0, r4
 8004db6:	bd70      	pop	{r4, r5, r6, pc}

08004db8 <__sfp_lock_acquire>:
 8004db8:	4801      	ldr	r0, [pc, #4]	; (8004dc0 <__sfp_lock_acquire+0x8>)
 8004dba:	f000 b8c5 	b.w	8004f48 <__retarget_lock_acquire_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	20000b71 	.word	0x20000b71

08004dc4 <__sfp_lock_release>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	; (8004dcc <__sfp_lock_release+0x8>)
 8004dc6:	f000 b8c0 	b.w	8004f4a <__retarget_lock_release_recursive>
 8004dca:	bf00      	nop
 8004dcc:	20000b71 	.word	0x20000b71

08004dd0 <__sinit_lock_acquire>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	; (8004dd8 <__sinit_lock_acquire+0x8>)
 8004dd2:	f000 b8b9 	b.w	8004f48 <__retarget_lock_acquire_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	20000b72 	.word	0x20000b72

08004ddc <__sinit_lock_release>:
 8004ddc:	4801      	ldr	r0, [pc, #4]	; (8004de4 <__sinit_lock_release+0x8>)
 8004dde:	f000 b8b4 	b.w	8004f4a <__retarget_lock_release_recursive>
 8004de2:	bf00      	nop
 8004de4:	20000b72 	.word	0x20000b72

08004de8 <__sinit>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	4604      	mov	r4, r0
 8004dec:	f7ff fff0 	bl	8004dd0 <__sinit_lock_acquire>
 8004df0:	69a3      	ldr	r3, [r4, #24]
 8004df2:	b11b      	cbz	r3, 8004dfc <__sinit+0x14>
 8004df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df8:	f7ff bff0 	b.w	8004ddc <__sinit_lock_release>
 8004dfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e00:	6523      	str	r3, [r4, #80]	; 0x50
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <__sinit+0x68>)
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <__sinit+0x6c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e0a:	42a3      	cmp	r3, r4
 8004e0c:	bf04      	itt	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	61a3      	streq	r3, [r4, #24]
 8004e12:	4620      	mov	r0, r4
 8004e14:	f000 f820 	bl	8004e58 <__sfp>
 8004e18:	6060      	str	r0, [r4, #4]
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 f81c 	bl	8004e58 <__sfp>
 8004e20:	60a0      	str	r0, [r4, #8]
 8004e22:	4620      	mov	r0, r4
 8004e24:	f000 f818 	bl	8004e58 <__sfp>
 8004e28:	2200      	movs	r2, #0
 8004e2a:	60e0      	str	r0, [r4, #12]
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	6860      	ldr	r0, [r4, #4]
 8004e30:	f7ff ff82 	bl	8004d38 <std>
 8004e34:	68a0      	ldr	r0, [r4, #8]
 8004e36:	2201      	movs	r2, #1
 8004e38:	2109      	movs	r1, #9
 8004e3a:	f7ff ff7d 	bl	8004d38 <std>
 8004e3e:	68e0      	ldr	r0, [r4, #12]
 8004e40:	2202      	movs	r2, #2
 8004e42:	2112      	movs	r1, #18
 8004e44:	f7ff ff78 	bl	8004d38 <std>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61a3      	str	r3, [r4, #24]
 8004e4c:	e7d2      	b.n	8004df4 <__sinit+0xc>
 8004e4e:	bf00      	nop
 8004e50:	080064b0 	.word	0x080064b0
 8004e54:	08004d81 	.word	0x08004d81

08004e58 <__sfp>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	4607      	mov	r7, r0
 8004e5c:	f7ff ffac 	bl	8004db8 <__sfp_lock_acquire>
 8004e60:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <__sfp+0x84>)
 8004e62:	681e      	ldr	r6, [r3, #0]
 8004e64:	69b3      	ldr	r3, [r6, #24]
 8004e66:	b913      	cbnz	r3, 8004e6e <__sfp+0x16>
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f7ff ffbd 	bl	8004de8 <__sinit>
 8004e6e:	3648      	adds	r6, #72	; 0x48
 8004e70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	d503      	bpl.n	8004e80 <__sfp+0x28>
 8004e78:	6833      	ldr	r3, [r6, #0]
 8004e7a:	b30b      	cbz	r3, 8004ec0 <__sfp+0x68>
 8004e7c:	6836      	ldr	r6, [r6, #0]
 8004e7e:	e7f7      	b.n	8004e70 <__sfp+0x18>
 8004e80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e84:	b9d5      	cbnz	r5, 8004ebc <__sfp+0x64>
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <__sfp+0x88>)
 8004e88:	60e3      	str	r3, [r4, #12]
 8004e8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e8e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e90:	f000 f859 	bl	8004f46 <__retarget_lock_init_recursive>
 8004e94:	f7ff ff96 	bl	8004dc4 <__sfp_lock_release>
 8004e98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ea0:	6025      	str	r5, [r4, #0]
 8004ea2:	61a5      	str	r5, [r4, #24]
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004eac:	f7ff fb5a 	bl	8004564 <memset>
 8004eb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004eb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004eb8:	4620      	mov	r0, r4
 8004eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ebc:	3468      	adds	r4, #104	; 0x68
 8004ebe:	e7d9      	b.n	8004e74 <__sfp+0x1c>
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	f7ff ff62 	bl	8004d8c <__sfmoreglue>
 8004ec8:	4604      	mov	r4, r0
 8004eca:	6030      	str	r0, [r6, #0]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d1d5      	bne.n	8004e7c <__sfp+0x24>
 8004ed0:	f7ff ff78 	bl	8004dc4 <__sfp_lock_release>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	e7ee      	b.n	8004eb8 <__sfp+0x60>
 8004eda:	bf00      	nop
 8004edc:	080064b0 	.word	0x080064b0
 8004ee0:	ffff0001 	.word	0xffff0001

08004ee4 <fiprintf>:
 8004ee4:	b40e      	push	{r1, r2, r3}
 8004ee6:	b503      	push	{r0, r1, lr}
 8004ee8:	4601      	mov	r1, r0
 8004eea:	ab03      	add	r3, sp, #12
 8004eec:	4805      	ldr	r0, [pc, #20]	; (8004f04 <fiprintf+0x20>)
 8004eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ef2:	6800      	ldr	r0, [r0, #0]
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	f000 fa21 	bl	800533c <_vfiprintf_r>
 8004efa:	b002      	add	sp, #8
 8004efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f00:	b003      	add	sp, #12
 8004f02:	4770      	bx	lr
 8004f04:	2000008c 	.word	0x2000008c

08004f08 <_fwalk_reent>:
 8004f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	4688      	mov	r8, r1
 8004f10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f14:	2700      	movs	r7, #0
 8004f16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f1a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f1e:	d505      	bpl.n	8004f2c <_fwalk_reent+0x24>
 8004f20:	6824      	ldr	r4, [r4, #0]
 8004f22:	2c00      	cmp	r4, #0
 8004f24:	d1f7      	bne.n	8004f16 <_fwalk_reent+0xe>
 8004f26:	4638      	mov	r0, r7
 8004f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f2c:	89ab      	ldrh	r3, [r5, #12]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d907      	bls.n	8004f42 <_fwalk_reent+0x3a>
 8004f32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f36:	3301      	adds	r3, #1
 8004f38:	d003      	beq.n	8004f42 <_fwalk_reent+0x3a>
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	47c0      	blx	r8
 8004f40:	4307      	orrs	r7, r0
 8004f42:	3568      	adds	r5, #104	; 0x68
 8004f44:	e7e9      	b.n	8004f1a <_fwalk_reent+0x12>

08004f46 <__retarget_lock_init_recursive>:
 8004f46:	4770      	bx	lr

08004f48 <__retarget_lock_acquire_recursive>:
 8004f48:	4770      	bx	lr

08004f4a <__retarget_lock_release_recursive>:
 8004f4a:	4770      	bx	lr

08004f4c <__swhatbuf_r>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	460e      	mov	r6, r1
 8004f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f54:	2900      	cmp	r1, #0
 8004f56:	b096      	sub	sp, #88	; 0x58
 8004f58:	4614      	mov	r4, r2
 8004f5a:	461d      	mov	r5, r3
 8004f5c:	da08      	bge.n	8004f70 <__swhatbuf_r+0x24>
 8004f5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	602a      	str	r2, [r5, #0]
 8004f66:	061a      	lsls	r2, r3, #24
 8004f68:	d410      	bmi.n	8004f8c <__swhatbuf_r+0x40>
 8004f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f6e:	e00e      	b.n	8004f8e <__swhatbuf_r+0x42>
 8004f70:	466a      	mov	r2, sp
 8004f72:	f000 fd5d 	bl	8005a30 <_fstat_r>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	dbf1      	blt.n	8004f5e <__swhatbuf_r+0x12>
 8004f7a:	9a01      	ldr	r2, [sp, #4]
 8004f7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f84:	425a      	negs	r2, r3
 8004f86:	415a      	adcs	r2, r3
 8004f88:	602a      	str	r2, [r5, #0]
 8004f8a:	e7ee      	b.n	8004f6a <__swhatbuf_r+0x1e>
 8004f8c:	2340      	movs	r3, #64	; 0x40
 8004f8e:	2000      	movs	r0, #0
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	b016      	add	sp, #88	; 0x58
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f98 <__smakebuf_r>:
 8004f98:	898b      	ldrh	r3, [r1, #12]
 8004f9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f9c:	079d      	lsls	r5, r3, #30
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	d507      	bpl.n	8004fb4 <__smakebuf_r+0x1c>
 8004fa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	2301      	movs	r3, #1
 8004fae:	6163      	str	r3, [r4, #20]
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
 8004fb4:	ab01      	add	r3, sp, #4
 8004fb6:	466a      	mov	r2, sp
 8004fb8:	f7ff ffc8 	bl	8004f4c <__swhatbuf_r>
 8004fbc:	9900      	ldr	r1, [sp, #0]
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f7ff fb43 	bl	800464c <_malloc_r>
 8004fc6:	b948      	cbnz	r0, 8004fdc <__smakebuf_r+0x44>
 8004fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fcc:	059a      	lsls	r2, r3, #22
 8004fce:	d4ef      	bmi.n	8004fb0 <__smakebuf_r+0x18>
 8004fd0:	f023 0303 	bic.w	r3, r3, #3
 8004fd4:	f043 0302 	orr.w	r3, r3, #2
 8004fd8:	81a3      	strh	r3, [r4, #12]
 8004fda:	e7e3      	b.n	8004fa4 <__smakebuf_r+0xc>
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <__smakebuf_r+0x7c>)
 8004fde:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	6020      	str	r0, [r4, #0]
 8004fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe8:	81a3      	strh	r3, [r4, #12]
 8004fea:	9b00      	ldr	r3, [sp, #0]
 8004fec:	6163      	str	r3, [r4, #20]
 8004fee:	9b01      	ldr	r3, [sp, #4]
 8004ff0:	6120      	str	r0, [r4, #16]
 8004ff2:	b15b      	cbz	r3, 800500c <__smakebuf_r+0x74>
 8004ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f000 fd2b 	bl	8005a54 <_isatty_r>
 8004ffe:	b128      	cbz	r0, 800500c <__smakebuf_r+0x74>
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	89a0      	ldrh	r0, [r4, #12]
 800500e:	4305      	orrs	r5, r0
 8005010:	81a5      	strh	r5, [r4, #12]
 8005012:	e7cd      	b.n	8004fb0 <__smakebuf_r+0x18>
 8005014:	08004d81 	.word	0x08004d81

08005018 <__malloc_lock>:
 8005018:	4801      	ldr	r0, [pc, #4]	; (8005020 <__malloc_lock+0x8>)
 800501a:	f7ff bf95 	b.w	8004f48 <__retarget_lock_acquire_recursive>
 800501e:	bf00      	nop
 8005020:	20000b70 	.word	0x20000b70

08005024 <__malloc_unlock>:
 8005024:	4801      	ldr	r0, [pc, #4]	; (800502c <__malloc_unlock+0x8>)
 8005026:	f7ff bf90 	b.w	8004f4a <__retarget_lock_release_recursive>
 800502a:	bf00      	nop
 800502c:	20000b70 	.word	0x20000b70

08005030 <__ssputs_r>:
 8005030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005034:	688e      	ldr	r6, [r1, #8]
 8005036:	429e      	cmp	r6, r3
 8005038:	4682      	mov	sl, r0
 800503a:	460c      	mov	r4, r1
 800503c:	4690      	mov	r8, r2
 800503e:	461f      	mov	r7, r3
 8005040:	d838      	bhi.n	80050b4 <__ssputs_r+0x84>
 8005042:	898a      	ldrh	r2, [r1, #12]
 8005044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005048:	d032      	beq.n	80050b0 <__ssputs_r+0x80>
 800504a:	6825      	ldr	r5, [r4, #0]
 800504c:	6909      	ldr	r1, [r1, #16]
 800504e:	eba5 0901 	sub.w	r9, r5, r1
 8005052:	6965      	ldr	r5, [r4, #20]
 8005054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800505c:	3301      	adds	r3, #1
 800505e:	444b      	add	r3, r9
 8005060:	106d      	asrs	r5, r5, #1
 8005062:	429d      	cmp	r5, r3
 8005064:	bf38      	it	cc
 8005066:	461d      	movcc	r5, r3
 8005068:	0553      	lsls	r3, r2, #21
 800506a:	d531      	bpl.n	80050d0 <__ssputs_r+0xa0>
 800506c:	4629      	mov	r1, r5
 800506e:	f7ff faed 	bl	800464c <_malloc_r>
 8005072:	4606      	mov	r6, r0
 8005074:	b950      	cbnz	r0, 800508c <__ssputs_r+0x5c>
 8005076:	230c      	movs	r3, #12
 8005078:	f8ca 3000 	str.w	r3, [sl]
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005082:	81a3      	strh	r3, [r4, #12]
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508c:	6921      	ldr	r1, [r4, #16]
 800508e:	464a      	mov	r2, r9
 8005090:	f7ff fa5a 	bl	8004548 <memcpy>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800509a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	6126      	str	r6, [r4, #16]
 80050a2:	6165      	str	r5, [r4, #20]
 80050a4:	444e      	add	r6, r9
 80050a6:	eba5 0509 	sub.w	r5, r5, r9
 80050aa:	6026      	str	r6, [r4, #0]
 80050ac:	60a5      	str	r5, [r4, #8]
 80050ae:	463e      	mov	r6, r7
 80050b0:	42be      	cmp	r6, r7
 80050b2:	d900      	bls.n	80050b6 <__ssputs_r+0x86>
 80050b4:	463e      	mov	r6, r7
 80050b6:	6820      	ldr	r0, [r4, #0]
 80050b8:	4632      	mov	r2, r6
 80050ba:	4641      	mov	r1, r8
 80050bc:	f000 fcec 	bl	8005a98 <memmove>
 80050c0:	68a3      	ldr	r3, [r4, #8]
 80050c2:	1b9b      	subs	r3, r3, r6
 80050c4:	60a3      	str	r3, [r4, #8]
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	4433      	add	r3, r6
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	2000      	movs	r0, #0
 80050ce:	e7db      	b.n	8005088 <__ssputs_r+0x58>
 80050d0:	462a      	mov	r2, r5
 80050d2:	f000 fcfb 	bl	8005acc <_realloc_r>
 80050d6:	4606      	mov	r6, r0
 80050d8:	2800      	cmp	r0, #0
 80050da:	d1e1      	bne.n	80050a0 <__ssputs_r+0x70>
 80050dc:	6921      	ldr	r1, [r4, #16]
 80050de:	4650      	mov	r0, sl
 80050e0:	f7ff fa48 	bl	8004574 <_free_r>
 80050e4:	e7c7      	b.n	8005076 <__ssputs_r+0x46>
	...

080050e8 <_svfiprintf_r>:
 80050e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	4698      	mov	r8, r3
 80050ee:	898b      	ldrh	r3, [r1, #12]
 80050f0:	061b      	lsls	r3, r3, #24
 80050f2:	b09d      	sub	sp, #116	; 0x74
 80050f4:	4607      	mov	r7, r0
 80050f6:	460d      	mov	r5, r1
 80050f8:	4614      	mov	r4, r2
 80050fa:	d50e      	bpl.n	800511a <_svfiprintf_r+0x32>
 80050fc:	690b      	ldr	r3, [r1, #16]
 80050fe:	b963      	cbnz	r3, 800511a <_svfiprintf_r+0x32>
 8005100:	2140      	movs	r1, #64	; 0x40
 8005102:	f7ff faa3 	bl	800464c <_malloc_r>
 8005106:	6028      	str	r0, [r5, #0]
 8005108:	6128      	str	r0, [r5, #16]
 800510a:	b920      	cbnz	r0, 8005116 <_svfiprintf_r+0x2e>
 800510c:	230c      	movs	r3, #12
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	e0d1      	b.n	80052ba <_svfiprintf_r+0x1d2>
 8005116:	2340      	movs	r3, #64	; 0x40
 8005118:	616b      	str	r3, [r5, #20]
 800511a:	2300      	movs	r3, #0
 800511c:	9309      	str	r3, [sp, #36]	; 0x24
 800511e:	2320      	movs	r3, #32
 8005120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005124:	f8cd 800c 	str.w	r8, [sp, #12]
 8005128:	2330      	movs	r3, #48	; 0x30
 800512a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80052d4 <_svfiprintf_r+0x1ec>
 800512e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005132:	f04f 0901 	mov.w	r9, #1
 8005136:	4623      	mov	r3, r4
 8005138:	469a      	mov	sl, r3
 800513a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800513e:	b10a      	cbz	r2, 8005144 <_svfiprintf_r+0x5c>
 8005140:	2a25      	cmp	r2, #37	; 0x25
 8005142:	d1f9      	bne.n	8005138 <_svfiprintf_r+0x50>
 8005144:	ebba 0b04 	subs.w	fp, sl, r4
 8005148:	d00b      	beq.n	8005162 <_svfiprintf_r+0x7a>
 800514a:	465b      	mov	r3, fp
 800514c:	4622      	mov	r2, r4
 800514e:	4629      	mov	r1, r5
 8005150:	4638      	mov	r0, r7
 8005152:	f7ff ff6d 	bl	8005030 <__ssputs_r>
 8005156:	3001      	adds	r0, #1
 8005158:	f000 80aa 	beq.w	80052b0 <_svfiprintf_r+0x1c8>
 800515c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800515e:	445a      	add	r2, fp
 8005160:	9209      	str	r2, [sp, #36]	; 0x24
 8005162:	f89a 3000 	ldrb.w	r3, [sl]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80a2 	beq.w	80052b0 <_svfiprintf_r+0x1c8>
 800516c:	2300      	movs	r3, #0
 800516e:	f04f 32ff 	mov.w	r2, #4294967295
 8005172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005176:	f10a 0a01 	add.w	sl, sl, #1
 800517a:	9304      	str	r3, [sp, #16]
 800517c:	9307      	str	r3, [sp, #28]
 800517e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005182:	931a      	str	r3, [sp, #104]	; 0x68
 8005184:	4654      	mov	r4, sl
 8005186:	2205      	movs	r2, #5
 8005188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518c:	4851      	ldr	r0, [pc, #324]	; (80052d4 <_svfiprintf_r+0x1ec>)
 800518e:	f7fb f827 	bl	80001e0 <memchr>
 8005192:	9a04      	ldr	r2, [sp, #16]
 8005194:	b9d8      	cbnz	r0, 80051ce <_svfiprintf_r+0xe6>
 8005196:	06d0      	lsls	r0, r2, #27
 8005198:	bf44      	itt	mi
 800519a:	2320      	movmi	r3, #32
 800519c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051a0:	0711      	lsls	r1, r2, #28
 80051a2:	bf44      	itt	mi
 80051a4:	232b      	movmi	r3, #43	; 0x2b
 80051a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051aa:	f89a 3000 	ldrb.w	r3, [sl]
 80051ae:	2b2a      	cmp	r3, #42	; 0x2a
 80051b0:	d015      	beq.n	80051de <_svfiprintf_r+0xf6>
 80051b2:	9a07      	ldr	r2, [sp, #28]
 80051b4:	4654      	mov	r4, sl
 80051b6:	2000      	movs	r0, #0
 80051b8:	f04f 0c0a 	mov.w	ip, #10
 80051bc:	4621      	mov	r1, r4
 80051be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051c2:	3b30      	subs	r3, #48	; 0x30
 80051c4:	2b09      	cmp	r3, #9
 80051c6:	d94e      	bls.n	8005266 <_svfiprintf_r+0x17e>
 80051c8:	b1b0      	cbz	r0, 80051f8 <_svfiprintf_r+0x110>
 80051ca:	9207      	str	r2, [sp, #28]
 80051cc:	e014      	b.n	80051f8 <_svfiprintf_r+0x110>
 80051ce:	eba0 0308 	sub.w	r3, r0, r8
 80051d2:	fa09 f303 	lsl.w	r3, r9, r3
 80051d6:	4313      	orrs	r3, r2
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	46a2      	mov	sl, r4
 80051dc:	e7d2      	b.n	8005184 <_svfiprintf_r+0x9c>
 80051de:	9b03      	ldr	r3, [sp, #12]
 80051e0:	1d19      	adds	r1, r3, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	9103      	str	r1, [sp, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bfbb      	ittet	lt
 80051ea:	425b      	neglt	r3, r3
 80051ec:	f042 0202 	orrlt.w	r2, r2, #2
 80051f0:	9307      	strge	r3, [sp, #28]
 80051f2:	9307      	strlt	r3, [sp, #28]
 80051f4:	bfb8      	it	lt
 80051f6:	9204      	strlt	r2, [sp, #16]
 80051f8:	7823      	ldrb	r3, [r4, #0]
 80051fa:	2b2e      	cmp	r3, #46	; 0x2e
 80051fc:	d10c      	bne.n	8005218 <_svfiprintf_r+0x130>
 80051fe:	7863      	ldrb	r3, [r4, #1]
 8005200:	2b2a      	cmp	r3, #42	; 0x2a
 8005202:	d135      	bne.n	8005270 <_svfiprintf_r+0x188>
 8005204:	9b03      	ldr	r3, [sp, #12]
 8005206:	1d1a      	adds	r2, r3, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	9203      	str	r2, [sp, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	bfb8      	it	lt
 8005210:	f04f 33ff 	movlt.w	r3, #4294967295
 8005214:	3402      	adds	r4, #2
 8005216:	9305      	str	r3, [sp, #20]
 8005218:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80052e4 <_svfiprintf_r+0x1fc>
 800521c:	7821      	ldrb	r1, [r4, #0]
 800521e:	2203      	movs	r2, #3
 8005220:	4650      	mov	r0, sl
 8005222:	f7fa ffdd 	bl	80001e0 <memchr>
 8005226:	b140      	cbz	r0, 800523a <_svfiprintf_r+0x152>
 8005228:	2340      	movs	r3, #64	; 0x40
 800522a:	eba0 000a 	sub.w	r0, r0, sl
 800522e:	fa03 f000 	lsl.w	r0, r3, r0
 8005232:	9b04      	ldr	r3, [sp, #16]
 8005234:	4303      	orrs	r3, r0
 8005236:	3401      	adds	r4, #1
 8005238:	9304      	str	r3, [sp, #16]
 800523a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800523e:	4826      	ldr	r0, [pc, #152]	; (80052d8 <_svfiprintf_r+0x1f0>)
 8005240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005244:	2206      	movs	r2, #6
 8005246:	f7fa ffcb 	bl	80001e0 <memchr>
 800524a:	2800      	cmp	r0, #0
 800524c:	d038      	beq.n	80052c0 <_svfiprintf_r+0x1d8>
 800524e:	4b23      	ldr	r3, [pc, #140]	; (80052dc <_svfiprintf_r+0x1f4>)
 8005250:	bb1b      	cbnz	r3, 800529a <_svfiprintf_r+0x1b2>
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	3307      	adds	r3, #7
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	3308      	adds	r3, #8
 800525c:	9303      	str	r3, [sp, #12]
 800525e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005260:	4433      	add	r3, r6
 8005262:	9309      	str	r3, [sp, #36]	; 0x24
 8005264:	e767      	b.n	8005136 <_svfiprintf_r+0x4e>
 8005266:	fb0c 3202 	mla	r2, ip, r2, r3
 800526a:	460c      	mov	r4, r1
 800526c:	2001      	movs	r0, #1
 800526e:	e7a5      	b.n	80051bc <_svfiprintf_r+0xd4>
 8005270:	2300      	movs	r3, #0
 8005272:	3401      	adds	r4, #1
 8005274:	9305      	str	r3, [sp, #20]
 8005276:	4619      	mov	r1, r3
 8005278:	f04f 0c0a 	mov.w	ip, #10
 800527c:	4620      	mov	r0, r4
 800527e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005282:	3a30      	subs	r2, #48	; 0x30
 8005284:	2a09      	cmp	r2, #9
 8005286:	d903      	bls.n	8005290 <_svfiprintf_r+0x1a8>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0c5      	beq.n	8005218 <_svfiprintf_r+0x130>
 800528c:	9105      	str	r1, [sp, #20]
 800528e:	e7c3      	b.n	8005218 <_svfiprintf_r+0x130>
 8005290:	fb0c 2101 	mla	r1, ip, r1, r2
 8005294:	4604      	mov	r4, r0
 8005296:	2301      	movs	r3, #1
 8005298:	e7f0      	b.n	800527c <_svfiprintf_r+0x194>
 800529a:	ab03      	add	r3, sp, #12
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	462a      	mov	r2, r5
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <_svfiprintf_r+0x1f8>)
 80052a2:	a904      	add	r1, sp, #16
 80052a4:	4638      	mov	r0, r7
 80052a6:	f3af 8000 	nop.w
 80052aa:	1c42      	adds	r2, r0, #1
 80052ac:	4606      	mov	r6, r0
 80052ae:	d1d6      	bne.n	800525e <_svfiprintf_r+0x176>
 80052b0:	89ab      	ldrh	r3, [r5, #12]
 80052b2:	065b      	lsls	r3, r3, #25
 80052b4:	f53f af2c 	bmi.w	8005110 <_svfiprintf_r+0x28>
 80052b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ba:	b01d      	add	sp, #116	; 0x74
 80052bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c0:	ab03      	add	r3, sp, #12
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	462a      	mov	r2, r5
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <_svfiprintf_r+0x1f8>)
 80052c8:	a904      	add	r1, sp, #16
 80052ca:	4638      	mov	r0, r7
 80052cc:	f000 f9d4 	bl	8005678 <_printf_i>
 80052d0:	e7eb      	b.n	80052aa <_svfiprintf_r+0x1c2>
 80052d2:	bf00      	nop
 80052d4:	080065c4 	.word	0x080065c4
 80052d8:	080065ce 	.word	0x080065ce
 80052dc:	00000000 	.word	0x00000000
 80052e0:	08005031 	.word	0x08005031
 80052e4:	080065ca 	.word	0x080065ca

080052e8 <__sfputc_r>:
 80052e8:	6893      	ldr	r3, [r2, #8]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	b410      	push	{r4}
 80052f0:	6093      	str	r3, [r2, #8]
 80052f2:	da08      	bge.n	8005306 <__sfputc_r+0x1e>
 80052f4:	6994      	ldr	r4, [r2, #24]
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	db01      	blt.n	80052fe <__sfputc_r+0x16>
 80052fa:	290a      	cmp	r1, #10
 80052fc:	d103      	bne.n	8005306 <__sfputc_r+0x1e>
 80052fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005302:	f7ff bb79 	b.w	80049f8 <__swbuf_r>
 8005306:	6813      	ldr	r3, [r2, #0]
 8005308:	1c58      	adds	r0, r3, #1
 800530a:	6010      	str	r0, [r2, #0]
 800530c:	7019      	strb	r1, [r3, #0]
 800530e:	4608      	mov	r0, r1
 8005310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005314:	4770      	bx	lr

08005316 <__sfputs_r>:
 8005316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005318:	4606      	mov	r6, r0
 800531a:	460f      	mov	r7, r1
 800531c:	4614      	mov	r4, r2
 800531e:	18d5      	adds	r5, r2, r3
 8005320:	42ac      	cmp	r4, r5
 8005322:	d101      	bne.n	8005328 <__sfputs_r+0x12>
 8005324:	2000      	movs	r0, #0
 8005326:	e007      	b.n	8005338 <__sfputs_r+0x22>
 8005328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800532c:	463a      	mov	r2, r7
 800532e:	4630      	mov	r0, r6
 8005330:	f7ff ffda 	bl	80052e8 <__sfputc_r>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d1f3      	bne.n	8005320 <__sfputs_r+0xa>
 8005338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800533c <_vfiprintf_r>:
 800533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005340:	460d      	mov	r5, r1
 8005342:	b09d      	sub	sp, #116	; 0x74
 8005344:	4614      	mov	r4, r2
 8005346:	4698      	mov	r8, r3
 8005348:	4606      	mov	r6, r0
 800534a:	b118      	cbz	r0, 8005354 <_vfiprintf_r+0x18>
 800534c:	6983      	ldr	r3, [r0, #24]
 800534e:	b90b      	cbnz	r3, 8005354 <_vfiprintf_r+0x18>
 8005350:	f7ff fd4a 	bl	8004de8 <__sinit>
 8005354:	4b89      	ldr	r3, [pc, #548]	; (800557c <_vfiprintf_r+0x240>)
 8005356:	429d      	cmp	r5, r3
 8005358:	d11b      	bne.n	8005392 <_vfiprintf_r+0x56>
 800535a:	6875      	ldr	r5, [r6, #4]
 800535c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800535e:	07d9      	lsls	r1, r3, #31
 8005360:	d405      	bmi.n	800536e <_vfiprintf_r+0x32>
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	059a      	lsls	r2, r3, #22
 8005366:	d402      	bmi.n	800536e <_vfiprintf_r+0x32>
 8005368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800536a:	f7ff fded 	bl	8004f48 <__retarget_lock_acquire_recursive>
 800536e:	89ab      	ldrh	r3, [r5, #12]
 8005370:	071b      	lsls	r3, r3, #28
 8005372:	d501      	bpl.n	8005378 <_vfiprintf_r+0x3c>
 8005374:	692b      	ldr	r3, [r5, #16]
 8005376:	b9eb      	cbnz	r3, 80053b4 <_vfiprintf_r+0x78>
 8005378:	4629      	mov	r1, r5
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff fb8e 	bl	8004a9c <__swsetup_r>
 8005380:	b1c0      	cbz	r0, 80053b4 <_vfiprintf_r+0x78>
 8005382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005384:	07dc      	lsls	r4, r3, #31
 8005386:	d50e      	bpl.n	80053a6 <_vfiprintf_r+0x6a>
 8005388:	f04f 30ff 	mov.w	r0, #4294967295
 800538c:	b01d      	add	sp, #116	; 0x74
 800538e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005392:	4b7b      	ldr	r3, [pc, #492]	; (8005580 <_vfiprintf_r+0x244>)
 8005394:	429d      	cmp	r5, r3
 8005396:	d101      	bne.n	800539c <_vfiprintf_r+0x60>
 8005398:	68b5      	ldr	r5, [r6, #8]
 800539a:	e7df      	b.n	800535c <_vfiprintf_r+0x20>
 800539c:	4b79      	ldr	r3, [pc, #484]	; (8005584 <_vfiprintf_r+0x248>)
 800539e:	429d      	cmp	r5, r3
 80053a0:	bf08      	it	eq
 80053a2:	68f5      	ldreq	r5, [r6, #12]
 80053a4:	e7da      	b.n	800535c <_vfiprintf_r+0x20>
 80053a6:	89ab      	ldrh	r3, [r5, #12]
 80053a8:	0598      	lsls	r0, r3, #22
 80053aa:	d4ed      	bmi.n	8005388 <_vfiprintf_r+0x4c>
 80053ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ae:	f7ff fdcc 	bl	8004f4a <__retarget_lock_release_recursive>
 80053b2:	e7e9      	b.n	8005388 <_vfiprintf_r+0x4c>
 80053b4:	2300      	movs	r3, #0
 80053b6:	9309      	str	r3, [sp, #36]	; 0x24
 80053b8:	2320      	movs	r3, #32
 80053ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053be:	f8cd 800c 	str.w	r8, [sp, #12]
 80053c2:	2330      	movs	r3, #48	; 0x30
 80053c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005588 <_vfiprintf_r+0x24c>
 80053c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053cc:	f04f 0901 	mov.w	r9, #1
 80053d0:	4623      	mov	r3, r4
 80053d2:	469a      	mov	sl, r3
 80053d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053d8:	b10a      	cbz	r2, 80053de <_vfiprintf_r+0xa2>
 80053da:	2a25      	cmp	r2, #37	; 0x25
 80053dc:	d1f9      	bne.n	80053d2 <_vfiprintf_r+0x96>
 80053de:	ebba 0b04 	subs.w	fp, sl, r4
 80053e2:	d00b      	beq.n	80053fc <_vfiprintf_r+0xc0>
 80053e4:	465b      	mov	r3, fp
 80053e6:	4622      	mov	r2, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	4630      	mov	r0, r6
 80053ec:	f7ff ff93 	bl	8005316 <__sfputs_r>
 80053f0:	3001      	adds	r0, #1
 80053f2:	f000 80aa 	beq.w	800554a <_vfiprintf_r+0x20e>
 80053f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053f8:	445a      	add	r2, fp
 80053fa:	9209      	str	r2, [sp, #36]	; 0x24
 80053fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80a2 	beq.w	800554a <_vfiprintf_r+0x20e>
 8005406:	2300      	movs	r3, #0
 8005408:	f04f 32ff 	mov.w	r2, #4294967295
 800540c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005410:	f10a 0a01 	add.w	sl, sl, #1
 8005414:	9304      	str	r3, [sp, #16]
 8005416:	9307      	str	r3, [sp, #28]
 8005418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800541c:	931a      	str	r3, [sp, #104]	; 0x68
 800541e:	4654      	mov	r4, sl
 8005420:	2205      	movs	r2, #5
 8005422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005426:	4858      	ldr	r0, [pc, #352]	; (8005588 <_vfiprintf_r+0x24c>)
 8005428:	f7fa feda 	bl	80001e0 <memchr>
 800542c:	9a04      	ldr	r2, [sp, #16]
 800542e:	b9d8      	cbnz	r0, 8005468 <_vfiprintf_r+0x12c>
 8005430:	06d1      	lsls	r1, r2, #27
 8005432:	bf44      	itt	mi
 8005434:	2320      	movmi	r3, #32
 8005436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800543a:	0713      	lsls	r3, r2, #28
 800543c:	bf44      	itt	mi
 800543e:	232b      	movmi	r3, #43	; 0x2b
 8005440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005444:	f89a 3000 	ldrb.w	r3, [sl]
 8005448:	2b2a      	cmp	r3, #42	; 0x2a
 800544a:	d015      	beq.n	8005478 <_vfiprintf_r+0x13c>
 800544c:	9a07      	ldr	r2, [sp, #28]
 800544e:	4654      	mov	r4, sl
 8005450:	2000      	movs	r0, #0
 8005452:	f04f 0c0a 	mov.w	ip, #10
 8005456:	4621      	mov	r1, r4
 8005458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800545c:	3b30      	subs	r3, #48	; 0x30
 800545e:	2b09      	cmp	r3, #9
 8005460:	d94e      	bls.n	8005500 <_vfiprintf_r+0x1c4>
 8005462:	b1b0      	cbz	r0, 8005492 <_vfiprintf_r+0x156>
 8005464:	9207      	str	r2, [sp, #28]
 8005466:	e014      	b.n	8005492 <_vfiprintf_r+0x156>
 8005468:	eba0 0308 	sub.w	r3, r0, r8
 800546c:	fa09 f303 	lsl.w	r3, r9, r3
 8005470:	4313      	orrs	r3, r2
 8005472:	9304      	str	r3, [sp, #16]
 8005474:	46a2      	mov	sl, r4
 8005476:	e7d2      	b.n	800541e <_vfiprintf_r+0xe2>
 8005478:	9b03      	ldr	r3, [sp, #12]
 800547a:	1d19      	adds	r1, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	9103      	str	r1, [sp, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	bfbb      	ittet	lt
 8005484:	425b      	neglt	r3, r3
 8005486:	f042 0202 	orrlt.w	r2, r2, #2
 800548a:	9307      	strge	r3, [sp, #28]
 800548c:	9307      	strlt	r3, [sp, #28]
 800548e:	bfb8      	it	lt
 8005490:	9204      	strlt	r2, [sp, #16]
 8005492:	7823      	ldrb	r3, [r4, #0]
 8005494:	2b2e      	cmp	r3, #46	; 0x2e
 8005496:	d10c      	bne.n	80054b2 <_vfiprintf_r+0x176>
 8005498:	7863      	ldrb	r3, [r4, #1]
 800549a:	2b2a      	cmp	r3, #42	; 0x2a
 800549c:	d135      	bne.n	800550a <_vfiprintf_r+0x1ce>
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	1d1a      	adds	r2, r3, #4
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	9203      	str	r2, [sp, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfb8      	it	lt
 80054aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80054ae:	3402      	adds	r4, #2
 80054b0:	9305      	str	r3, [sp, #20]
 80054b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005598 <_vfiprintf_r+0x25c>
 80054b6:	7821      	ldrb	r1, [r4, #0]
 80054b8:	2203      	movs	r2, #3
 80054ba:	4650      	mov	r0, sl
 80054bc:	f7fa fe90 	bl	80001e0 <memchr>
 80054c0:	b140      	cbz	r0, 80054d4 <_vfiprintf_r+0x198>
 80054c2:	2340      	movs	r3, #64	; 0x40
 80054c4:	eba0 000a 	sub.w	r0, r0, sl
 80054c8:	fa03 f000 	lsl.w	r0, r3, r0
 80054cc:	9b04      	ldr	r3, [sp, #16]
 80054ce:	4303      	orrs	r3, r0
 80054d0:	3401      	adds	r4, #1
 80054d2:	9304      	str	r3, [sp, #16]
 80054d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d8:	482c      	ldr	r0, [pc, #176]	; (800558c <_vfiprintf_r+0x250>)
 80054da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054de:	2206      	movs	r2, #6
 80054e0:	f7fa fe7e 	bl	80001e0 <memchr>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d03f      	beq.n	8005568 <_vfiprintf_r+0x22c>
 80054e8:	4b29      	ldr	r3, [pc, #164]	; (8005590 <_vfiprintf_r+0x254>)
 80054ea:	bb1b      	cbnz	r3, 8005534 <_vfiprintf_r+0x1f8>
 80054ec:	9b03      	ldr	r3, [sp, #12]
 80054ee:	3307      	adds	r3, #7
 80054f0:	f023 0307 	bic.w	r3, r3, #7
 80054f4:	3308      	adds	r3, #8
 80054f6:	9303      	str	r3, [sp, #12]
 80054f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054fa:	443b      	add	r3, r7
 80054fc:	9309      	str	r3, [sp, #36]	; 0x24
 80054fe:	e767      	b.n	80053d0 <_vfiprintf_r+0x94>
 8005500:	fb0c 3202 	mla	r2, ip, r2, r3
 8005504:	460c      	mov	r4, r1
 8005506:	2001      	movs	r0, #1
 8005508:	e7a5      	b.n	8005456 <_vfiprintf_r+0x11a>
 800550a:	2300      	movs	r3, #0
 800550c:	3401      	adds	r4, #1
 800550e:	9305      	str	r3, [sp, #20]
 8005510:	4619      	mov	r1, r3
 8005512:	f04f 0c0a 	mov.w	ip, #10
 8005516:	4620      	mov	r0, r4
 8005518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800551c:	3a30      	subs	r2, #48	; 0x30
 800551e:	2a09      	cmp	r2, #9
 8005520:	d903      	bls.n	800552a <_vfiprintf_r+0x1ee>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0c5      	beq.n	80054b2 <_vfiprintf_r+0x176>
 8005526:	9105      	str	r1, [sp, #20]
 8005528:	e7c3      	b.n	80054b2 <_vfiprintf_r+0x176>
 800552a:	fb0c 2101 	mla	r1, ip, r1, r2
 800552e:	4604      	mov	r4, r0
 8005530:	2301      	movs	r3, #1
 8005532:	e7f0      	b.n	8005516 <_vfiprintf_r+0x1da>
 8005534:	ab03      	add	r3, sp, #12
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	462a      	mov	r2, r5
 800553a:	4b16      	ldr	r3, [pc, #88]	; (8005594 <_vfiprintf_r+0x258>)
 800553c:	a904      	add	r1, sp, #16
 800553e:	4630      	mov	r0, r6
 8005540:	f3af 8000 	nop.w
 8005544:	4607      	mov	r7, r0
 8005546:	1c78      	adds	r0, r7, #1
 8005548:	d1d6      	bne.n	80054f8 <_vfiprintf_r+0x1bc>
 800554a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800554c:	07d9      	lsls	r1, r3, #31
 800554e:	d405      	bmi.n	800555c <_vfiprintf_r+0x220>
 8005550:	89ab      	ldrh	r3, [r5, #12]
 8005552:	059a      	lsls	r2, r3, #22
 8005554:	d402      	bmi.n	800555c <_vfiprintf_r+0x220>
 8005556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005558:	f7ff fcf7 	bl	8004f4a <__retarget_lock_release_recursive>
 800555c:	89ab      	ldrh	r3, [r5, #12]
 800555e:	065b      	lsls	r3, r3, #25
 8005560:	f53f af12 	bmi.w	8005388 <_vfiprintf_r+0x4c>
 8005564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005566:	e711      	b.n	800538c <_vfiprintf_r+0x50>
 8005568:	ab03      	add	r3, sp, #12
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	462a      	mov	r2, r5
 800556e:	4b09      	ldr	r3, [pc, #36]	; (8005594 <_vfiprintf_r+0x258>)
 8005570:	a904      	add	r1, sp, #16
 8005572:	4630      	mov	r0, r6
 8005574:	f000 f880 	bl	8005678 <_printf_i>
 8005578:	e7e4      	b.n	8005544 <_vfiprintf_r+0x208>
 800557a:	bf00      	nop
 800557c:	08006584 	.word	0x08006584
 8005580:	080065a4 	.word	0x080065a4
 8005584:	08006564 	.word	0x08006564
 8005588:	080065c4 	.word	0x080065c4
 800558c:	080065ce 	.word	0x080065ce
 8005590:	00000000 	.word	0x00000000
 8005594:	08005317 	.word	0x08005317
 8005598:	080065ca 	.word	0x080065ca

0800559c <_printf_common>:
 800559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	4616      	mov	r6, r2
 80055a2:	4699      	mov	r9, r3
 80055a4:	688a      	ldr	r2, [r1, #8]
 80055a6:	690b      	ldr	r3, [r1, #16]
 80055a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bfb8      	it	lt
 80055b0:	4613      	movlt	r3, r2
 80055b2:	6033      	str	r3, [r6, #0]
 80055b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055b8:	4607      	mov	r7, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	b10a      	cbz	r2, 80055c2 <_printf_common+0x26>
 80055be:	3301      	adds	r3, #1
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	0699      	lsls	r1, r3, #26
 80055c6:	bf42      	ittt	mi
 80055c8:	6833      	ldrmi	r3, [r6, #0]
 80055ca:	3302      	addmi	r3, #2
 80055cc:	6033      	strmi	r3, [r6, #0]
 80055ce:	6825      	ldr	r5, [r4, #0]
 80055d0:	f015 0506 	ands.w	r5, r5, #6
 80055d4:	d106      	bne.n	80055e4 <_printf_common+0x48>
 80055d6:	f104 0a19 	add.w	sl, r4, #25
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	6832      	ldr	r2, [r6, #0]
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dc26      	bgt.n	8005632 <_printf_common+0x96>
 80055e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055e8:	1e13      	subs	r3, r2, #0
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	bf18      	it	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	0692      	lsls	r2, r2, #26
 80055f2:	d42b      	bmi.n	800564c <_printf_common+0xb0>
 80055f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055f8:	4649      	mov	r1, r9
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c0      	blx	r8
 80055fe:	3001      	adds	r0, #1
 8005600:	d01e      	beq.n	8005640 <_printf_common+0xa4>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	68e5      	ldr	r5, [r4, #12]
 8005606:	6832      	ldr	r2, [r6, #0]
 8005608:	f003 0306 	and.w	r3, r3, #6
 800560c:	2b04      	cmp	r3, #4
 800560e:	bf08      	it	eq
 8005610:	1aad      	subeq	r5, r5, r2
 8005612:	68a3      	ldr	r3, [r4, #8]
 8005614:	6922      	ldr	r2, [r4, #16]
 8005616:	bf0c      	ite	eq
 8005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800561c:	2500      	movne	r5, #0
 800561e:	4293      	cmp	r3, r2
 8005620:	bfc4      	itt	gt
 8005622:	1a9b      	subgt	r3, r3, r2
 8005624:	18ed      	addgt	r5, r5, r3
 8005626:	2600      	movs	r6, #0
 8005628:	341a      	adds	r4, #26
 800562a:	42b5      	cmp	r5, r6
 800562c:	d11a      	bne.n	8005664 <_printf_common+0xc8>
 800562e:	2000      	movs	r0, #0
 8005630:	e008      	b.n	8005644 <_printf_common+0xa8>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4649      	mov	r1, r9
 8005638:	4638      	mov	r0, r7
 800563a:	47c0      	blx	r8
 800563c:	3001      	adds	r0, #1
 800563e:	d103      	bne.n	8005648 <_printf_common+0xac>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	3501      	adds	r5, #1
 800564a:	e7c6      	b.n	80055da <_printf_common+0x3e>
 800564c:	18e1      	adds	r1, r4, r3
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	2030      	movs	r0, #48	; 0x30
 8005652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005656:	4422      	add	r2, r4
 8005658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800565c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005660:	3302      	adds	r3, #2
 8005662:	e7c7      	b.n	80055f4 <_printf_common+0x58>
 8005664:	2301      	movs	r3, #1
 8005666:	4622      	mov	r2, r4
 8005668:	4649      	mov	r1, r9
 800566a:	4638      	mov	r0, r7
 800566c:	47c0      	blx	r8
 800566e:	3001      	adds	r0, #1
 8005670:	d0e6      	beq.n	8005640 <_printf_common+0xa4>
 8005672:	3601      	adds	r6, #1
 8005674:	e7d9      	b.n	800562a <_printf_common+0x8e>
	...

08005678 <_printf_i>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	7e0f      	ldrb	r7, [r1, #24]
 800567e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005680:	2f78      	cmp	r7, #120	; 0x78
 8005682:	4691      	mov	r9, r2
 8005684:	4680      	mov	r8, r0
 8005686:	460c      	mov	r4, r1
 8005688:	469a      	mov	sl, r3
 800568a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800568e:	d807      	bhi.n	80056a0 <_printf_i+0x28>
 8005690:	2f62      	cmp	r7, #98	; 0x62
 8005692:	d80a      	bhi.n	80056aa <_printf_i+0x32>
 8005694:	2f00      	cmp	r7, #0
 8005696:	f000 80d8 	beq.w	800584a <_printf_i+0x1d2>
 800569a:	2f58      	cmp	r7, #88	; 0x58
 800569c:	f000 80a3 	beq.w	80057e6 <_printf_i+0x16e>
 80056a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056a8:	e03a      	b.n	8005720 <_printf_i+0xa8>
 80056aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ae:	2b15      	cmp	r3, #21
 80056b0:	d8f6      	bhi.n	80056a0 <_printf_i+0x28>
 80056b2:	a101      	add	r1, pc, #4	; (adr r1, 80056b8 <_printf_i+0x40>)
 80056b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005725 	.word	0x08005725
 80056c0:	080056a1 	.word	0x080056a1
 80056c4:	080056a1 	.word	0x080056a1
 80056c8:	080056a1 	.word	0x080056a1
 80056cc:	080056a1 	.word	0x080056a1
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080056a1 	.word	0x080056a1
 80056d8:	080056a1 	.word	0x080056a1
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	08005831 	.word	0x08005831
 80056e8:	08005755 	.word	0x08005755
 80056ec:	08005813 	.word	0x08005813
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	08005853 	.word	0x08005853
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	08005755 	.word	0x08005755
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	0800581b 	.word	0x0800581b
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	602a      	str	r2, [r5, #0]
 8005718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800571c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005720:	2301      	movs	r3, #1
 8005722:	e0a3      	b.n	800586c <_printf_i+0x1f4>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	6829      	ldr	r1, [r5, #0]
 8005728:	0606      	lsls	r6, r0, #24
 800572a:	f101 0304 	add.w	r3, r1, #4
 800572e:	d50a      	bpl.n	8005746 <_printf_i+0xce>
 8005730:	680e      	ldr	r6, [r1, #0]
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	2e00      	cmp	r6, #0
 8005736:	da03      	bge.n	8005740 <_printf_i+0xc8>
 8005738:	232d      	movs	r3, #45	; 0x2d
 800573a:	4276      	negs	r6, r6
 800573c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005740:	485e      	ldr	r0, [pc, #376]	; (80058bc <_printf_i+0x244>)
 8005742:	230a      	movs	r3, #10
 8005744:	e019      	b.n	800577a <_printf_i+0x102>
 8005746:	680e      	ldr	r6, [r1, #0]
 8005748:	602b      	str	r3, [r5, #0]
 800574a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800574e:	bf18      	it	ne
 8005750:	b236      	sxthne	r6, r6
 8005752:	e7ef      	b.n	8005734 <_printf_i+0xbc>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	6820      	ldr	r0, [r4, #0]
 8005758:	1d19      	adds	r1, r3, #4
 800575a:	6029      	str	r1, [r5, #0]
 800575c:	0601      	lsls	r1, r0, #24
 800575e:	d501      	bpl.n	8005764 <_printf_i+0xec>
 8005760:	681e      	ldr	r6, [r3, #0]
 8005762:	e002      	b.n	800576a <_printf_i+0xf2>
 8005764:	0646      	lsls	r6, r0, #25
 8005766:	d5fb      	bpl.n	8005760 <_printf_i+0xe8>
 8005768:	881e      	ldrh	r6, [r3, #0]
 800576a:	4854      	ldr	r0, [pc, #336]	; (80058bc <_printf_i+0x244>)
 800576c:	2f6f      	cmp	r7, #111	; 0x6f
 800576e:	bf0c      	ite	eq
 8005770:	2308      	moveq	r3, #8
 8005772:	230a      	movne	r3, #10
 8005774:	2100      	movs	r1, #0
 8005776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800577a:	6865      	ldr	r5, [r4, #4]
 800577c:	60a5      	str	r5, [r4, #8]
 800577e:	2d00      	cmp	r5, #0
 8005780:	bfa2      	ittt	ge
 8005782:	6821      	ldrge	r1, [r4, #0]
 8005784:	f021 0104 	bicge.w	r1, r1, #4
 8005788:	6021      	strge	r1, [r4, #0]
 800578a:	b90e      	cbnz	r6, 8005790 <_printf_i+0x118>
 800578c:	2d00      	cmp	r5, #0
 800578e:	d04d      	beq.n	800582c <_printf_i+0x1b4>
 8005790:	4615      	mov	r5, r2
 8005792:	fbb6 f1f3 	udiv	r1, r6, r3
 8005796:	fb03 6711 	mls	r7, r3, r1, r6
 800579a:	5dc7      	ldrb	r7, [r0, r7]
 800579c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057a0:	4637      	mov	r7, r6
 80057a2:	42bb      	cmp	r3, r7
 80057a4:	460e      	mov	r6, r1
 80057a6:	d9f4      	bls.n	8005792 <_printf_i+0x11a>
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d10b      	bne.n	80057c4 <_printf_i+0x14c>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	07de      	lsls	r6, r3, #31
 80057b0:	d508      	bpl.n	80057c4 <_printf_i+0x14c>
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	6861      	ldr	r1, [r4, #4]
 80057b6:	4299      	cmp	r1, r3
 80057b8:	bfde      	ittt	le
 80057ba:	2330      	movle	r3, #48	; 0x30
 80057bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057c4:	1b52      	subs	r2, r2, r5
 80057c6:	6122      	str	r2, [r4, #16]
 80057c8:	f8cd a000 	str.w	sl, [sp]
 80057cc:	464b      	mov	r3, r9
 80057ce:	aa03      	add	r2, sp, #12
 80057d0:	4621      	mov	r1, r4
 80057d2:	4640      	mov	r0, r8
 80057d4:	f7ff fee2 	bl	800559c <_printf_common>
 80057d8:	3001      	adds	r0, #1
 80057da:	d14c      	bne.n	8005876 <_printf_i+0x1fe>
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	b004      	add	sp, #16
 80057e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e6:	4835      	ldr	r0, [pc, #212]	; (80058bc <_printf_i+0x244>)
 80057e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057ec:	6829      	ldr	r1, [r5, #0]
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80057f4:	6029      	str	r1, [r5, #0]
 80057f6:	061d      	lsls	r5, r3, #24
 80057f8:	d514      	bpl.n	8005824 <_printf_i+0x1ac>
 80057fa:	07df      	lsls	r7, r3, #31
 80057fc:	bf44      	itt	mi
 80057fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005802:	6023      	strmi	r3, [r4, #0]
 8005804:	b91e      	cbnz	r6, 800580e <_printf_i+0x196>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	f023 0320 	bic.w	r3, r3, #32
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	2310      	movs	r3, #16
 8005810:	e7b0      	b.n	8005774 <_printf_i+0xfc>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	f043 0320 	orr.w	r3, r3, #32
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	2378      	movs	r3, #120	; 0x78
 800581c:	4828      	ldr	r0, [pc, #160]	; (80058c0 <_printf_i+0x248>)
 800581e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005822:	e7e3      	b.n	80057ec <_printf_i+0x174>
 8005824:	0659      	lsls	r1, r3, #25
 8005826:	bf48      	it	mi
 8005828:	b2b6      	uxthmi	r6, r6
 800582a:	e7e6      	b.n	80057fa <_printf_i+0x182>
 800582c:	4615      	mov	r5, r2
 800582e:	e7bb      	b.n	80057a8 <_printf_i+0x130>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	6826      	ldr	r6, [r4, #0]
 8005834:	6961      	ldr	r1, [r4, #20]
 8005836:	1d18      	adds	r0, r3, #4
 8005838:	6028      	str	r0, [r5, #0]
 800583a:	0635      	lsls	r5, r6, #24
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	d501      	bpl.n	8005844 <_printf_i+0x1cc>
 8005840:	6019      	str	r1, [r3, #0]
 8005842:	e002      	b.n	800584a <_printf_i+0x1d2>
 8005844:	0670      	lsls	r0, r6, #25
 8005846:	d5fb      	bpl.n	8005840 <_printf_i+0x1c8>
 8005848:	8019      	strh	r1, [r3, #0]
 800584a:	2300      	movs	r3, #0
 800584c:	6123      	str	r3, [r4, #16]
 800584e:	4615      	mov	r5, r2
 8005850:	e7ba      	b.n	80057c8 <_printf_i+0x150>
 8005852:	682b      	ldr	r3, [r5, #0]
 8005854:	1d1a      	adds	r2, r3, #4
 8005856:	602a      	str	r2, [r5, #0]
 8005858:	681d      	ldr	r5, [r3, #0]
 800585a:	6862      	ldr	r2, [r4, #4]
 800585c:	2100      	movs	r1, #0
 800585e:	4628      	mov	r0, r5
 8005860:	f7fa fcbe 	bl	80001e0 <memchr>
 8005864:	b108      	cbz	r0, 800586a <_printf_i+0x1f2>
 8005866:	1b40      	subs	r0, r0, r5
 8005868:	6060      	str	r0, [r4, #4]
 800586a:	6863      	ldr	r3, [r4, #4]
 800586c:	6123      	str	r3, [r4, #16]
 800586e:	2300      	movs	r3, #0
 8005870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005874:	e7a8      	b.n	80057c8 <_printf_i+0x150>
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	462a      	mov	r2, r5
 800587a:	4649      	mov	r1, r9
 800587c:	4640      	mov	r0, r8
 800587e:	47d0      	blx	sl
 8005880:	3001      	adds	r0, #1
 8005882:	d0ab      	beq.n	80057dc <_printf_i+0x164>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	079b      	lsls	r3, r3, #30
 8005888:	d413      	bmi.n	80058b2 <_printf_i+0x23a>
 800588a:	68e0      	ldr	r0, [r4, #12]
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	4298      	cmp	r0, r3
 8005890:	bfb8      	it	lt
 8005892:	4618      	movlt	r0, r3
 8005894:	e7a4      	b.n	80057e0 <_printf_i+0x168>
 8005896:	2301      	movs	r3, #1
 8005898:	4632      	mov	r2, r6
 800589a:	4649      	mov	r1, r9
 800589c:	4640      	mov	r0, r8
 800589e:	47d0      	blx	sl
 80058a0:	3001      	adds	r0, #1
 80058a2:	d09b      	beq.n	80057dc <_printf_i+0x164>
 80058a4:	3501      	adds	r5, #1
 80058a6:	68e3      	ldr	r3, [r4, #12]
 80058a8:	9903      	ldr	r1, [sp, #12]
 80058aa:	1a5b      	subs	r3, r3, r1
 80058ac:	42ab      	cmp	r3, r5
 80058ae:	dcf2      	bgt.n	8005896 <_printf_i+0x21e>
 80058b0:	e7eb      	b.n	800588a <_printf_i+0x212>
 80058b2:	2500      	movs	r5, #0
 80058b4:	f104 0619 	add.w	r6, r4, #25
 80058b8:	e7f5      	b.n	80058a6 <_printf_i+0x22e>
 80058ba:	bf00      	nop
 80058bc:	080065d5 	.word	0x080065d5
 80058c0:	080065e6 	.word	0x080065e6

080058c4 <_putc_r>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	460d      	mov	r5, r1
 80058c8:	4614      	mov	r4, r2
 80058ca:	4606      	mov	r6, r0
 80058cc:	b118      	cbz	r0, 80058d6 <_putc_r+0x12>
 80058ce:	6983      	ldr	r3, [r0, #24]
 80058d0:	b90b      	cbnz	r3, 80058d6 <_putc_r+0x12>
 80058d2:	f7ff fa89 	bl	8004de8 <__sinit>
 80058d6:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <_putc_r+0x84>)
 80058d8:	429c      	cmp	r4, r3
 80058da:	d124      	bne.n	8005926 <_putc_r+0x62>
 80058dc:	6874      	ldr	r4, [r6, #4]
 80058de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058e0:	07d8      	lsls	r0, r3, #31
 80058e2:	d405      	bmi.n	80058f0 <_putc_r+0x2c>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	0599      	lsls	r1, r3, #22
 80058e8:	d402      	bmi.n	80058f0 <_putc_r+0x2c>
 80058ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ec:	f7ff fb2c 	bl	8004f48 <__retarget_lock_acquire_recursive>
 80058f0:	68a3      	ldr	r3, [r4, #8]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	60a3      	str	r3, [r4, #8]
 80058f8:	da05      	bge.n	8005906 <_putc_r+0x42>
 80058fa:	69a2      	ldr	r2, [r4, #24]
 80058fc:	4293      	cmp	r3, r2
 80058fe:	db1c      	blt.n	800593a <_putc_r+0x76>
 8005900:	b2eb      	uxtb	r3, r5
 8005902:	2b0a      	cmp	r3, #10
 8005904:	d019      	beq.n	800593a <_putc_r+0x76>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	6022      	str	r2, [r4, #0]
 800590c:	701d      	strb	r5, [r3, #0]
 800590e:	b2ed      	uxtb	r5, r5
 8005910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005912:	07da      	lsls	r2, r3, #31
 8005914:	d405      	bmi.n	8005922 <_putc_r+0x5e>
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	059b      	lsls	r3, r3, #22
 800591a:	d402      	bmi.n	8005922 <_putc_r+0x5e>
 800591c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800591e:	f7ff fb14 	bl	8004f4a <__retarget_lock_release_recursive>
 8005922:	4628      	mov	r0, r5
 8005924:	bd70      	pop	{r4, r5, r6, pc}
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <_putc_r+0x88>)
 8005928:	429c      	cmp	r4, r3
 800592a:	d101      	bne.n	8005930 <_putc_r+0x6c>
 800592c:	68b4      	ldr	r4, [r6, #8]
 800592e:	e7d6      	b.n	80058de <_putc_r+0x1a>
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <_putc_r+0x8c>)
 8005932:	429c      	cmp	r4, r3
 8005934:	bf08      	it	eq
 8005936:	68f4      	ldreq	r4, [r6, #12]
 8005938:	e7d1      	b.n	80058de <_putc_r+0x1a>
 800593a:	4629      	mov	r1, r5
 800593c:	4622      	mov	r2, r4
 800593e:	4630      	mov	r0, r6
 8005940:	f7ff f85a 	bl	80049f8 <__swbuf_r>
 8005944:	4605      	mov	r5, r0
 8005946:	e7e3      	b.n	8005910 <_putc_r+0x4c>
 8005948:	08006584 	.word	0x08006584
 800594c:	080065a4 	.word	0x080065a4
 8005950:	08006564 	.word	0x08006564

08005954 <__sread>:
 8005954:	b510      	push	{r4, lr}
 8005956:	460c      	mov	r4, r1
 8005958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595c:	f000 f8e6 	bl	8005b2c <_read_r>
 8005960:	2800      	cmp	r0, #0
 8005962:	bfab      	itete	ge
 8005964:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005966:	89a3      	ldrhlt	r3, [r4, #12]
 8005968:	181b      	addge	r3, r3, r0
 800596a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800596e:	bfac      	ite	ge
 8005970:	6563      	strge	r3, [r4, #84]	; 0x54
 8005972:	81a3      	strhlt	r3, [r4, #12]
 8005974:	bd10      	pop	{r4, pc}

08005976 <__swrite>:
 8005976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800597a:	461f      	mov	r7, r3
 800597c:	898b      	ldrh	r3, [r1, #12]
 800597e:	05db      	lsls	r3, r3, #23
 8005980:	4605      	mov	r5, r0
 8005982:	460c      	mov	r4, r1
 8005984:	4616      	mov	r6, r2
 8005986:	d505      	bpl.n	8005994 <__swrite+0x1e>
 8005988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598c:	2302      	movs	r3, #2
 800598e:	2200      	movs	r2, #0
 8005990:	f000 f870 	bl	8005a74 <_lseek_r>
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800599a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800599e:	81a3      	strh	r3, [r4, #12]
 80059a0:	4632      	mov	r2, r6
 80059a2:	463b      	mov	r3, r7
 80059a4:	4628      	mov	r0, r5
 80059a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059aa:	f000 b817 	b.w	80059dc <_write_r>

080059ae <__sseek>:
 80059ae:	b510      	push	{r4, lr}
 80059b0:	460c      	mov	r4, r1
 80059b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b6:	f000 f85d 	bl	8005a74 <_lseek_r>
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	bf15      	itete	ne
 80059c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80059c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059ca:	81a3      	strheq	r3, [r4, #12]
 80059cc:	bf18      	it	ne
 80059ce:	81a3      	strhne	r3, [r4, #12]
 80059d0:	bd10      	pop	{r4, pc}

080059d2 <__sclose>:
 80059d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d6:	f000 b81b 	b.w	8005a10 <_close_r>
	...

080059dc <_write_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4d07      	ldr	r5, [pc, #28]	; (80059fc <_write_r+0x20>)
 80059e0:	4604      	mov	r4, r0
 80059e2:	4608      	mov	r0, r1
 80059e4:	4611      	mov	r1, r2
 80059e6:	2200      	movs	r2, #0
 80059e8:	602a      	str	r2, [r5, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f7fe fd46 	bl	800447c <_write>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_write_r+0x1e>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_write_r+0x1e>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	20000b74 	.word	0x20000b74

08005a00 <abort>:
 8005a00:	b508      	push	{r3, lr}
 8005a02:	2006      	movs	r0, #6
 8005a04:	f000 f8cc 	bl	8005ba0 <raise>
 8005a08:	2001      	movs	r0, #1
 8005a0a:	f7fe fd2a 	bl	8004462 <_exit>
	...

08005a10 <_close_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4d06      	ldr	r5, [pc, #24]	; (8005a2c <_close_r+0x1c>)
 8005a14:	2300      	movs	r3, #0
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	f7fe fd56 	bl	80044cc <_close>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_close_r+0x1a>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_close_r+0x1a>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000b74 	.word	0x20000b74

08005a30 <_fstat_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4d07      	ldr	r5, [pc, #28]	; (8005a50 <_fstat_r+0x20>)
 8005a34:	2300      	movs	r3, #0
 8005a36:	4604      	mov	r4, r0
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	602b      	str	r3, [r5, #0]
 8005a3e:	f7fe fd48 	bl	80044d2 <_fstat>
 8005a42:	1c43      	adds	r3, r0, #1
 8005a44:	d102      	bne.n	8005a4c <_fstat_r+0x1c>
 8005a46:	682b      	ldr	r3, [r5, #0]
 8005a48:	b103      	cbz	r3, 8005a4c <_fstat_r+0x1c>
 8005a4a:	6023      	str	r3, [r4, #0]
 8005a4c:	bd38      	pop	{r3, r4, r5, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000b74 	.word	0x20000b74

08005a54 <_isatty_r>:
 8005a54:	b538      	push	{r3, r4, r5, lr}
 8005a56:	4d06      	ldr	r5, [pc, #24]	; (8005a70 <_isatty_r+0x1c>)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	f7fe fd3c 	bl	80044dc <_isatty>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d102      	bne.n	8005a6e <_isatty_r+0x1a>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	b103      	cbz	r3, 8005a6e <_isatty_r+0x1a>
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
 8005a70:	20000b74 	.word	0x20000b74

08005a74 <_lseek_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d07      	ldr	r5, [pc, #28]	; (8005a94 <_lseek_r+0x20>)
 8005a78:	4604      	mov	r4, r0
 8005a7a:	4608      	mov	r0, r1
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	602a      	str	r2, [r5, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f7fe fd2c 	bl	80044e0 <_lseek>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_lseek_r+0x1e>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_lseek_r+0x1e>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	20000b74 	.word	0x20000b74

08005a98 <memmove>:
 8005a98:	4288      	cmp	r0, r1
 8005a9a:	b510      	push	{r4, lr}
 8005a9c:	eb01 0402 	add.w	r4, r1, r2
 8005aa0:	d902      	bls.n	8005aa8 <memmove+0x10>
 8005aa2:	4284      	cmp	r4, r0
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	d807      	bhi.n	8005ab8 <memmove+0x20>
 8005aa8:	1e43      	subs	r3, r0, #1
 8005aaa:	42a1      	cmp	r1, r4
 8005aac:	d008      	beq.n	8005ac0 <memmove+0x28>
 8005aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ab6:	e7f8      	b.n	8005aaa <memmove+0x12>
 8005ab8:	4402      	add	r2, r0
 8005aba:	4601      	mov	r1, r0
 8005abc:	428a      	cmp	r2, r1
 8005abe:	d100      	bne.n	8005ac2 <memmove+0x2a>
 8005ac0:	bd10      	pop	{r4, pc}
 8005ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aca:	e7f7      	b.n	8005abc <memmove+0x24>

08005acc <_realloc_r>:
 8005acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad0:	4680      	mov	r8, r0
 8005ad2:	4614      	mov	r4, r2
 8005ad4:	460e      	mov	r6, r1
 8005ad6:	b921      	cbnz	r1, 8005ae2 <_realloc_r+0x16>
 8005ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005adc:	4611      	mov	r1, r2
 8005ade:	f7fe bdb5 	b.w	800464c <_malloc_r>
 8005ae2:	b92a      	cbnz	r2, 8005af0 <_realloc_r+0x24>
 8005ae4:	f7fe fd46 	bl	8004574 <_free_r>
 8005ae8:	4625      	mov	r5, r4
 8005aea:	4628      	mov	r0, r5
 8005aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af0:	f000 f872 	bl	8005bd8 <_malloc_usable_size_r>
 8005af4:	4284      	cmp	r4, r0
 8005af6:	4607      	mov	r7, r0
 8005af8:	d802      	bhi.n	8005b00 <_realloc_r+0x34>
 8005afa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005afe:	d812      	bhi.n	8005b26 <_realloc_r+0x5a>
 8005b00:	4621      	mov	r1, r4
 8005b02:	4640      	mov	r0, r8
 8005b04:	f7fe fda2 	bl	800464c <_malloc_r>
 8005b08:	4605      	mov	r5, r0
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d0ed      	beq.n	8005aea <_realloc_r+0x1e>
 8005b0e:	42bc      	cmp	r4, r7
 8005b10:	4622      	mov	r2, r4
 8005b12:	4631      	mov	r1, r6
 8005b14:	bf28      	it	cs
 8005b16:	463a      	movcs	r2, r7
 8005b18:	f7fe fd16 	bl	8004548 <memcpy>
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	4640      	mov	r0, r8
 8005b20:	f7fe fd28 	bl	8004574 <_free_r>
 8005b24:	e7e1      	b.n	8005aea <_realloc_r+0x1e>
 8005b26:	4635      	mov	r5, r6
 8005b28:	e7df      	b.n	8005aea <_realloc_r+0x1e>
	...

08005b2c <_read_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	; (8005b4c <_read_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fe fc97 	bl	800446e <_read>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_read_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_read_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	20000b74 	.word	0x20000b74

08005b50 <_raise_r>:
 8005b50:	291f      	cmp	r1, #31
 8005b52:	b538      	push	{r3, r4, r5, lr}
 8005b54:	4604      	mov	r4, r0
 8005b56:	460d      	mov	r5, r1
 8005b58:	d904      	bls.n	8005b64 <_raise_r+0x14>
 8005b5a:	2316      	movs	r3, #22
 8005b5c:	6003      	str	r3, [r0, #0]
 8005b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b66:	b112      	cbz	r2, 8005b6e <_raise_r+0x1e>
 8005b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b6c:	b94b      	cbnz	r3, 8005b82 <_raise_r+0x32>
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 f830 	bl	8005bd4 <_getpid_r>
 8005b74:	462a      	mov	r2, r5
 8005b76:	4601      	mov	r1, r0
 8005b78:	4620      	mov	r0, r4
 8005b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b7e:	f000 b817 	b.w	8005bb0 <_kill_r>
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d00a      	beq.n	8005b9c <_raise_r+0x4c>
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	d103      	bne.n	8005b92 <_raise_r+0x42>
 8005b8a:	2316      	movs	r3, #22
 8005b8c:	6003      	str	r3, [r0, #0]
 8005b8e:	2001      	movs	r0, #1
 8005b90:	e7e7      	b.n	8005b62 <_raise_r+0x12>
 8005b92:	2400      	movs	r4, #0
 8005b94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b98:	4628      	mov	r0, r5
 8005b9a:	4798      	blx	r3
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	e7e0      	b.n	8005b62 <_raise_r+0x12>

08005ba0 <raise>:
 8005ba0:	4b02      	ldr	r3, [pc, #8]	; (8005bac <raise+0xc>)
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	f7ff bfd3 	b.w	8005b50 <_raise_r>
 8005baa:	bf00      	nop
 8005bac:	2000008c 	.word	0x2000008c

08005bb0 <_kill_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d07      	ldr	r5, [pc, #28]	; (8005bd0 <_kill_r+0x20>)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	602b      	str	r3, [r5, #0]
 8005bbe:	f7fe fc48 	bl	8004452 <_kill>
 8005bc2:	1c43      	adds	r3, r0, #1
 8005bc4:	d102      	bne.n	8005bcc <_kill_r+0x1c>
 8005bc6:	682b      	ldr	r3, [r5, #0]
 8005bc8:	b103      	cbz	r3, 8005bcc <_kill_r+0x1c>
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	bd38      	pop	{r3, r4, r5, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000b74 	.word	0x20000b74

08005bd4 <_getpid_r>:
 8005bd4:	f7fe bc3b 	b.w	800444e <_getpid>

08005bd8 <_malloc_usable_size_r>:
 8005bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bdc:	1f18      	subs	r0, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bfbc      	itt	lt
 8005be2:	580b      	ldrlt	r3, [r1, r0]
 8005be4:	18c0      	addlt	r0, r0, r3
 8005be6:	4770      	bx	lr

08005be8 <_init>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr

08005bf4 <_fini>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	bf00      	nop
 8005bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfa:	bc08      	pop	{r3}
 8005bfc:	469e      	mov	lr, r3
 8005bfe:	4770      	bx	lr
